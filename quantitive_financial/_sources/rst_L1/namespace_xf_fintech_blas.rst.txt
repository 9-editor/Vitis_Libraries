.. index:: pair: namespace; blas
.. _doxid-namespacexf_1_1fintech_1_1blas:
.. _cid-xf::fintech::blas:

namespace blas
==============

.. toctree::
	:hidden:

	class_xf_fintech_blas_BitConv.rst
	class_xf_fintech_blas_BoolArr.rst
	class_xf_fintech_blas_MemUtil.rst
	class_xf_fintech_blas_SpmA.rst
	class_xf_fintech_blas_SpmC.rst
	class_xf_fintech_blas_Spmv.rst
	class_xf_fintech_blas_WideConv.rst
	class_xf_fintech_blas_WideType.rst



.. _doxid-namespacexf_1_1fintech_1_1blas_1a8e76357f11736af0b8e7876505afb186:
.. _cid-xf::fintech::blas::hlsreg:
.. _doxid-namespacexf_1_1fintech_1_1blas_1a98d288dba81256cb77ac14352ca87c66:
.. _cid-xf::fintech::blas::hlsreg-2:
.. _doxid-namespacexf_1_1fintech_1_1blas_1a16c7a66f8fcc605edcd87cdba6e720ad:
.. _cid-xf::fintech::blas::streamsareempty:
.. ref-code-block:: cpp
	:class: overview-code-block

	// classes

	template <typename T>
	class :ref:`BitConv<doxid-classxf_1_1fintech_1_1blas_1_1_bit_conv>` 

	template <unsigned int W>
	class :ref:`BoolArr<doxid-classxf_1_1fintech_1_1blas_1_1_bool_arr>` 

	template <
	    typename t_FloatType,
	    unsigned int t_MemWidth,
	    unsigned int t_MemWidthBits
	    >
	class :ref:`MemUtil<doxid-classxf_1_1fintech_1_1blas_1_1_mem_util>` 

	template <typename t_DataType>
	class :ref:`SpmA<doxid-classxf_1_1fintech_1_1blas_1_1_spm_a>` 

	template <typename t_DataType>
	class :ref:`SpmC<doxid-classxf_1_1fintech_1_1blas_1_1_spm_c>` 

	template <
	    typename t_DataType,
	    unsigned int t_MemWidth,
	    unsigned int t_IndexWidth,
	    unsigned int t_MaxK,
	    unsigned int t_MaxM,
	    unsigned int t_MaxNnz
	    >
	class :ref:`Spmv<doxid-classxf_1_1fintech_1_1blas_1_1_spmv>` 

	template <
	    typename TS,
	    typename TD
	    >
	class :ref:`WideConv<doxid-classxf_1_1fintech_1_1blas_1_1_wide_conv>` 

	template <
	    typename T,
	    unsigned int t_Width,
	    unsigned int t_DataWidth = sizeof(T) * 8
	    >
	class :ref:`WideType<doxid-classxf_1_1fintech_1_1blas_1_1_wide_type>` 


.. FunctionSection




.. _doxid-namespacexf_1_1fintech_1_1blas_1a3df9ecd940546ab6f157a54fa53d59f7:
.. _cid-xf::fintech::blas::dimv:

dimv
----


Defined in <xf_fintech/dimv.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename t_DataType,
	    unsigned int t_N,
	    unsigned int t_NumDiag,
	    unsigned int t_EntriesInParallel
	    >
	void dimv (
	    t_DataType p_in [t_N][t_NumDiag],
	    t_DataType p_inV [t_N],
	    unsigned int p_n,
	    t_DataType p_outV [t_N]
	    )

Diagonal matrix - vector multiplication, preCondition matrix is square matrix and p_N is multiple of p_NumDiag and t_NumDiag>1, preCondition t_NumDiag > 1 && t_NumDiag == odd_number && t_EntriesInParallel > t_NumDiag/2.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - t_DataType

        - data type

    *
        - t_N

        - maximum number of entries alogn diagonal line

    *
        - t_NumDiag

        - number of diagonal lines indexed low to up, 3: tridiagonal; 5: pentadiagonal; 7:heptadiagonal

    *
        - t_EntriesInParallel

        - number of entries in each vector processed in parallel

    *
        - p_in

        - input diagonal matrix

    *
        - p_inV

        - input vector

    *
        - p_n

        - number of entries along diagonal line, must be multiple of t_EntriesInParallel

    *
        - p_outV

        - output vector

