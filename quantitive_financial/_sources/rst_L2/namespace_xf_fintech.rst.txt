.. index:: pair: namespace; fintech
.. _doxid-namespacexf_1_1fintech:
.. _cid-xf::fintech:

namespace fintech
=================

.. toctree::
	:hidden:

	namespace_xf_fintech_internal.rst
	struct_xf_fintech_BinomialTreeInputDataType.rst
	struct_xf_fintech_BinomialTreeInputDataType-2.rst
	struct_xf_fintech_hcfEngineInputDataType.rst
	struct_xf_fintech_hcfEngineInputDataType-2.rst
	struct_xf_fintech_jump_diffusion_params.rst
	class_xf_fintech_CPICapFloorEngine.rst
	class_xf_fintech_DiscountingBondEngine.rst
	class_xf_fintech_FdG2SwaptionEngine.rst
	class_xf_fintech_FdHullWhiteEngine.rst
	class_xf_fintech_InflationCapFloorEngine.rst



.. _doxid-namespacexf_1_1fintech_1a32e672525e04723278726fd742b9bf77:
.. _cid-xf::fintech::size:
.. _doxid-namespacexf_1_1fintech_1ad89f4667bcaf2992dc72854562e26a65:
.. _cid-xf::fintech::binomialtreeeuropeanput:
.. _doxid-namespacexf_1_1fintech_1ae4d42a0f8d34fb1acde1b1de12abfeae:
.. _cid-xf::fintech::binomialtreeeuropeancall:
.. _doxid-namespacexf_1_1fintech_1ac87960cf3022d57d7c1a0d67e9d57b74:
.. _cid-xf::fintech::binomialtreeamericanput:
.. _doxid-namespacexf_1_1fintech_1a8b3ec9e38e35d2e589dd1d3a92f85c4c:
.. _cid-xf::fintech::binomialtreeamericancall:
.. ref-code-block:: cpp
	:class: overview-code-block

	// namespaces

	namespace :ref:`xf::fintech::internal<doxid-namespacexf_1_1fintech_1_1internal>`

	// typedefs

	typedef unsigned int Size

	// structs

	template <typename DT>
	struct :ref:`BinomialTreeInputDataType<doxid-structxf_1_1fintech_1_1_binomial_tree_input_data_type>` 

	template <>
	struct :ref:`BinomialTreeInputDataType <double><doxid-structxf_1_1fintech_1_1_binomial_tree_input_data_type_3_01double_01_4>` 

	template <>
	struct :ref:`hcfEngineInputDataType <double><doxid-structxf_1_1fintech_1_1hcf_engine_input_data_type_3_01double_01_4>` 

	template <typename DT>
	struct :ref:`hcfEngineInputDataType<doxid-structxf_1_1fintech_1_1hcf_engine_input_data_type>` 

	template <typename DT>
	struct :ref:`jump_diffusion_params<doxid-structxf_1_1fintech_1_1jump__diffusion__params>` 

	// classes

	template <
	    typename DT,
	    int LEN
	    >
	class :ref:`CPICapFloorEngine<doxid-classxf_1_1fintech_1_1_c_p_i_cap_floor_engine>` 

	template <
	    typename DT,
	    int LEN
	    >
	class :ref:`DiscountingBondEngine<doxid-classxf_1_1fintech_1_1_discounting_bond_engine>` 

	template <
	    typename DT,
	    Size _exSize,
	    Size _xGridMax,
	    Size _yGridMax,
	    Size _layoutSizeMax = _xGridMax* _yGridMax
	    >
	class :ref:`FdG2SwaptionEngine<doxid-classxf_1_1fintech_1_1_fd_g2_swaption_engine>` 

	template <
	    typename DT,
	    unsigned int _ETSizeMax,
	    unsigned int _xGridMax,
	    unsigned int _legPSizeMax,
	    unsigned int _legRSizeMax
	    >
	class :ref:`FdHullWhiteEngine<doxid-classxf_1_1fintech_1_1_fd_hull_white_engine>` 

	template <
	    typename DT,
	    int LEN
	    >
	class :ref:`InflationCapFloorEngine<doxid-classxf_1_1fintech_1_1_inflation_cap_floor_engine>` 

	// global variables

	static const int :ref:`BinomialTreeMaxNodeDepth<doxid-namespacexf_1_1fintech_1a72532e8da70da086fe9dfe98590fb7da>`
	static const int BinomialTreeEuropeanPut
	static const int BinomialTreeEuropeanCall
	static const int BinomialTreeAmericanPut
	static const int BinomialTreeAmericanCall

Global Variables
----------------

.. _doxid-namespacexf_1_1fintech_1a72532e8da70da086fe9dfe98590fb7da:
.. _cid-xf::fintech::binomialtreemaxnodedepth:
.. ref-code-block:: cpp
	:class: title-code-block

	static const int BinomialTreeMaxNodeDepth



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - BinomialTreeMaxNodeDepth

        - the maximum number of intervals (0 to 1023)

    *
        - BinomialTreeEuropeanPut

        - calculate for European Put.

    *
        - BinomialTreeEuropeanPut

        - calculate for European Call.

    *
        - BinomialTreeEuropeanPut

        - calculate for American Put.

    *
        - BinomialTreeEuropeanPut

        - calculate for American Call.


.. FunctionSection




.. _doxid-namespacexf_1_1fintech_1ae3d6194693808059b5ffe71c7ad5f809:
.. _cid-xf::fintech::binomialtreeengine:

binomialTreeEngine
------------------


Defined in <xf_fintech/bt_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <typename DT>
	DT binomialTreeEngine (
	    :ref:`BinomialTreeInputDataType<doxid-structxf_1_1fintech_1_1_binomial_tree_input_data_type>` <DT>* inputData,
	    int optionType
	    )

BinomialTree Engine using CRR (Cox, Ross & Rubinstein)



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inputData

        - A structure containing the input model parameters

    *
        - optionType

        - Calculate for NPV European or American Call or Put



.. rubric:: Returns:

The calculated NPV

.. _doxid-namespacexf_1_1fintech_1ac8dfb0f95407cd42730740e8850b51f0:
.. _cid-xf::fintech::cfbsmengine:

cfBSMEngine
-----------


Defined in <xf_fintech/cf_bsm.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <typename DT>
	void cfBSMEngine (
	    DT s,
	    DT v,
	    DT r,
	    DT t,
	    DT k,
	    DT q,
	    unsigned int call,
	    DT* price,
	    DT* delta,
	    DT* gamma,
	    DT* vega,
	    DT* theta,
	    DT* rho
	    )

Single option price plus associated Greeks.

Produces a single price and associated Greeks for the given input parameters. This function is optimized to be synthesized by the HLS compiler and as such uses the hls namespace for the maths functions. In addition, the code is structured to calculate common elements (in parallel where possible) and reuse as appropriate.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - Data Type used for this function

    *
        - s

        - underlying

    *
        - v

        - volatility (decimal form)

    *
        - r

        - risk-free rate (decimal form)

    *
        - t

        - time to maturity

    *
        - k

        - strike price

    *
        - q

        - continuous dividend yield rate

    *
        - call

        - control whether call or put is calculated

    *
        - price

        - call/put premium

    *
        - delta

        - model sensitivity

    *
        - gamma

        - model sensitivity

    *
        - vega

        - model sensitivity

    *
        - theta

        - model sensitivity

    *
        - rho

        - model sensitivity

.. _doxid-namespacexf_1_1fintech_1a38aacbb041baf3659ca7dd67d556f1e4:
.. _cid-xf::fintech::fddouglas:

FdDouglas
---------


Defined in <xf_fintech/fd_solver.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT,
	    unsigned int MEM_WIDTH,
	    unsigned int INDEX_WIDTH,
	    unsigned int A_SIZE,
	    unsigned int M_SIZE,
	    unsigned int LOG2_M_SIZE,
	    unsigned int DIM2_SIZE1,
	    unsigned int DIM2_SIZE2
	    >
	void FdDouglas (
	    DT A [A_SIZE],
	    unsigned int Ar [A_SIZE],
	    unsigned int Ac [A_SIZE],
	    unsigned int Annz,
	    DT A1 [M_SIZE][DIM2_SIZE1],
	    DT A2 [M_SIZE][DIM2_SIZE2],
	    DT X1 [M_SIZE][DIM2_SIZE1],
	    DT X2 [M_SIZE][DIM2_SIZE2],
	    DT b [M_SIZE],
	    DT u0 [M_SIZE],
	    unsigned int M1,
	    unsigned int M2,
	    unsigned int N,
	    DT u [M_SIZE]
	    )

Top level callable function to perform the Douglas ADI method.

This function creates the solver/stream wrapper objects and connects them up It also provides the extra connectivity for the non-streaming blocks



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - A

        - Sparse matrix value

    *
        - Ar

        - Sparse matrix row

    *
        - Ac

        - Sparse matrix column

    *
        - Annz

        - Number of non-zeros in sparse matrix (how many elements of A/Ar/Ac are valid)

    *
        - A1

        - Tridiagonal matrix stored as three vectors lower/main/upper

    *
        - A2

        - Pentadiagonal matrix stored as five vectors lower/lower/main/upper/upper

    *
        - X1

        - Tridiagonal matrix stored as three vectors lower/main/upper

    *
        - X2

        - Pentadiagonal matrix stored as five vectors lower/lower/main/upper/upper

    *
        - b

        - Boundary condition vector

    *
        - u0

        - Initial condition (payoff condition for a call option)

    *
        - M1

        - Size of array [0..M1] in S direction

    *
        - M2

        - Size of array [0..M2] in V direction

    *
        - N

        - Iteration count

    *
        - u

        - Calculated price grid

.. _doxid-namespacexf_1_1fintech_1aab75b73ac666ea39c19322cebc82039d:
.. _cid-xf::fintech::hcfengine:

hcfEngine
---------


Defined in <xf_fintech/hcf_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <typename DT>
	DT hcfEngine (struct :ref:`hcfEngineInputDataType<doxid-structxf_1_1fintech_1_1hcf_engine_input_data_type>` <DT>* input_data)

Engine for Hestion Closed Form Solution.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - input_data

        - A structure containing the kerenl model parameters



.. rubric:: Returns:

the calculated call value

.. _doxid-namespacexf_1_1fintech_1ab8f5172cd512ca0f92b742e1011318d1:
.. _cid-xf::fintech::m76engine:

M76Engine
---------


Defined in <xf_fintech/m76_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <typename DT>
	void M76Engine (
	    struct :ref:`jump_diffusion_params<doxid-structxf_1_1fintech_1_1jump__diffusion__params>` <DT>* p,
	    DT* call_price
	    )

Engine for the Merton Jump Diffusion Model.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - p

        - A structure containing the jump diffusion parameters

    *
        - call_price

        - An array of BS solutions multiplied by the jump weighting Note that these must be subsequently summed to get the Jump Diffusion solution

.. _doxid-namespacexf_1_1fintech_1a63742bc9c2969914ee84f5df70909f2c:
.. _cid-xf::fintech::mceuropeanengine:

MCEuropeanEngine
----------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN = 10,
	    bool Antithetic = false
	    >
	void MCEuropeanEngine (
	    DT underlying,
	    DT volatility,
	    DT dividendYield,
	    DT riskFreeRate,
	    DT timeLength,
	    DT strike,
	    bool optionType,
	    ap_uint <32>* seed,
	    DT* output,
	    DT requiredTolerance = 0.02,
	    unsigned int requiredSamples = 1024,
	    unsigned int timeSteps = 100,
	    unsigned int maxSamples = 134217727
	    )

European Option Pricing Engine using Monte Carlo Method. This implementation uses Black-Scholes valuation model.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result, default double-precision data type.

    *
        - UN

        - number of Monte Carlo Module in parallel, which affects the latency and resources utilization, default 10.

    *
        - Antithetic

        - anthithetic is used for variance reduction, default this feature is disabled.

    *
        - underlying

        - intial value of underlying asset at time 0.

    *
        - volatility

        - fixed volatility of underlying asset.

    *
        - dividendYield

        - the constant dividend rate for continuous dividends.

    *
        - riskFreeRate

        - risk-free interest rate.

    *
        - timeLength

        - the time length of constract from start to end.

    *
        - strike

        - the strike price also known as exericse price, which is settled in the contract.

    *
        - optionType

        - option type. 1: put option, 0: call option.

    *
        - seed

        - array to store the inital seed for each RNG.

    *
        - output

        - output array.

    *
        - requiredTolerance

        - the tolerance required. If requiredSamples is not set, when reaching the required tolearance, simulation will stop, default 0.02.

    *
        - requiredSamples

        - the samples number required. When reaching the required number, simulation will stop, default 1024.

    *
        - timeSteps

        - the number of discrete steps from 0 to T, T is the expiry time, default 100.

    *
        - maxSamples

        - the maximum sample number. When reaching it, the simulation will stop, default 2,147,483,648.

.. _doxid-namespacexf_1_1fintech_1abb7a07fbc9a1053945e9498dc5acfcea:
.. _cid-xf::fintech::mceuropeanpribypassengine:

MCEuropeanPriBypassEngine
-------------------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN = 10
	    >
	void MCEuropeanPriBypassEngine (
	    DT underlying,
	    DT volatility,
	    DT dividendYield,
	    DT riskFreeRate,
	    DT timeLength,
	    DT strike,
	    bool optionType,
	    ap_uint <32>* seed,
	    DT* output,
	    DT requiredTolerance = 0.02,
	    unsigned int requiredSamples = 1024,
	    unsigned int timeSteps = 100,
	    unsigned int maxSamples = 134217727
	    )

path pricer bypass variant (interface compatible with standard MCEuropeanEngine)



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result, default double-precision data type.

    *
        - UN

        - number of Monte Carlo Module in parallel, which affects the latency and resources utilization, default 10.

    *
        - underlying

        - intial value of underlying asset at time 0.

    *
        - volatility

        - fixed volatility of underlying asset.

    *
        - dividendYield

        - the constant dividend rate for continuous dividends.

    *
        - riskFreeRate

        - risk-free interest rate.

    *
        - timeLength

        - the time length of constract from start to end.

    *
        - strike

        - the strike price also known as exericse price, which is settled in the contract.

    *
        - optionType

        - option type. 1: put option, 0: call option.

    *
        - seed

        - array to store the inital seed for each RNG.

    *
        - output

        - output array.

    *
        - requiredTolerance

        - the tolerance required. If requiredSamples is not set, when reaching the required tolearance, simulation will stop, default 0.02.

    *
        - requiredSamples

        - the samples number required. When reaching the required number, simulation will stop, default 1024.

    *
        - timeSteps

        - the number of discrete steps from 0 to T, T is the expiry time, default 100.

    *
        - maxSamples

        - the maximum sample number. When reaching it, the simulation will stop, default 2,147,483,648.

.. _doxid-namespacexf_1_1fintech_1a58fef768f554a2817fa966ee754ff348:
.. _cid-xf::fintech::mceuropeanhestonengine:

MCEuropeanHestonEngine
----------------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN = 8,
	    DiscreType discretization = kDTQuadraticExponential,
	    bool Antithetic = false
	    >
	void MCEuropeanHestonEngine (
	    DT underlying,
	    DT riskFreeRate,
	    DT sigma,
	    DT v0,
	    DT theta,
	    DT kappa,
	    DT rho,
	    DT dividendYield,
	    bool optionType,
	    DT strike,
	    DT timeLength,
	    ap_uint <32> seed [UN][2],
	    DT* outputs,
	    DT requiredTolerance = 0.02,
	    unsigned int requiredSamples = 1024,
	    unsigned int timeSteps = 100,
	    unsigned int maxSamples = 134217727
	    )

European Option Pricing Engine using Monte Carlo Method based on Heston valuation model.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float, which decides the precision of output, default double-precision data type.

    *
        - UN

        - number of Monte Carlo Module in parallel, which affects the latency and resources utilization, default 10.

    *
        - DiscreType

        - methods which is used to discrete the stochastic process. Currently, five discrete types, including kDTPartialTruncation, kDTFullTruncation, kDTReflection, kDTQuadraticExponential and kDTQuadraticExponentialMartingale, are supported, default kDTQuadraticExponential.

    *
        - Antithetic

        - anthithetic is used for variance reduction, default this feature is disabled.

    *
        - underlying

        - the initial price of underlying asset at time 0.

    *
        - riskFreeRate

        - risk-free interest rate.

    *
        - sigma

        - the volatility of volatility

    *
        - v0

        - initial volatility of stock

    *
        - theta

        - the long variance, as t tends to infinity, the expected value of vt tends to theta.

    *
        - kappa

        - the rate at which vt tends to theta.

    *
        - rho

        - the correlation coefficient between price and variance.

    *
        - dividendYield

        - the constant dividend rate for continuous dividends.

    *
        - optionType

        - option type. 1: put option, 0: call option.

    *
        - strike

        - the strike price also known as exericse price, which is settled in the contract.

    *
        - timeLength

        - time length from now to expiry date.

    *
        - seed

        - the seeds used to initialize RNG.

    *
        - outputs

        - pricing result array of this engine.

    *
        - requiredTolerance

        - the tolerance required. If requiredSamples is not set, when reaching the required tolearance, simulation will stop.

    *
        - requiredSamples

        - the samples number required. When reaching the required number, simulation will stop, default 1024.

    *
        - timeSteps

        - the number of discrete steps from 0 to T, T is the expiry time, default 100.

    *
        - maxSamples

        - the maximum sample number. When reaching it, the simulation will stop, default 2,147,483,648.

.. _doxid-namespacexf_1_1fintech_1aa33e30a71486a3dca4d2a8ffed1c11cb:
.. _cid-xf::fintech::mcmultiasseteuropeanhestonengine:

MCMultiAssetEuropeanHestonEngine
--------------------------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int ASSETS = 5,
	    int UN = 1,
	    DiscreType discretization = kDTQuadraticExponential
	    >
	void MCMultiAssetEuropeanHestonEngine (
	    DT underlying [ASSETS],
	    DT riskFreeRate,
	    DT sigma [ASSETS],
	    DT v0 [ASSETS],
	    DT theta [ASSETS],
	    DT kappa [ASSETS],
	    DT corrMatrix [ASSETS *2+1][ASSETS],
	    DT rho [ASSETS],
	    DT dividendYield [ASSETS],
	    bool optionType,
	    DT strike,
	    DT timeLength,
	    ap_uint <32> seed [UN][2],
	    DT* outputs,
	    DT requiredTolerance = 0.02,
	    ap_uint <32> requiredSamples = 0,
	    ap_uint <32> timeSteps = 100,
	    ap_uint <32> maxSamples = 134217727
	    )

Multiple Asset European Option Pricing Engine using Monte Carlo Method based on Heston valuation model.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float, which decides the precision of output, default double-precision data type.

    *
        - ASSETS

        - number of underlying assets supported.

    *
        - UN

        - number of Monte Carlo Module in parallel, which affects the latency and resources utilization, default 10.

    *
        - DiscreType

        - methods which is used to discrete the stochastic process. Currently, five discrete types, including kDTPartialTruncation, kDTFullTruncation, kDTReflection, kDTQuadraticExponential and kDTQuadraticExponentialMartingale, are supported, default kDTQuadraticExponential.

    *
        - underlying

        - the initial price of underlying asset at time 0.

    *
        - riskFreeRate

        - risk-free interest rate.

    *
        - sigma

        - the volatility of volatility

    *
        - v0

        - initial volatility of stock

    *
        - theta

        - the long variance, as t tends to infinity, the expected value of vt tends to theta.

    *
        - kappa

        - the rate at which vt tends to theta.

    *
        - corrMatrix

        - the LU decomposition result of correlation matrix of all stochastic variables, only none-zero elements are stored.

    *
        - rho

        - the correlation coefficient between price and variance.

    *
        - dividendYield

        - the constant dividend rate for continuous dividends.

    *
        - optionType

        - option type. 1: call option, 0: put option.

    *
        - strike

        - the strike price also known as exericse price, which is settled in the contract.

    *
        - timeLength

        - time length from now to expiry date.

    *
        - seed

        - the seeds used to initialize RNG.

    *
        - outputs

        - pricing result array of this engine.

    *
        - requiredTolerance

        - the tolerance required. If requiredSamples is not set, when reaching the required tolearance, simulation will stop.

    *
        - requiredSamples

        - the samples number required. When reaching the required number, simulation will stop, default 1024.

    *
        - timeSteps

        - the number of discrete steps from 0 to T, T is the expiry time, default 100.

    *
        - maxSamples

        - the maximum sample number. When reaching it, the simulation will stop, default 2,147,483,648.

.. _doxid-namespacexf_1_1fintech_1a98fff3f17d416d3e84908bbcd930cfd7:
.. _cid-xf::fintech::mcamericanenginepresamples:

MCAmericanEnginePreSamples
--------------------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN = 2
	    >
	void MCAmericanEnginePreSamples (
	    DT underlying,
	    DT volatility,
	    DT riskFreeRate,
	    DT dividendYield,
	    DT timeLength,
	    DT strike,
	    bool optionType,
	    ap_uint <32>* seed,
	    ap_uint <8*sizeof (DT)*UN>* priceOut,
	    ap_uint <8*sizeof (DT)>* matOut,
	    unsigned int calibSamples = 4096,
	    unsigned int timeSteps = 100
	    )

American Option Pricing Engine using Monte Carlo Method. PreSample kernel: this kernel samples some amount of path and store them to external memory.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result, default double-precision data type.

    *
        - UN

        - number of Monte Carlo Module in parallel (in path dimension), which affects the latency and resources utilization, default 2.

    *
        - underlying

        - intial value of underlying asset at time 0.

    *
        - volatility

        - fixed volatility of underlying asset.

    *
        - dividendYield

        - the constant dividend rate for continuous dividends.

    *
        - riskFreeRate

        - risk-free interest rate.

    *
        - timeLength

        - the time length of constract from start to end.

    *
        - strike

        - the strike price also known as exericse price, which is settled in the contract.

    *
        - optionType

        - option type. 1: put option, 0: call option.

    *
        - seed

        - array to store the inital seed for each RNG.

    *
        - priceOut

        - price data output, the data can be stored to HBM or DDR

    *
        - matOut

        - matrix output, the data can be stored to HBM or DDR

    *
        - calibSamples

        - sample numbers that used in calibration, default 4096.

    *
        - timeSteps

        - the number of discrete steps from 0 to T, T is the expiry time, default 100.

.. _doxid-namespacexf_1_1fintech_1a571c197f0022df8aa46afbd0ff407b40:
.. _cid-xf::fintech::mcamericanenginecalibrate:

MCAmericanEngineCalibrate
-------------------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN = 2,
	    int UN_STEP = 2
	    >
	void MCAmericanEngineCalibrate (
	    DT timeLength,
	    DT riskFreeRate,
	    DT strike,
	    bool optionType,
	    ap_uint <8*sizeof (DT)*UN>* priceIn,
	    ap_uint <8*sizeof (DT)>* matIn,
	    ap_uint <8*sizeof (DT)*4>* coefOut,
	    unsigned int calibSamples = 4096,
	    unsigned int timeSteps = 100
	    )

American Option Pricing Engine using Monte Carlo Method. Calibrate kernel: this kernel reads the sample price data from external memory and use them to calculate the coefficient.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result, default double-precision data type.

    *
        - UN

        - number of Monte Carlo Module in parallel (in path dimension), which affects the latency and resources utilization, default 2. [this unroll number should be equal to UN in MCAmericanEnginePresample]

    *
        - UN_STEP

        - number of Monte Carlo Module in parallel (in time steps dimension), which affects the latency and resources utilization, default 2. [this Unroll is completely resource bounded, unrelated to other params]

    *
        - timeLength

        - the time length of constract from start to end.

    *
        - riskFreeRate

        - risk-free interest rate.

    *
        - strike

        - the strike price also known as exericse price, which is settled in the contract.

    *
        - optionType

        - option type. 1: put option, 0: call option.

    *
        - priceIn

        - the price data, read in from DDR or HBM

    *
        - matIn

        - the matrix data, read in from DDR or HBM

    *
        - coefOut

        - the coef data that calculated by this kernel, the data can be stored to DDR or HBM

    *
        - calibSamples

        - sample numbers that used in calibration, default 4096.

    *
        - timeSteps

        - the number of discrete steps from 0 to T, T is the expiry time, default 100.

.. _doxid-namespacexf_1_1fintech_1a291ab452408600ce9111e224190d0f30:
.. _cid-xf::fintech::mcamericanenginepricing:

MCAmericanEnginePricing
-----------------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN = 2
	    >
	void MCAmericanEnginePricing (
	    DT underlying,
	    DT volatility,
	    DT dividendYield,
	    DT riskFreeRate,
	    DT timeLength,
	    DT strike,
	    bool optionType,
	    ap_uint <32>* seed,
	    ap_uint <8*sizeof (DT)*4>* coefIn,
	    DT* output,
	    DT requiredTolerance = 0.02,
	    unsigned int requiredSamples = 4096,
	    unsigned int timeSteps = 100,
	    unsigned int maxSamples = 134217727
	    )

American Option Pricing Engine using Monte Carlo Method. Pricing kernel.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result, default double-precision data type.

    *
        - UN

        - number of Monte Carlo Module in parallel (in path dimension), which affects the latency and resources utilization, default 2. [this unroll number should be equal to UN in MCAmericanEnginePresample]

    *
        - underlying

        - intial value of underlying asset at time 0.

    *
        - volatility

        - fixed volatility of underlying asset.

    *
        - dividendYield

        - the constant dividend rate for continuous dividends.

    *
        - riskFreeRate

        - risk-free interest rate.

    *
        - timeLength

        - the time length of constract from start to end.

    *
        - strike

        - the strike price also known as exericse price, which is settled in the contract.

    *
        - optionType

        - option type. 1: put option, 0: call option.

    *
        - seed

        - array of seed to initialize RNG.

    *
        - coefIn

        - the coef data that calculated by this kernel, the data is loaded from DDR or HBM

    *
        - output

        - the output price data (size=1), can be stroed in DDR or HBM

    *
        - requiredTolerance

        - the tolerance required. If requiredSamples is not set, when reaching the required tolearance, simulation will stop, default 0.02.

    *
        - requiredSamples

        - the samples number required. When reaching the required number, simulation will stop, default 1024.

    *
        - timeSteps

        - the number of discrete steps from 0 to T, T is the expiry time.

    *
        - maxSamples

        - the maximum sample number. When reaching it, the simulation will stop, default 2,147,483,648.

.. _doxid-namespacexf_1_1fintech_1ace9815fc38e3e5c71fd4d4cb3bff21d9:
.. _cid-xf::fintech::mcamericanengine:

MCAmericanEngine
----------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN_PATH = 1,
	    int UN_STEP = 1,
	    int UN_PRICING = 2
	    >
	void MCAmericanEngine (
	    DT underlying,
	    DT volatility,
	    DT riskFreeRate,
	    DT dividendYield,
	    DT timeLength,
	    DT strike,
	    bool optionType,
	    ap_uint <32>* seed,
	    ap_uint <8*sizeof (DT)*UN_PATH>* priceData,
	    ap_uint <8*sizeof (DT)>* matData,
	    DT* output,
	    DT requiredTolerance = 0.02,
	    unsigned int calibSamples = 4096,
	    unsigned int requiredSamples = 4096,
	    unsigned int timeSteps = 100,
	    unsigned int maxSamples = 134217727
	    )

American Option Pricing Engine using Monte Carlo Method. calibration process and pricing process all in one kernel.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result, default double-precision data type.

    *
        - UN_PATH

        - number of Monte Carlo Module of calibration process in parallel (in path dimension), which affects the latency and resources utilization, default 1.

    *
        - UN_STEP

        - number of Monte Carlo Module of calibration process in parallel (in time steps dimension), which affects the latency and resources utilization, default 1.

    *
        - UN_PRICING

        - number of Monte Carlo Module of pricing process in parallel (in path dimension), which affects the latency and resources utilization, default 2. Three unroll numbers UN_PATH, UN_STEP and UN_PRICING are indenpendent. Each unroll number affects the execution speed of part of AmericanEngine. On-board test reveals that the pricing phase takes longest time of execution. Therefore, setting larger UN_PRICING benifits most with limited resources.

    *
        - underlying

        - intial value of underlying asset at time 0.

    *
        - volatility

        - fixed volatility of underlying asset.

    *
        - dividendYield

        - the constant dividend rate for continuous dividends.

    *
        - riskFreeRate

        - risk-free interest rate.

    *
        - timeLength

        - the time length of constract from start to end.

    *
        - strike

        - the strike price also known as exericse price, which is settled in the contract.

    *
        - optionType

        - option type. 1: put option, 0: call option.

    *
        - seed

        - array of seed to initialize RNG.

    *
        - priceData

        - the price data, used as the intermediate result storage location. It should be mapped to an external memory: DDR or HBM.

    *
        - matData

        - the matrix data, used as the intermediate result storage location. It should be mapped to an external memory: DDR or HBM.

    *
        - output

        - the output price data (size=1), can be stroed in DDR or HBM

    *
        - requiredTolerance

        - the tolerance required. If requiredSamples is not set, when reaching the required tolearance, simulation will stop, default 0.02.

    *
        - requiredSamples

        - the samples number required. When reaching the required number, simulation will stop, default 1024.

    *
        - calibSamples

        - sample numbers that used in calibration, default 4096.

    *
        - timeSteps

        - the number of discrete steps from 0 to T, T is the expiry time.

    *
        - maxSamples

        - the maximum sample number. When reaching it, the simulation will stop, default 2,147,483,648.

.. _doxid-namespacexf_1_1fintech_1a441316638bf5d886a0c8f4c16ba3c2c7:
.. _cid-xf::fintech::mcasiangeometricapengine:

MCAsianGeometricAPEngine
------------------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN = 16
	    >
	void MCAsianGeometricAPEngine (
	    DT underlying,
	    DT volatility,
	    DT dividendYield,
	    DT riskFreeRate,
	    DT timeLength,
	    DT strike,
	    bool optionType,
	    ap_uint <32>* seed,
	    DT* output,
	    DT requiredTolerance = 0.02,
	    unsigned int requiredSamples = 1024,
	    unsigned int timeSteps = 100,
	    unsigned int maxSamples = 134217727
	    )

Asian Arithmetic Average Price Engine using Monte Carlo Method Based on Black-Scholes Model. The settlement price of the underlying asset at expiry time is the geomertic average of asset price during the option lifetime.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - Supported data type including double and float, which decides the precision of output.

    *
        - UN

        - The number of Monte Carlo Module in parallel, which affects the latency and resources utilization.

    *
        - underlying

        - The initial price of underlying asset.

    *
        - volatility

        - The market's price volatility.

    *
        - dividendYield

        - The dividend yield is the company's total annual dividend payments divided by its market capitalization, or the dividend per share, divided by the price per share.

    *
        - riskFreeRate

        - The risk-free interest rate is the rate of return of a hypothetical investment with no risk of financial loss, over a given period of time.

    *
        - timeLength

        - The given period of time.

    *
        - strike

        - The strike price also known as exericse price, which is settled in the contract.

    *
        - optionType

        - Option type. 1: put option, 0: call option.

    *
        - seed

        - array of seed to initialize RNG.

    *
        - output

        - Output array.

    *
        - requiredTolerance

        - The tolerance required. If requiredSamples is not set, simulation will not stop, unless the requiredTolerance is reached, default 0.02.

    *
        - requiredSamples

        - The samples number required. When reaching the required number, simulation will stop, default 1024.

    *
        - timeSteps

        - Number of interval, default 100.

    *
        - maxSamples

        - The maximum sample number. When reaching the it, the simulation will stop, default 2147483648.

.. _doxid-namespacexf_1_1fintech_1a37906d5a59c458515d77730c785a632d:
.. _cid-xf::fintech::mcasianarithmeticapengine:

MCAsianArithmeticAPEngine
-------------------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN = 16
	    >
	void MCAsianArithmeticAPEngine (
	    DT underlying,
	    DT volatility,
	    DT dividendYield,
	    DT riskFreeRate,
	    DT timeLength,
	    DT strike,
	    bool optionType,
	    ap_uint <32>* seed,
	    DT* output,
	    DT requiredTolerance = 0.02,
	    unsigned int requiredSamples = 1024,
	    unsigned int timeSteps = 100,
	    unsigned int maxSamples = 134217727
	    )

Asian Arithmetic Average Price Engine using Monte Carlo Method Based on Black-Scholes Model. The settlement price of the underlying asset at expiry time is the geomertic average of asset price during the option lifetime.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - Supported data type including double and float, which decides the precision of output.

    *
        - UN

        - The number of Monte Carlo Module in parallel, which affects the latency and resources utilization.

    *
        - underlying

        - The initial price of underlying asset.

    *
        - volatility

        - The market's price volatility.

    *
        - dividendYield

        - The dividend yield is the company's total annual dividend payments divided by its market capitalization, or the dividend per share, divided by the price per share.

    *
        - riskFreeRate

        - The risk-free interest rate is the rate of return of a hypothetical investment with no risk of financial loss, over a given period of time.

    *
        - timeLength

        - The given period of time.

    *
        - strike

        - The strike price also known as exericse price, which is settled in the contract.

    *
        - optionType

        - Option type. 1: put option, 0: call option.

    *
        - seed

        - array of seed to initialize RNG.

    *
        - output

        - Output array.

    *
        - requiredTolerance

        - The tolerance required. If requiredSamples is not set, simulation will not stop, unless the requiredTolerance is reached, default 0.02.

    *
        - requiredSamples

        - The samples number required. When reaching the required number, simulation will stop, default 1024.

    *
        - timeSteps

        - Number of interval, default 100.

    *
        - maxSamples

        - The maximum sample number. When reaching the it, the simulation will stop, default 2147483648.

.. _doxid-namespacexf_1_1fintech_1a134d13ba0ce4aff388cfefe82ef59dbb:
.. _cid-xf::fintech::mcasianarithmeticasengine:

MCAsianArithmeticASEngine
-------------------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN = 16
	    >
	void MCAsianArithmeticASEngine (
	    DT underlying,
	    DT volatility,
	    DT dividendYield,
	    DT riskFreeRate,
	    DT timeLength,
	    DT strike,
	    bool optionType,
	    ap_uint <32>* seed,
	    DT* output,
	    DT requiredTolerance = 0.02,
	    unsigned int requiredSamples = 1024,
	    unsigned int timeSteps = 100,
	    unsigned int maxSamples = 134217727
	    )

Asian Arithmetic Average Strike Engine using Monte Carlo Method Based on Black-Scholes Model. The settlement price of the underlying asset at expiry time is the geomertic average of asset price during the option lifetime.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - Supported data type including double and float, which decides the precision of output.

    *
        - UN

        - The number of Monte Carlo Module in parallel, which affects the latency and resources utilization.

    *
        - underlying

        - The initial price of underlying asset.

    *
        - volatility

        - The market's price volatility.

    *
        - dividendYield

        - The dividend yield is the company's total annual dividend payments divided by its market capitalization, or the dividend per share, divided by the price per share.

    *
        - riskFreeRate

        - The risk-free interest rate is the rate of return of a hypothetical investment with no risk of financial loss, over a given period of time.

    *
        - timeLength

        - The given period of time.

    *
        - strike

        - The strike price also known as exericse price, which is settled in the contract.

    *
        - optionType

        - Option type. 1: put option, 0: call option.

    *
        - seed

        - array of seed to initialize RNG.

    *
        - output

        - Output array.

    *
        - requiredTolerance

        - the tolerance required. If requiredSamples is not set, when reaching the required tolearance, simulation will stop, default 0.02.

    *
        - requiredSamples

        - the samples number required. When reaching the required number, simulation will stop, default 1024.

    *
        - timeSteps

        - the number of discrete steps from 0 to T, T is the expiry time, default 100.

    *
        - maxSamples

        - the maximum sample number. When reaching the it, the simulation will stop, default 2,147,483,648.

.. _doxid-namespacexf_1_1fintech_1a2053356d3f3c875bab6582a0ee466582:
.. _cid-xf::fintech::mcbarriernobiasengine:

MCBarrierNoBiasEngine
---------------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN = 10
	    >
	void MCBarrierNoBiasEngine (
	    DT underlying,
	    DT volatility,
	    DT dividendYield,
	    DT riskFreeRate,
	    DT timeLength,
	    DT barrier,
	    DT strike,
	    ap_uint <2> barrierType,
	    bool optionType,
	    ap_uint <32>* seed,
	    DT* output,
	    DT rebate = 0,
	    DT requiredTolerance = 0.02,
	    unsigned int requiredSamples = 1024,
	    unsigned int timeSteps = 100,
	    unsigned int maxSamples = 134217727
	    )

Barrier Option Pricing Engine using Monte Carlo Simulation. Using brownian bridge to generate the non-biased result.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result, default double-precision data type.

    *
        - UN

        - number of Monte Carlo Module in parallel, which affects the latency and resources utilization, default 10.

    *
        - underlying

        - intial value of underlying asset at time 0.

    *
        - volatility

        - fixed volatility of underlying asset.

    *
        - dividendYield

        - the constant dividend rate for continuous dividends.

    *
        - riskFreeRate

        - risk-free interest rate.

    *
        - timeLength

        - the time length of constract from start to end.

    *
        - barrier

        - single barrier value.

    *
        - strike

        - the strike price also known as exericse price, which is settled in the contract.

    *
        - barrierType

        - barrier type including: DownIn(0), DownOut(1), UpIn(2), UpOut(3).

    *
        - optionType

        - option type. 1: put option, 0: call option.

    *
        - seed

        - array to store the inital seeds of RNG.

    *
        - output

        - output array.

    *
        - rebate

        - rebate value which is paied when the option is not triggered, default 0.

    *
        - requiredTolerance

        - the tolerance required. If requiredSamples is not set, when reaching the required tolearance, simulation will stop, default 0.02.

    *
        - requiredSamples

        - the samples number required. When reaching the required number, simulation will stop, default 1024.

    *
        - timeSteps

        - the number of discrete steps from 0 to T, T is the expiry time, default 100.

    *
        - maxSamples

        - the maximum sample number. When reaching the it, the simulation will stop, default 2,147,483,648.

.. _doxid-namespacexf_1_1fintech_1ad6e615ba343a9039546315bcf070a358:
.. _cid-xf::fintech::mcbarrierengine:

MCBarrierEngine
---------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN = 10
	    >
	void MCBarrierEngine (
	    DT underlying,
	    DT volatility,
	    DT dividendYield,
	    DT riskFreeRate,
	    DT timeLength,
	    DT barrier,
	    DT strike,
	    ap_uint <2> barrierType,
	    bool optionType,
	    ap_uint <32>* seed,
	    DT* output,
	    DT rebate = 0,
	    DT requiredTolerance = 0.02,
	    unsigned int requiredSamples = 1024,
	    unsigned int timeSteps = 100,
	    unsigned int maxSamples = 134217727
	    )

Barrier Option Pricing Engine using Monte Carlo Simulation.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result, default double-precision data type.

    *
        - UN

        - number of Monte Carlo Module in parallel, which affects the latency and resources utilization, default 10.

    *
        - underlying

        - intial value of underlying asset at time 0.

    *
        - volatility

        - fixed volatility of underlying asset.

    *
        - dividendYield

        - the constant dividend rate for continuous dividends.

    *
        - riskFreeRate

        - risk-free interest rate.

    *
        - timeLength

        - the time length of constract from start to end.

    *
        - barrier

        - single barrier value.

    *
        - strike

        - the strike price also known as exericse price, which is settled in the contract.

    *
        - barrierType

        - barrier type including: DownIn(0), DownOut(1), UpIn(2), UpOut(3).

    *
        - optionType

        - option type. 1: put option, 0: call option.

    *
        - seed

        - array to store the inital seeds for each RNG.

    *
        - output

        - output array.

    *
        - rebate

        - rebate value which is paied when the option is not triggered, default 0.

    *
        - requiredTolerance

        - the tolerance required. If requiredSamples is not set, when reaching the required tolearance, simulation will stop, default 0.02.

    *
        - requiredSamples

        - the samples number required. When reaching the required number, simulation will stop, default 1024.

    *
        - timeSteps

        - the number of discrete steps from 0 to T, T is the expiry time, default 100.

    *
        - maxSamples

        - the maximum sample number. When reaching the it, the simulation will stop, default 2,147,483,648.

.. _doxid-namespacexf_1_1fintech_1ac52142b8d515ad1f662143a0b5ed8efd:
.. _cid-xf::fintech::mccliquetengine:

MCCliquetEngine
---------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN = 10
	    >
	void MCCliquetEngine (
	    DT underlying,
	    DT volatility,
	    DT dividendYield,
	    DT riskFreeRate,
	    DT timeLength,
	    DT strike,
	    bool optionType,
	    DT* resetDates,
	    ap_uint <32>* seed,
	    DT* output,
	    DT requiredTolerance = 0.02,
	    unsigned int timeSteps = 100,
	    unsigned int requiredSamples = 1024,
	    unsigned int maxSamples = 134217727
	    )

Cliquet Option Pricing Engine using Monte Carlo Simulation. The B-S model used to describe the dynamics of undelying asset.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result, default double-precision data type.

    *
        - UN

        - number of Monte Carlo Module in parallel, which affects the latency and resources utilization, default 10.

    *
        - underlying

        - intial value of underlying asset.

    *
        - volatility

        - fixed volatility of underlying asset.

    *
        - dividendYield

        - the constant dividend rate for continuous dividends.

    *
        - riskFreeRate

        - risk-free interest rate.

    *
        - timeLength

        - the time length of constract from start to end.

    *
        - strike

        - the strike price also known as exericse price, which is settled in the contract.

    *
        - optionType

        - option type. 1: put option, 0: call option.

    *
        - resetDates

        - array for reset dates, such as Semiannual, Quarterly.

    *
        - seed

        - array to store the inital seeds of RNG.

    *
        - output

        - output array.

    *
        - requiredTolerance

        - the tolerance required. If requiredSamples is not set, when reaching the required tolearance, simulation will stop. default 0.02.

    *
        - requiredSamples

        - the samples number required. When reaching the required number, simulation will stop, default 1024.

    *
        - timeSteps

        - the number of discrete steps from 0 to T, T is the expiry time, default 100.

    *
        - maxSamples

        - the maximum sample number. When reaching the it, the simulation will stop, default 2,147,483,648.

.. _doxid-namespacexf_1_1fintech_1a9d69a96bfebdb5a593eaa7624bbda70c:
.. _cid-xf::fintech::mcdigitalengine:

MCDigitalEngine
---------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN = 10
	    >
	void MCDigitalEngine (
	    DT underlying,
	    DT volatility,
	    DT dividendYield,
	    DT riskFreeRate,
	    DT timeLength,
	    DT strike,
	    DT cashPayoff,
	    bool optionType,
	    bool exEarly,
	    ap_uint <32>* seed,
	    DT* output,
	    DT requiredTolerance = 0.02,
	    unsigned int timeSteps = 100,
	    unsigned int requiredSamples = 1024,
	    unsigned int maxSamples = 134217727
	    )

Digital Option Pricing Engine using Monte Carlo Simulation. The B-S model is used to descirble dynamics of undelying asset price.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result, default double-precision data type.

    *
        - UN

        - number of Monte Carlo Module in parallel, which affects the latency and resources utilization, default 10.

    *
        - underlying

        - intial value of underlying asset at time 0.

    *
        - volatility

        - fixed volatility of underlying asset.

    *
        - dividendYield

        - the constant dividend rate for continuous dividends.

    *
        - riskFreeRate

        - risk-free interest rate.

    *
        - timeLength

        - the time length of constract from start to end.

    *
        - strike

        - the strike price also known as exericse price, which is settled in the contract.

    *
        - cashPayoff

        - fixed payoff when option is exercised.

    *
        - exEarly

        - exercise early or not, true: option exercise at anytime. false: option only exericse at expiry time.

    *
        - optionType

        - option type. 1: put option, 0: call option.

    *
        - seed

        - array to store the inital seeds for each RNG.

    *
        - output

        - output array.

    *
        - requiredTolerance

        - the tolerance required. If requiredSamples is not set, when reaching the required tolearance, simulation will stop, default 0.02.

    *
        - requiredSamples

        - the samples number required. When reaching the required number, simulation will stop, default 1024.

    *
        - timeSteps

        - the number of discrete steps from 0 to T, T is the expiry time, default 100.

    *
        - maxSamples

        - the maximum sample number. When reaching the it, the simulation will stop, default 2,147,483,648.

.. _doxid-namespacexf_1_1fintech_1ac918b8f101d6d8888908f95baf976a3a:
.. _cid-xf::fintech::mceuropeanhestongreeksengine:

MCEuropeanHestonGreeksEngine
----------------------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN = 1,
	    DiscreType discretization = kDTQuadraticExponential
	    >
	void MCEuropeanHestonGreeksEngine (
	    DT underlying,
	    DT riskFreeRate,
	    DT sigma,
	    DT v0,
	    DT theta,
	    DT kappa,
	    DT rho,
	    DT dividendYield,
	    bool optionType,
	    DT strike,
	    DT timeLength,
	    ap_uint <32> seed [UN][2],
	    DT* greeks,
	    DT requiredTolerance = 0.02,
	    unsigned int requiredSamples = 1024,
	    unsigned int timeSteps = 100,
	    unsigned int maxSamples = 134217727
	    )

European Option Greeks Calculating Engine using Monte Carlo Method based on Heston valuation model.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float, which decides the precision of output, default double-precision data type.

    *
        - UN

        - number of Monte Carlo Module in parallel, which affects the latency and resources utilization, default 10.

    *
        - DiscreType

        - methods which is used to discrete the stochastic process. Currently, five discrete types, including kDTPartialTruncation, kDTFullTruncation, kDTReflection, kDTQuadraticExponential and kDTQuadraticExponentialMartingale, are supported, default kDTQuadraticExponential.

    *
        - underlying

        - the initial price of underlying asset at time 0.

    *
        - riskFreeRate

        - risk-free interest rate.

    *
        - sigma

        - the volatility of volatility

    *
        - v0

        - initial volatility of stock

    *
        - theta

        - the long variance, as t tends to infinity, the expected value of vt tends to theta.

    *
        - kappa

        - the rate at which vt tends to theta.

    *
        - rho

        - the correlation coefficient between price and variance.

    *
        - dividendYield

        - the constant dividend rate for continuous dividends.

    *
        - optionType

        - option type. 1: put option, 0: call option.

    *
        - strike

        - the strike price also known as exericse price, which is settled in the contract.

    *
        - timeLength

        - time length from now to expiry date.

    *
        - seed

        - the seeds used to initialize RNG.

    *
        - greeks

        - output calculated greeks.

    *
        - requiredTolerance

        - the tolerance required. If requiredSamples is not set, when reaching the required tolearance, simulation will stop.

    *
        - requiredSamples

        - the samples number required. When reaching the required number, simulation will stop, default 1024.

    *
        - timeSteps

        - the number of discrete steps from 0 to T, T is the expiry time, default 100.

    *
        - maxSamples

        - the maximum sample number. When reaching it, the simulation will stop, default 2,147,483,648.

.. _doxid-namespacexf_1_1fintech_1a90689670264b98f32f2fd1908bd3793e:
.. _cid-xf::fintech::mchullwhitecapfloorengine:

MCHullWhiteCapFloorEngine
-------------------------


Defined in <xf_fintech/mc_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT = double,
	    int UN = 1
	    >
	void MCHullWhiteCapFloorEngine (
	    DT nomial,
	    DT initRate,
	    DT strike,
	    bool isCap,
	    DT singlePeriod,
	    DT alpha,
	    DT sigma,
	    ap_uint <32>* seed,
	    DT* output,
	    DT requiredTolerance = 0.02,
	    unsigned int requiredSamples = 0,
	    unsigned int timeSteps = 2,
	    unsigned int maxSamples = 134217727
	    )

Cap/Floor Pricing Engine using Monte Carlo Simulation. The Hull-White model is used to descirble dynamics of short-term interest. This engine assume a flat term structure.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result, default double-precision data type.

    *
        - UN

        - number of Monte Carlo Module in parallel, which affects the latency and resources utilization, default 10.

    *
        - nomial

        - Nomial of capfloor contract.

    *
        - initRate

        - Current spot rate and forward rate (flat term structure).

    *
        - strike

        - Strike rate of capfloor contract

    *
        - isCap

        - True for cap, false for floor

    *
        - singlePeriod

        - period between each settlement date.

    *
        - alpha

        - Hull White model paramter

    *
        - sigma

        - Hull White model parameter

    *
        - seed

        - Array to store the inital seed for each RNG.

    *
        - output

        - Array to store result

    *
        - requiredTolerance

        - the tolerance required. If requiredSamples is not set, when reaching the required tolearance, simulation will stop, default 0.02.

    *
        - requiredSamples

        - the samples number required. When reaching the required number, simulation will stop, default 1024.

    *
        - timeSteps

        - the number of cap/floor settlement date.

    *
        - maxSamples

        - the maximum sample number. When reaching the it, the simulation will stop, default 2,147,483,648.

.. _doxid-namespacexf_1_1fintech_1a855a9d5a760f861d9f4824b72012a62a:
.. _cid-xf::fintech::mcmccore:

McmcCore
--------


Defined in <xf_fintech/pop_mcmc.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT,
	    unsigned int NCHAINS,
	    unsigned int NSAMPLES_MAX
	    >
	void McmcCore (
	    DT temp_inv [NCHAINS],
	    DT sigma [NCHAINS],
	    DT x [NSAMPLES_MAX],
	    unsigned int nSamples
	    )

Top level Kernel function. Consists of INIT_LOOP and main sample loop: SAMPLES_LOOP



Generates sample from target distribution function.

Uses multiple Markov Chains to allow drawing samples from multi mode target distribution functions.

Proposal is generated ussing Normal Distribution

.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - - Data type used in whole function (double by default)

    *
        - NCHAINS

        - - Number of chains

    *
        - NSAMPLES_MAX

        - - Maximum Number of chains for synthesis purpose

    *
        - temp_inv

        - - Array of Inverted temperatures of the chain that density is generate for (1/Temp)

    *
        - sigma

        - - Array of sigmas for Proposal generation for each chain

    *
        - nSamples

        - - Number of samples to generate

    *
        - x

        - - Sample output

.. _doxid-namespacexf_1_1fintech_1a64bc1fcfb6f69afa7690ce8679aa158f:
.. _cid-xf::fintech::treeswaptionengine:

treeSwaptionEngine
------------------


Defined in <xf_fintech/tree_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT,
	    typename Model,
	    typename Process,
	    int DIM,
	    int LEN,
	    int LEN2
	    >
	void treeSwaptionEngine (
	    Model& model,
	    Process& process,
	    int type,
	    DT fixedRate,
	    int timestep,
	    DT initTime [LEN],
	    int initSize,
	    int* exerciseCnt,
	    int* floatingCnt,
	    int* fixedCnt,
	    DT flatRate,
	    DT nominal,
	    DT x0,
	    DT spread,
	    DT* NPV
	    )

Tree Swaption Pricing Engine using Trinomial Tree based 1D Lattice method.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result.

    *
        - Model

        - short-rate model class

    *
        - Process

        - stochastic process class

    *
        - DIM

        - 1D or 2D short-rate model

    *
        - LEN

        - maximum length of timestep, which affects the latency and resources utilization.

    *
        - LEN

        - maximum length of node of tree, which affects the latency and resources utilization.

    *
        - model

        - short-rate model that has been initialized

    *
        - process

        - stochastic process that has been initialized

    *
        - type

        - 0: Payer, 1: Receiver

    *
        - fixedRate

        - fixed annual interest rate.

    *
        - timestep

        - estimate the number of discrete steps from 0 to T, T is the maturity time.

    *
        - initTime

        - the time including begin timepoint, end timepoint, exercise timepoints, floating coupon timepoints, and fixed coupon timepoints is arranged from small to large. The timepoints are relative values based on the reference date the unit is year.

    *
        - initSize

        - the length of array initTime.

    *
        - exerciseCnt

        - exercise timepoints count in initTime.

    *
        - floatingCnt

        - floating coupon timepoints count in initTime.

    *
        - fixedCnt

        - fixed coupon timepoints count in initTime.

    *
        - flatRate

        - floating benchmark annual interest rate

    *
        - nominal

        - nominal principal

    *
        - x0

        - initial underlying

    *
        - spread

        - spreads on interest rates

    *
        - NPV

        - is pricing result array of this engine

.. _doxid-namespacexf_1_1fintech_1aa86db403cceb4d5b2af093c06d97a085:
.. _cid-xf::fintech::treeswaptionengine-2:

Defined in <xf_fintech/tree_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT,
	    typename Model,
	    typename Process,
	    int DIM,
	    int LEN,
	    int LEN2
	    >
	void treeSwaptionEngine (
	    Model& model,
	    Process& process1,
	    Process& process2,
	    int type,
	    DT fixedRate,
	    int timestep,
	    DT initTime [LEN],
	    int initSize,
	    int* exerciseCnt,
	    int* floatingCnt,
	    int* fixedCnt,
	    DT flatRate,
	    DT nominal,
	    DT x0,
	    DT spread,
	    DT rho,
	    DT* NPV
	    )

Tree Swaption Pricing Engine using Trinomial Tree based 2D Lattice method.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result.

    *
        - Model

        - short-rate model class

    *
        - Process

        - stochastic process class

    *
        - DIM

        - 1D or 2D short-rate model

    *
        - LEN

        - maximum length of timestep, which affects the latency and resources utilization.

    *
        - LEN

        - maximum length of node of tree, which affects the latency and resources utilization.

    *
        - model

        - short-rate model that has been initialized

    *
        - process1

        - 1st dimensional stochastic process that has been initialized

    *
        - process2

        - 2nd dimensional stochastic process that has been initialized

    *
        - type

        - 0: Payer, 1: Receiver

    *
        - fixedRate

        - fixed annual interest rate.

    *
        - timestep

        - estimate the number of discrete steps from 0 to T, T is the expiry time.

    *
        - initTime

        - the time including begin timepoint, end timepoint, exercise timepoints, floating coupon timepoints, and fixed coupon timepoints is arranged from small to large. The timepoints are relative values based on the reference date the unit is year.

    *
        - initSize

        - the length of array initTime.

    *
        - exerciseCnt

        - exercise timepoints count in initTime.

    *
        - floatingCnt

        - floating coupon timepoints count in initTime.

    *
        - fixedCnt

        - fixed coupon timepoints count in initTime.

    *
        - flatRate

        - floating benchmark annual interest rate

    *
        - nominal

        - nominal principal

    *
        - x0

        - initial underlying

    *
        - spread

        - spreads on interest rates

    *
        - rho

        - the correlation coefficient between price and variance.

    *
        - NPV

        - is pricing result array of this engine

.. _doxid-namespacexf_1_1fintech_1ad1cd85cdfb855ad4c48b76924b9f684b:
.. _cid-xf::fintech::treeswapengine:

treeSwapEngine
--------------


Defined in <xf_fintech/tree_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT,
	    typename Model,
	    typename Process,
	    int DIM,
	    int LEN,
	    int LEN2
	    >
	void treeSwapEngine (
	    Model& model,
	    Process& process,
	    int type,
	    DT fixedRate,
	    int timestep,
	    DT initTime [LEN],
	    int initSize,
	    int* floatingCnt,
	    int* fixedCnt,
	    DT flatRate,
	    DT nominal,
	    DT x0,
	    DT spread,
	    DT* NPV
	    )

Tree Swap Pricing Engine using Trinomial Tree based 1D Lattice method.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result.

    *
        - Model

        - short-rate model

    *
        - Process

        - stochastic process

    *
        - DIM

        - 1D or 2D short-rate model

    *
        - LEN

        - maximum length of timestep, which affects the latency and resources utilization.

    *
        - LEN

        - maximum length of node of tree, which affects the latency and resources utilization.

    *
        - model

        - short-rate model that has been initialized

    *
        - process

        - stochastic process that has been initialized

    *
        - type

        - 0: Payer, 1: Receiver

    *
        - fixedRate

        - fixed annual interest rate.

    *
        - timestep

        - estimate the number of discrete steps from 0 to T, T is the expiry time.

    *
        - initTime

        - the time including begin timepoint, end timepoint, exercise timepoints, floating coupon timepoints, and fixed coupon timepoints is arranged from small to large. The timepoints are relative values based on the reference date the unit is year.

    *
        - initSize

        - the length of array initTime.

    *
        - floatingCnt

        - floating coupon timepoints count in initTime.

    *
        - fixedCnt

        - fixed coupon timepoints count in initTime.

    *
        - flatRate

        - floating benchmark annual interest rate

    *
        - nominal

        - nominal principal

    *
        - x0

        - initial underlying

    *
        - spread

        - spreads on interest rates

    *
        - NPV

        - is pricing result array of this engine

.. _doxid-namespacexf_1_1fintech_1affdd59bcf42efe55fe8aa7d64bdcc0b1:
.. _cid-xf::fintech::treeswapengine-2:

Defined in <xf_fintech/tree_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT,
	    typename Model,
	    typename Process,
	    int DIM,
	    int LEN,
	    int LEN2
	    >
	void treeSwapEngine (
	    Model& model,
	    Process& process1,
	    Process& process2,
	    int type,
	    DT fixedRate,
	    int timestep,
	    DT initTime [LEN],
	    int initSize,
	    int* floatingCnt,
	    int* fixedCnt,
	    DT flatRate,
	    DT nominal,
	    DT x0,
	    DT spread,
	    DT rho,
	    DT* NPV
	    )

Tree Swap Pricing Engine using Trinomial Tree based 2D Lattice method.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result.

    *
        - Model

        - short-rate model

    *
        - Process

        - stochastic process

    *
        - DIM

        - 1D or 2D short-rate model

    *
        - LEN

        - maximum length of timestep, which affects the latency and resources utilization.

    *
        - LEN

        - maximum length of node of tree, which affects the latency and resources utilization.

    *
        - model

        - short-rate model that has been initialized

    *
        - process1

        - 1st dimensional stochastic process that has been initialized

    *
        - process2

        - 2nd dimensional stochastic process that has been initialized

    *
        - type

        - 0: Payer, 1: Receiver

    *
        - fixedRate

        - fixed annual interest rate.

    *
        - timestep

        - estimate the number of discrete steps from 0 to T, T is the expiry time.

    *
        - initTime

        - the time including begin timepoint, end timepoint, exercise timepoints, floating coupon timepoints, and fixed coupon timepoints is arranged from small to large. The timepoints are relative values based on the reference date the unit is year.

    *
        - initSize

        - the length of array initTime.

    *
        - floatingCnt

        - floating coupon timepoints count in initTime.

    *
        - fixedCnt

        - fixed coupon timepoints count in initTime.

    *
        - flatRate

        - floating benchmark annual interest rate

    *
        - nominal

        - nominal principal

    *
        - x0

        - initial underlying

    *
        - spread

        - spreads on interest rates

    *
        - rho

        - the correlation coefficient between price and variance.

    *
        - NPV

        - is pricing result array of this engine

.. _doxid-namespacexf_1_1fintech_1a9f7d1c8e54da28a8fe23cce95c0e632c:
.. _cid-xf::fintech::treecapfloprengine:

treeCapFloprEngine
------------------


Defined in <xf_fintech/tree_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT,
	    typename Model,
	    typename Process,
	    int DIM,
	    int LEN,
	    int LEN2
	    >
	void treeCapFloprEngine (
	    Model& model,
	    Process& process,
	    int type,
	    DT fixedRate,
	    int timestep,
	    DT initTime [LEN],
	    int initSize,
	    int* floatingCnt,
	    DT flatRate,
	    DT nominal,
	    DT* cfRate,
	    DT x0,
	    DT spread,
	    DT* NPV
	    )

Tree CapFloor Pricing Engine using Trinomial Tree based 1D Lattice method.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result.

    *
        - Model

        - short-rate model that has been initialized

    *
        - Process

        - stochastic process that has been initialized

    *
        - DIM

        - 1D or 2D short-rate model

    *
        - LEN

        - maximum length of timestep, which affects the latency and resources utilization.

    *
        - LEN

        - maximum length of node of tree, which affects the latency and resources utilization.

    *
        - model

        - short-rate model

    *
        - process

        - stochastic process

    *
        - type

        - 0: Cap, 1: Collar, 2: Floor

    *
        - fixedRate

        - fixed annual interest rate.

    *
        - timestep

        - estimate the number of discrete steps from 0 to T, T is the expiry time.

    *
        - initTime

        - the time including begin timepoint, end timepoint, exercise timepoints, floating coupon timepoints, and fixed coupon timepoints is arranged from small to large. The timepoints are relative values based on the reference date the unit is year.

    *
        - initSize

        - the length of array initTime.

    *
        - floatingCnt

        - floating coupon timepoints count in initTime.

    *
        - flatRate

        - floating benchmark annual interest rate

    *
        - nominal

        - nominal principal

    *
        - cfRate

        - cap rate ans floor rate

    *
        - x0

        - initial underlying

    *
        - spread

        - spreads on interest rates

    *
        - NPV

        - is pricing result array of this engine

.. _doxid-namespacexf_1_1fintech_1a49bbd1aba06b3b10b56b70abb7fcf629:
.. _cid-xf::fintech::treecapfloprengine-2:

Defined in <xf_fintech/tree_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT,
	    typename Model,
	    typename Process,
	    int DIM,
	    int LEN,
	    int LEN2
	    >
	void treeCapFloprEngine (
	    Model& model,
	    Process& process1,
	    Process& process2,
	    int type,
	    DT fixedRate,
	    int timestep,
	    DT initTime [LEN],
	    int initSize,
	    int* floatingCnt,
	    DT flatRate,
	    DT nominal,
	    DT* cfRate,
	    DT x0,
	    DT spread,
	    DT rho,
	    DT* NPV
	    )

Tree CapFloor Pricing Engine using Trinomial Tree based 2D Lattice method.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result.

    *
        - Model

        - short-rate model

    *
        - Process

        - stochastic process

    *
        - DIM

        - 1D or 2D short-rate model

    *
        - LEN

        - maximum length of timestep, which affects the latency and resources utilization.

    *
        - LEN

        - maximum length of node of tree, which affects the latency and resources utilization.

    *
        - model

        - short-rate model that has been initialized

    *
        - process1

        - 1st dimensional stochastic process that has been initialized

    *
        - process2

        - 2nd dimensional stochastic process that has been initialized

    *
        - type

        - 0: Cap, 1: Collar, 2: Floor

    *
        - fixedRate

        - fixed annual interest rate.

    *
        - timestep

        - estimate the number of discrete steps from 0 to T, T is the expiry time.

    *
        - initTime

        - the time including begin timepoint, end timepoint, exercise timepoints, floating coupon timepoints, and fixed coupon timepoints is arranged from small to large. The timepoints are relative values based on the reference date the unit is year.

    *
        - initSize

        - the length of array initTime.

    *
        - floatingCnt

        - floating coupon timepoints count in initTime.

    *
        - flatRate

        - floating benchmark annual interest rate

    *
        - nominal

        - nominal principal

    *
        - cfRate

        - cap rate ans floor rate

    *
        - x0

        - initial underlying

    *
        - spread

        - spreads on interest rates

    *
        - rho

        - the correlation coefficient between price and variance.

    *
        - NPV

        - is pricing result array of this engine

.. _doxid-namespacexf_1_1fintech_1ab4a2f908b41eace19de90c3f680df326:
.. _cid-xf::fintech::treecallableengine:

treeCallableEngine
------------------


Defined in <xf_fintech/tree_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT,
	    typename Model,
	    typename Process,
	    int DIM,
	    int LEN,
	    int LEN2
	    >
	void treeCallableEngine (
	    Model& model,
	    Process& process,
	    int type,
	    DT fixedRate,
	    int timestep,
	    DT initTime [LEN],
	    int initSize,
	    int* callableCnt,
	    int* paymentCnt,
	    DT flatRate,
	    DT nominal,
	    DT x0,
	    DT spread,
	    DT* NPV
	    )

Tree Callable Fixed Rate Bond Pricing Engine using Trinomial Tree based 1D Lattice method.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result.

    *
        - Model

        - short-rate model

    *
        - Process

        - stochastic process

    *
        - DIM

        - 1D or 2D short-rate model

    *
        - LEN

        - maximum length of timestep, which affects the latency and resources utilization.

    *
        - LEN

        - maximum length of node of tree, which affects the latency and resources utilization.

    *
        - model

        - short-rate model that has been initialized

    *
        - process

        - stochastic process that has been initialized

    *
        - type

        - type of the callability, 0: Call, 1: Put

    *
        - fixedRate

        - fixed annual interest rate.

    *
        - timestep

        - estimate the number of discrete steps from 0 to T, T is the expiry time.

    *
        - initTime

        - the time including begin timepoint, end timepoint, exercise timepoints, floating coupon timepoints, and fixed coupon timepoints is arranged from small to large. The timepoints are relative values based on the reference date the unit is year.

    *
        - initSize

        - the length of array initTime.

    *
        - callableCnt

        - callable timepoints count in initTime.

    *
        - paymentCnt

        - payment timepoints count in initTime.

    *
        - flatRate

        - floating benchmark annual interest rate

    *
        - nominal

        - nominal principal

    *
        - x0

        - initial underlying

    *
        - spread

        - spreads on interest rates

    *
        - NPV

        - is pricing result array of this engine

.. _doxid-namespacexf_1_1fintech_1a26f261498fe3ce3dd46bc90e151d0580:
.. _cid-xf::fintech::treecallableengine-2:

Defined in <xf_fintech/tree_engine.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    typename DT,
	    typename Model,
	    typename Process,
	    int DIM,
	    int LEN,
	    int LEN2
	    >
	void treeCallableEngine (
	    Model& model,
	    Process& process1,
	    Process& process2,
	    int type,
	    DT fixedRate,
	    int timestep,
	    DT initTime [LEN],
	    int initSize,
	    int* callableCnt,
	    int* paymentCnt,
	    DT flatRate,
	    DT nominal,
	    DT x0,
	    DT spread,
	    DT rho,
	    DT* NPV
	    )

Tree Callable Fixed Rate Bond Pricing Engine using Trinomial Tree based 2D Lattice method.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DT

        - supported data type including double and float data type, which decides the precision of result.

    *
        - Model

        - short-rate model

    *
        - Process

        - stochastic process

    *
        - DIM

        - 1D or 2D short-rate model

    *
        - LEN

        - maximum length of timestep, which affects the latency and resources utilization.

    *
        - LEN

        - maximum length of node of tree, which affects the latency and resources utilization.

    *
        - model

        - short-rate model that has been initialized

    *
        - process1

        - 1st dimensional stochastic process that has been initialized

    *
        - process2

        - 2nd dimensional stochastic process that has been initialized

    *
        - type

        - type of the callability, 0: Call, 1: Put

    *
        - fixedRate

        - fixed annual interest rate.

    *
        - timestep

        - estimate the number of discrete steps from 0 to T, T is the expiry time.

    *
        - initTime

        - the time including begin timepoint, end timepoint, exercise timepoints, floating coupon timepoints, and fixed coupon timepoints is arranged from small to large. The timepoints are relative values based on the reference date the unit is year.

    *
        - initSize

        - the length of array initTime.

    *
        - callableCnt

        - callable timepoints count in initTime.

    *
        - paymentCnt

        - payment timepoints count in initTime.

    *
        - flatRate

        - floating benchmark annual interest rate

    *
        - nominal

        - nominal principal

    *
        - x0

        - initial underlying

    *
        - spread

        - spreads on interest rates

    *
        - rho

        - the correlation coefficient between price and variance.

    *
        - NPV

        - is pricing result array of this engine

