.. index:: pair: class; xf::fintech::StreamWrapper
.. _doxid-classxf_1_1fintech_1_1_stream_wrapper:
.. _cid-xf::fintech::streamwrapper:

template class xf::fintech::StreamWrapper
=========================================

.. toctree::
	:hidden:

.. code-block:: cpp
	:class: overview-code-block

	#include <fd_solver.hpp>


Overview
~~~~~~~~

Utility class to encapsulate the multiplier elements. :ref:`More...<details-doxid-classxf_1_1fintech_1_1_stream_wrapper>`

.. _doxid-classxf_1_1fintech_1_1_stream_wrapper_1aed93cda0d8c3519220a0b38be3492683:
.. _cid-xf::fintech::streamwrapper::widedatatype:
.. _doxid-classxf_1_1fintech_1_1_stream_wrapper_1a214ddf4a32298ef14bb10af044e6ccf0:
.. _cid-xf::fintech::streamwrapper::widestreamtype:
.. ref-code-block:: cpp
	:class: overview-code-block

	template <
	    typename DT,
	    unsigned int MEM_WIDTH,
	    unsigned int INDEX_WIDTH,
	    unsigned int A_SIZE,
	    unsigned int M_SIZE,
	    unsigned int LOG2_M_SIZE,
	    unsigned int DIM2_SIZE1 = 3,
	    unsigned int DIM2_SIZE2 = 5
	    >
	class StreamWrapper

	// typedefs

	typedef xf::linear_algebra::blas::WideType <DT, MEM_WIDTH> WideDataType
	typedef hls::stream <:ref:`WideDataType<doxid-classxf_1_1fintech_1_1_stream_wrapper_1aed93cda0d8c3519220a0b38be3492683>`> WideStreamType


.. FunctionSection

Methods
~~~~~~~

.. _doxid-classxf_1_1fintech_1_1_stream_wrapper_1acb44caedd6f31f3f50a285bea260b5f3:
.. _cid-xf::fintech::streamwrapper::streamdimv3:

streamDimv3
-----------


Defined in <xf_fintech/fd_solver.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	void streamDimv3 (
	    DT A1 [M_SIZE][DIM2_SIZE1],
	    DT u [M_SIZE],
	    DT rhs1_tmp0 [M_SIZE],
	    :ref:`WideStreamType<doxid-classxf_1_1fintech_1_1_stream_wrapper_1a214ddf4a32298ef14bb10af044e6ccf0>`& u_out
	    )

Computes multiplication of tridiagonal matrix by a vector.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - A1

        - M x 3 array holding lower/main/upper diagonals of A1 tridiagonal matrix

    *
        - u

        - Vector to be multiplied

    *
        - rhs1_tmp0

        - Multiplication result

    *
        - u_out

        - Stream form of U to pass to pentadiagonal multiplier

.. _doxid-classxf_1_1fintech_1_1_stream_wrapper_1a9b41ff9591a4261836bb8d23236d0cc4:
.. _cid-xf::fintech::streamwrapper::streamdimv5:

streamDimv5
-----------


Defined in <xf_fintech/fd_solver.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	void streamDimv5 (
	    DT A2 [M_SIZE][DIM2_SIZE2],
	    :ref:`WideStreamType<doxid-classxf_1_1fintech_1_1_stream_wrapper_1a214ddf4a32298ef14bb10af044e6ccf0>`& u_in,
	    unsigned int m1,
	    unsigned int m2,
	    DT rhs2_tmp0 [M_SIZE],
	    :ref:`WideStreamType<doxid-classxf_1_1fintech_1_1_stream_wrapper_1a214ddf4a32298ef14bb10af044e6ccf0>`& u_out
	    )

Computes multiplication of pentadiagonal matrix by a vector.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - A2

        - M x 5 array holding lower/main/upper diagonals of A2 tridiagonal matrix

    *
        - u_in

        - Vector to be multiplied [stream format]

    *
        - m1

        - Size of array [0..m1-1] in S direction

    *
        - m2

        - Size of array [0..m2-1] in V direction

    *
        - rhs2_tmp0

        - Multiplication result

    *
        - u_out

        - Vector output [stream format]

.. _doxid-classxf_1_1fintech_1_1_stream_wrapper_1a8315fc0e659394c64a5bc651b956f35f:
.. _cid-xf::fintech::streamwrapper::streamsparsemultadd:

streamSparseMultAdd
-------------------


Defined in <xf_fintech/fd_solver.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	void streamSparseMultAdd (
	    DT A [A_SIZE],
	    unsigned int Ar [A_SIZE],
	    unsigned int Ac [A_SIZE],
	    :ref:`WideStreamType<doxid-classxf_1_1fintech_1_1_stream_wrapper_1a214ddf4a32298ef14bb10af044e6ccf0>`& u_in,
	    DT b [M_SIZE],
	    unsigned int Annz,
	    unsigned int M,
	    DT y0 [M_SIZE]
	    )

Computes multiplication of sparse matrix by vector plus a constant.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - A

        - Sparse matrix value

    *
        - Ar

        - Sparse matrix row

    *
        - Ac

        - Sparse matrix column

    *
        - u_in

        - Vector to be multiplied [stream format]

    *
        - b

        - Vector to be added after sparse-mult stage

    *
        - Annz

        - Number of non-zeros in sparse matrix (how many elements of A/Ar/Ac are valid)

    *
        - M

        - Matrix M-size === (m1+1) x (m2+1)

    *
        - y0

        - Result of mult-add in flattened S-inner form

.. _doxid-classxf_1_1fintech_1_1_stream_wrapper_1a38eb05ba334162f6d293e2d260b89423:
.. _cid-xf::fintech::streamwrapper::parallelblocks:

parallelBlocks
--------------


Defined in <xf_fintech/fd_solver.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	void parallelBlocks (
	    DT A [A_SIZE],
	    unsigned int Ar [A_SIZE],
	    unsigned int Ac [A_SIZE],
	    DT u [M_SIZE],
	    DT b [M_SIZE],
	    unsigned int Annz,
	    unsigned int M,
	    DT A1 [M_SIZE][DIM2_SIZE1],
	    DT A2 [M_SIZE][DIM2_SIZE2],
	    unsigned int m1,
	    unsigned int m2,
	    DT y0 [M_SIZE],
	    DT rhs1_tmp0 [M_SIZE],
	    DT rhs2_tmp0 [M_SIZE]
	    )

Wrapper function to combine multipliers into a dataflow region and allow parallelization.

