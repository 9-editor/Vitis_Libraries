.. index:: pair: namespace; internal
.. _doxid-namespacexf_1_1security_1_1internal:
.. _cid-xf::security::internal:

namespace internal
==================

.. toctree::
	:hidden:



.. _doxid-namespacexf_1_1security_1_1internal_1aa207faaaefd24fcf1dbeb8027b040ea1:
.. _cid-xf::security::internal::permmap:
.. _doxid-namespacexf_1_1security_1_1internal_1a9b3e7abd47c20704dfe70e06a0219e4a:
.. _cid-xf::security::internal::ipermmap:
.. _doxid-namespacexf_1_1security_1_1internal_1a22d6c13d06629aa99cf78c3dfe802084:
.. _cid-xf::security::internal::extmap:
.. _doxid-namespacexf_1_1security_1_1internal_1a4a70a89514e3b4b1071e47643926b4bc:
.. _cid-xf::security::internal::sp:
.. _doxid-namespacexf_1_1security_1_1internal_1a480b0b2a8ca5c5dca9d7908c22b24c9f:
.. _cid-xf::security::internal::fpermmap:
.. _doxid-namespacexf_1_1security_1_1internal_1aafee4f536f80ea933ef27c2cf228d4d5:
.. _cid-xf::security::internal::pcmapc:
.. _doxid-namespacexf_1_1security_1_1internal_1a7f5887a3851ff642c737a07a0c7c8b3b:
.. _cid-xf::security::internal::pcmapd:
.. _doxid-namespacexf_1_1security_1_1internal_1a618f8ee526aaf779856dd72b19c4cea5:
.. _cid-xf::security::internal::pc2map:
.. _doxid-namespacexf_1_1security_1_1internal_1ae6d8c7068b7a9e91f171e850030261e3:
.. _cid-xf::security::internal::subkeyindex:
.. _doxid-namespacexf_1_1security_1_1internal_1ae7f958e343b6b4569a54b40f64b2ec73:
.. _cid-xf::security::internal::print:
.. _doxid-namespacexf_1_1security_1_1internal_1a59bd10fdfc50eec51e07152e9e45342e:
.. _cid-xf::security::internal::print-2:
.. _doxid-namespacexf_1_1security_1_1internal_1a3fc08762026284b9b07c50ae29a97814:
.. _cid-xf::security::internal::printarray:
.. _doxid-namespacexf_1_1security_1_1internal_1ab7fdb87f4700c36ad9c2d9a4968f912a:
.. _cid-xf::security::internal::convertendian:
.. _doxid-namespacexf_1_1security_1_1internal_1aa47565a8ef7fa4208200cc4a3812374b:
.. _cid-xf::security::internal::convert:
.. _doxid-namespacexf_1_1security_1_1internal_1ace786c0c4252b6c2302970961c48c0bf:
.. _cid-xf::security::internal::initsubkeycd:
.. _doxid-namespacexf_1_1security_1_1internal_1a3e89234f159cd663ae70aebfbe268fe9:
.. _cid-xf::security::internal::initsubkeyindex:
.. _doxid-namespacexf_1_1security_1_1internal_1a7e12c265157d35763e78e5ebbea23358:
.. _cid-xf::security::internal::leftrotateshiftarray:
.. _doxid-namespacexf_1_1security_1_1internal_1a034fdee07e4ff7ab18910949529df9da:
.. _cid-xf::security::internal::getsubkeyindex:
.. _doxid-namespacexf_1_1security_1_1internal_1a3b15fc24cd072345beefcfb52e015fc8:
.. _cid-xf::security::internal::leftrotateshift:
.. _doxid-namespacexf_1_1security_1_1internal_1a2c6a8ee5a0b2eded1c34f373451e2cf7:
.. _cid-xf::security::internal::getsubkey:
.. _doxid-namespacexf_1_1security_1_1internal_1a7990d98e33815b92702af7564de082d2:
.. _cid-xf::security::internal::extend:
.. _doxid-namespacexf_1_1security_1_1internal_1abd21d4a2f60410fb011255f136ff520b:
.. _cid-xf::security::internal::substitute:
.. _doxid-namespacexf_1_1security_1_1internal_1a302825b34cf28fedf9c15113370bbf52:
.. _cid-xf::security::internal::perm:
.. _doxid-namespacexf_1_1security_1_1internal_1a2c79ef2e09d2ce329aa13765737f66f0:
.. _cid-xf::security::internal::f:
.. _doxid-namespacexf_1_1security_1_1internal_1a342bfffc8e0d9e411bdd54e1d79f20fd:
.. _cid-xf::security::internal::initperm:
.. _doxid-namespacexf_1_1security_1_1internal_1a8e2b5924706b3291abae76e115258f1f:
.. _cid-xf::security::internal::finalperm:
.. _doxid-namespacexf_1_1security_1_1internal_1af9b4876f159ad444b1099ce425916480:
.. _cid-xf::security::internal::process:
.. _doxid-namespacexf_1_1security_1_1internal_1af9c374a862fcddd2fa2e8ed0359ff8e1:
.. _cid-xf::security::internal::keyindexschedule:
.. _doxid-namespacexf_1_1security_1_1internal_1a7f3b947579038787d0b257368f7305c6:
.. _cid-xf::security::internal::keyscheduleoriginal:
.. ref-code-block:: cpp
	:class: overview-code-block

	// global variables

	const ap_uint <8> PermMap[64]
	const ap_uint <8> IPermMap[64]
	const ap_uint <8> ExtMap[48]
	const ap_uint <4> SP[8][64]
	const ap_int <8> FPermMap[32]
	const ap_uint <8> PCMapC[28]
	const ap_uint <8> PCMapD[28]
	const ap_uint <8> PC2Map[48]
	const ap_uint <8> subkeyIndex[16][48]


.. FunctionSection




.. _doxid-namespacexf_1_1security_1_1internal_1abafad92b08745206ea244df38e0dd1bf:
.. _cid-xf::security::internal::keyschedule:

keySchedule
-----------


.. code-block:: cpp
	
	#include "xf_security/des.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void keySchedule (
	    ap_uint <64> key,
	    ap_uint <48> subkeys [16]
	    )

keySchedule is to schedule subkeys used in DES and 3DES



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - key

        - input original key, 64 bits.

    *
        - subkeys

        - output subkeys in encryption or decryption.

.. _doxid-namespacexf_1_1security_1_1internal_1ac332c8f6229cdad9ca96422ce3a6b625:
.. _cid-xf::security::internal::aesgctrencrypt:

aesGctrEncrypt
--------------


.. code-block:: cpp
	
	#include "xf_security/gcm.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <unsigned int _keyWidth = 256>
	void aesGctrEncrypt (
	    hls::stream <ap_uint <128>>& plaintext,
	    hls::stream <ap_uint <64>>& plaintext_length,
	    hls::stream <bool>& end_text_length,
	    hls::stream <ap_uint <_keyWidth>>& cipherkey,
	    hls::stream <ap_uint <96>>& IV_strm,
	    hls::stream <ap_uint <128>>& H_strm,
	    hls::stream <ap_uint <128>>& E_K_Y0_strm,
	    hls::stream <bool>& end_length,
	    hls::stream <ap_uint <128>>& ciphertext,
	    hls::stream <ap_uint <64>>& ciphertext_length,
	    hls::stream <ap_uint <128>>& ciphertext1,
	    hls::stream <ap_uint <64>>& ciphertext_length1
	    )

aesGctrEncrypt Encrypt plaintext to cihpertext.

The algorithm reference is: "IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices" The implementation is modified for better performance.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - plaintext

        - The plaintext stream.

    *
        - plaintext_length

        - Length of plaintext in bits.

    *
        - end_text_length

        - Flag to signal the end of the text length stream.

    *
        - cipherkey

        - The cipherkey, x-bit for AES-x.

    *
        - IV_Strm

        - Initialization vector.

    *
        - H_strm

        - The hash subkey passed onto genGMAC.

    *
        - E_K_Y0_strm

        - E(K,Y0) as specified in standard passed onto genGMAC.

    *
        - end_length

        - End flag passed onto genGMAC.

    *
        - ciphertext

        - The ciphertext stream to output port.

    *
        - ciphertext_length

        - Length of ciphertext in bits to output port.

    *
        - ciphertext1

        - The ciphertext stream to genGMAC.

    *
        - ciphertext_length1

        - Length of ciphertext in bits to genGMAC.

.. _doxid-namespacexf_1_1security_1_1internal_1a8614e1d68016f9ef957c22726ebd6ffc:
.. _cid-xf::security::internal::aesgctrdecrypt:

aesGctrDecrypt
--------------


.. code-block:: cpp
	
	#include "xf_security/gcm.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <unsigned int _keyWidth = 256>
	void aesGctrDecrypt (
	    hls::stream <ap_uint <128>>& ciphertext,
	    hls::stream <ap_uint <64>>& ciphertext_length,
	    hls::stream <bool>& end_text_length,
	    hls::stream <ap_uint <_keyWidth>>& cipherkey,
	    hls::stream <ap_uint <96>>& IV_strm,
	    hls::stream <ap_uint <128>>& H_strm,
	    hls::stream <ap_uint <128>>& E_K_Y0_strm,
	    hls::stream <bool>& end_length,
	    hls::stream <ap_uint <128>>& ciphertext_out,
	    hls::stream <ap_uint <64>>& ciphertext_length_out,
	    hls::stream <ap_uint <128>>& plaintext,
	    hls::stream <ap_uint <64>>& plaintext_length
	    )

aesGctrDecrypt Decrypt ciphertext to plainrtext.

The algorithm reference is: "IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices" The implementation is modified for better performance.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - ciphertext

        - The ciphertext stream.

    *
        - ciphertext_length

        - Length of ciphertext in bits.

    *
        - end_text_length

        - Flag to signal the end of the text length stream.

    *
        - cipherkey

        - The cipherkey, x-bit for AES-x.

    *
        - IV_Strm

        - Initialization vector.

    *
        - H_strm

        - The hash subkey passed onto genGMAC.

    *
        - E_K_Y0_strm

        - E(K,Y0) as specified in standard passed onto genGMAC.

    *
        - end_length

        - End flag passed onto genGMAC.

    *
        - ciphertext_out

        - The ciphertext stream passed onto genGMAC.

    *
        - ciphertext_length_out

        - Length of ciphertext in bits passed onto genGMAC.

    *
        - plaintext

        - The plaintext stream.

    *
        - plaintext_length

        - Length of plaintext in bits.

.. _doxid-namespacexf_1_1security_1_1internal_1a360ba500d52a7da39a61c0e0472077d3:
.. _cid-xf::security::internal::aesgcmencrypt:

aesGcmEncrypt
-------------


.. code-block:: cpp
	
	#include "xf_security/gcm.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <unsigned int _keyWidth = 256>
	void aesGcmEncrypt (
	    hls::stream <ap_uint <128>>& plaintext,
	    hls::stream <ap_uint <64>>& plaintext_length,
	    hls::stream <ap_uint <_keyWidth>>& cipherkey,
	    hls::stream <ap_uint <96>>& IV,
	    hls::stream <ap_uint <128>>& AAD,
	    hls::stream <ap_uint <64>>& AAD_length,
	    hls::stream <bool>& end_length,
	    hls::stream <ap_uint <128>>& ciphertext,
	    hls::stream <ap_uint <64>>& ciphertext_length,
	    hls::stream <ap_uint <128>>& tag,
	    hls::stream <bool>& end_tag
	    )

aesGcmEncrypt Top of GCM encryption mode with AES single block cipher.

The algorithm reference is : "IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices" The implementation is modified for better performance.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - _keyWidth

        - The bit-width of the cipher key, which is 128, 192, or 256.

    *
        - plaintext

        - Input block stream text to be encrypted, 128 bits.

    *
        - plaintext_length

        - Length of plaintext in bits.

    *
        - cipherkey

        - Input cipher key used in encryption, x bits for AES-x.

    *
        - IV

        - Initialization vector.

    *
        - AAD

        - Additional authenticated data for calculating the tag, 128 bits.

    *
        - AAD_length

        - Length of AAD in bits.

    *
        - end__length

        - Flag to signal the end of the text length stream.

    *
        - ciphertext

        - Output encrypted block stream text, 128 bits.

    *
        - ciphertext_length

        - Length of ciphertext in bits.

    *
        - tag

        - The MAC.

    *
        - end_tag

        - End flag for the MAC.

.. _doxid-namespacexf_1_1security_1_1internal_1ae1dc90fcde496c085eee3f48cd8a0bad:
.. _cid-xf::security::internal::aesgcmdecrypt:

aesGcmDecrypt
-------------


.. code-block:: cpp
	
	#include "xf_security/gcm.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <unsigned int _keyWidth = 256>
	void aesGcmDecrypt (
	    hls::stream <ap_uint <128>>& ciphertext,
	    hls::stream <ap_uint <64>>& ciphertext_length,
	    hls::stream <ap_uint <_keyWidth>>& cipherkey,
	    hls::stream <ap_uint <96>>& IV,
	    hls::stream <ap_uint <128>>& AAD,
	    hls::stream <ap_uint <64>>& AAD_length,
	    hls::stream <bool>& end_length,
	    hls::stream <ap_uint <128>>& plaintext,
	    hls::stream <ap_uint <64>>& plaintext_length,
	    hls::stream <ap_uint <128>>& tag,
	    hls::stream <bool>& end_tag
	    )

aesGcmDecrypt Top of GCM decryption mode with AES single block cipher.

The algorithm reference is : "IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices" The implementation is modified for better performance.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - ciphertext

        - Input block stream text to be decrypted, 128 bits.

    *
        - ciphertext_length

        - Length of ciphertext in bits.

    *
        - cipherkey

        - Input cipher key used in decryption, x bits for AES-x.

    *
        - IV

        - Initialization vector.

    *
        - AAD

        - Additional authenticated data for calculating the tag, 128 bits.

    *
        - AAD_length

        - Length of AAD in bits.

    *
        - end__length

        - Flag to signal the end of the text length stream.

    *
        - plaintext

        - Output decrypted block stream text, 128 bits.

    *
        - plaintext_length

        - Length of plaintext in bits.

    *
        - tag

        - The MAC.

    *
        - end_tag

        - End flag for the MAC.

.. _doxid-namespacexf_1_1security_1_1internal_1aeddf531d513bf8acd05e1c59257a2882:
.. _cid-xf::security::internal::gf128_mult:

GF128_mult
----------


.. code-block:: cpp
	
	#include "xf_security/gmac.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void GF128_mult (
	    ap_uint <128> X,
	    ap_uint <128> Y,
	    ap_uint <128>& Z
	    )

Calculate Z = X * Y in Galois Field(2^128)

The algorithm reference is: "IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices" The implementation is modified for better performance.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - X

        - The first operand.

    *
        - Y

        - The second operand.

    *
        - Z

        - The product.

.. _doxid-namespacexf_1_1security_1_1internal_1a0ea57ed3465e188f9ce065e260031b68:
.. _cid-xf::security::internal::pregmac:

preGMAC
-------


.. code-block:: cpp
	
	#include "xf_security/gmac.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <unsigned int _keyWidth>
	void preGMAC (
	    hls::stream <ap_uint <_keyWidth>>& cipherkeyStrm,
	    hls::stream <ap_uint <96>>& IVStrm,
	    hls::stream <ap_uint <128>>& HStrm,
	    hls::stream <ap_uint <128>>& EKY0Strm
	    )

preGMAC generates H and E_K_Y0 based on AES block cipher.

The algorithm reference is: "IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices" The implementation is modified for less resource utilizations while having a reasonable latency.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - _keyWidth

        - The bit-width of the cipherkey.

    *
        - cipherkeyStrm

        - Input cipherkey, x bits for AES-x.

    *
        - IVStrm

        - Initialization vector for the fisrt iteration of AES encrypition.

    *
        - HStrm

        - The hash key.

    *
        - EKY0Strm

        - E(K, Y0) as specified in the standard.

    *
        - lenPldStrm

        - Length of the payload stream (hard-code to zero).

.. _doxid-namespacexf_1_1security_1_1internal_1a36fc909d574969339566a69462ea4cac:
.. _cid-xf::security::internal::gengmac:

genGMAC
-------


genGMAC overload (1)
++++++++++++++++++++


.. code-block:: cpp
	
	#include "xf_security/gmac.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void genGMAC (
	    hls::stream <ap_uint <128>>& AADStrm,
	    hls::stream <ap_uint <64>>& lenAADStrm,
	    hls::stream <ap_uint <128>>& pldStrm,
	    hls::stream <ap_uint <64>>& lenPldStrm,
	    hls::stream <ap_uint <128>>& HStrm,
	    hls::stream <ap_uint <128>>& EKY0Strm,
	    hls::stream <bool>& endLenStrm,
	    hls::stream <ap_uint <128>>& tagStrm,
	    hls::stream <bool>& endTagStrm
	    )

genGMAC This function calculates the MAC using AAD and payload streams. This overload is used by GCM.

The algorithm reference is: "IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices" The implementation is modified for less resource utilizations while having a reasonable latency.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - AADStrm

        - Additional authenticated data stream.

    *
        - lenAADStrm

        - Length of AAD in bits.

    *
        - pldStrm

        - Payload stream.

    *
        - lenPldStrm

        - Length of the payload in bits.

    *
        - HStrm

        - The hash key.

    *
        - EKY0Strm

        - E(K, Y0) as specified in the standard.

    *
        - endLenStrm

        - Flag to signal the end of the length streams.

    *
        - tagStrm

        - The MAC.

    *
        - endTagStrm

        - Flag to signal the end of the MAC stream.

.. _doxid-namespacexf_1_1security_1_1internal_1ada6649b690216d60349499b16fd286e4:
.. _cid-xf::security::internal::gengmac-2:

genGMAC overload (2)
++++++++++++++++++++


.. code-block:: cpp
	
	#include "xf_security/gmac.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void genGMAC (
	    hls::stream <ap_uint <128>>& AADStrm,
	    hls::stream <ap_uint <64>>& lenAADStrm,
	    hls::stream <ap_uint <128>>& HStrm,
	    hls::stream <ap_uint <128>>& EKY0Strm,
	    hls::stream <ap_uint <128>>& tagStrm
	    )

genGMAC This function calculates the MAC using only AAD stream. This overload is used by GMAC.

The algorithm reference is: "IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices" The implementation is modified for less resource utilizations while having a reasonable latency.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - AADStrm

        - Additional authenticated data stream.

    *
        - lenAADStrm

        - Length of AAD in bits.

    *
        - HStrm

        - The hash key.

    *
        - EKY0Strm

        - E(K, Y0) as specified in the standard.

    *
        - tagStrm

        - The MAC.

.. _doxid-namespacexf_1_1security_1_1internal_1a864567a1b8ec770172461d8f55b5d708:
.. _cid-xf::security::internal::gmactop:

gmacTop
-------


.. code-block:: cpp
	
	#include "xf_security/gmac.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <unsigned int _keyWidth>
	void gmacTop (
	    hls::stream <ap_uint <128>>& dataStrm,
	    hls::stream <ap_uint <64>>& lenDataStrm,
	    hls::stream <ap_uint <_keyWidth>>& cipherkeyStrm,
	    hls::stream <ap_uint <96>>& IVStrm,
	    hls::stream <ap_uint <128>>& tagStrm
	    )

gmac The top of GMAC.

Galois Message Authentication Code (GMAC) is a mechanism to provide data origin authentication.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - _keyWidth

        - The bit-width of the cipherkey.

    *
        - dataStrm

        - Input text stream to be authenticated.

    *
        - lenDataStrm

        - The length of the data in bits.

    *
        - cipherkeyStrm

        - Input cihperkey to calculate the hash subkey and E(K,Y0).

    *
        - IVStrm

        - Initialization vector.

    *
        - tagStrm

        - The MAC stream.

.. _doxid-namespacexf_1_1security_1_1internal_1abc93ebaa0bb084eeb4b22ddbdb85d1df:
.. _cid-xf::security::internal::rc4imp:

rc4Imp
------


.. code-block:: cpp
	
	#include "xf_security/rc4.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void rc4Imp (
	    hls::stream <ap_uint <8>>& keyStrm,
	    hls::stream <bool>& eKeyStrm,
	    hls::stream <ap_uint <8>>& plainStream,
	    hls::stream <bool>& ePlainStream,
	    hls::stream <ap_uint <8>>& cipherStream,
	    hls::stream <bool>& eCipherStream
	    )

Rc_4 is the basic function for stream ciphering keyLength defined as the number of bytes in the key and can be in the range 1<= keylength <=256, typically between 5 and 16, corresponding to a key length of 40-128 bits.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - keyStrm

        - initail key

    *
        - eKeyStrm

        - end flag of keyStrm

    *
        - plaintStrm

        - input plain text to be encrypted

    *
        - ePlaintStrm

        - the end flag of plaintStrm

    *
        - cipherStrm

        - output encrypted text

    *
        - eCipherStrm

        - the end flag of cipherStrm

