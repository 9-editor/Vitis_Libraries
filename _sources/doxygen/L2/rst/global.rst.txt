.. _global-namespace:

Global Namespace
================

.. index:: pair: namespace; global

.. toctree::
	:hidden:

	enum_packcodedata.rst
	struct_code.rst



.. _doxid-huffman__kernel_8hpp_1a294ce21f5608a3ce72fab891321a3542:
.. _cid-uint512_t:
.. _doxid-huffman__kernel_8hpp_1a54b6be14e64e0a9dbaeb592ed55909c9:
.. _cid-uintoutv_t:
.. _doxid-huffman__kernel_8hpp_1ab805d07be734b0dfbb9070be4cbb458f:
.. _cid-encoded_dt:
.. _doxid-huffman__kernel_8hpp_1aa44f246e6506babd2430ee8e07e9b831:
.. _cid-encodedv_dt:
.. _doxid-lz4__decompress__stream__kernel_8hpp_1acb180f0fdfcc276ac9840c75f9107795:
.. _cid-uintvt:
.. _doxid-lz77__compress__kernel_8hpp_1a29eae7d97bfbcc6be5570632860dee8d:
.. _cid-uintmatchv_t:
.. _doxid-lz77__compress__kernel_8hpp_1acca9daef8bc4a2c4f8f1a36550042454:
.. _cid-uintdict_t:
.. _doxid-lz77__compress__kernel_8hpp_1a8680a1a42efc8f60e93e766931ae07ea:
.. _cid-uintdictv_t:
.. _doxid-lz77__compress__kernel_8hpp_1aa44ed4c1078f603b201ed6d696aeba8f:
.. _cid-uintout_t:
.. _doxid-lz77__compress__kernel_8hpp_1a904fa8302631220bbf18a8b8846fa271:
.. _cid-uintdoubleout_t:
.. _doxid-lz77__compress__kernel_8hpp_1a294ce21f5608a3ce72fab891321a3542:
.. _cid-uint512_t-2:
.. _doxid-lz77__compress__kernel_8hpp_1a488a8f4be3eaad5790117e9b3297c9b5:
.. _cid-compressd_dt:
.. _doxid-lz77__compress__kernel_8hpp_1a6ba973876d54bf6fb25fa0c00bc07a08:
.. _cid-compressdv_dt:
.. _doxid-lz77__compress__kernel_8hpp_1afdc9c6b5d98603a9b6cc50ee49bfc7de:
.. _cid-lz77_compressd_dt:
.. _doxid-zlib__decompress__kernel_8hpp_1a29eae7d97bfbcc6be5570632860dee8d:
.. _cid-uintmatchv_t-2:
.. _doxid-zlib__decompress__kernel_8hpp_1acca9daef8bc4a2c4f8f1a36550042454:
.. _cid-uintdict_t-2:
.. _doxid-zlib__decompress__kernel_8hpp_1a8680a1a42efc8f60e93e766931ae07ea:
.. _cid-uintdictv_t-2:
.. _doxid-zlib__decompress__kernel_8hpp_1aa44ed4c1078f603b201ed6d696aeba8f:
.. _cid-uintout_t-2:
.. _doxid-zlib__decompress__kernel_8hpp_1a904fa8302631220bbf18a8b8846fa271:
.. _cid-uintdoubleout_t-2:
.. _doxid-zlib__decompress__kernel_8hpp_1a294ce21f5608a3ce72fab891321a3542:
.. _cid-uint512_t-3:
.. _doxid-zlib__decompress__kernel_8hpp_1a488a8f4be3eaad5790117e9b3297c9b5:
.. _cid-compressd_dt-2:
.. _doxid-zlib__decompress__kernel_8hpp_1a6ba973876d54bf6fb25fa0c00bc07a08:
.. _cid-compressdv_dt-2:
.. _doxid-zlib__decompress__kernel_8hpp_1ab00c138e72733cd7dd25ea02bca2784d:
.. _cid-gzip_decompress_compressd_dt:
.. _doxid-gzip__tables_8h_1abb6ae328cade6261f3eb20713d5f0e9f:
.. _cid-length_code:
.. _doxid-gzip__tables_8h_1a1a7094161bcabeeded287fabe1074db8:
.. _cid-dist_code:
.. _doxid-gzip__tables_8h_1acb734e0235c80854ce92ee3dbcc0aaf5:
.. _cid-base_dist:
.. _doxid-gzip__tables_8h_1a533c4010941c7701cb6d664cc256c9ba:
.. _cid-base_length:
.. _doxid-huffman__fixed__table_8h_1a667c4fc94bcc4f4c83ca36544e44ca2f:
.. _cid-fixed_lenlit_table:
.. _doxid-huffman__fixed__table_8h_1a7875864b4e2d6248045fb44326faa3c8:
.. _cid-fixed_lenlit_bl:
.. _doxid-huffman__fixed__table_8h_1a39fc2755197b9179a4af6b4f2c19b326:
.. _cid-fixed_dist_table:
.. _doxid-huffman__fixed__table_8h_1a445275b799be96d6ed0497c5e9ee7e1b:
.. _cid-fixed_dist_bl:
.. _doxid-huffman__fixed__table_8h_1a396758d099d1dc5705e588cb45d63b00:
.. _cid-fixed_len_code:
.. _doxid-huffman__kernel_8hpp_1a4d66a6d94453a075969915398c49c388:
.. _cid-in:
.. _doxid-huffman__kernel_8hpp_1a49c0705b8b9b834edbb3c949ed1f548a:
.. _cid-out:
.. _doxid-huffman__kernel_8hpp_1abed4d283f1073de7e21fe3dbd967de8f:
.. _cid-in_block_size:
.. _doxid-huffman__kernel_8hpp_1a1868a4a3f3113ad9c3201f2294acb8ab:
.. _cid-compressd_size:
.. _doxid-huffman__kernel_8hpp_1aa881e96a89c236b000ad7c86401bd0e2:
.. _cid-dyn_litmtree_codes:
.. _doxid-huffman__kernel_8hpp_1a0687350d2dbc300acc41fca7395d0774:
.. _cid-dyn_distree_codes:
.. _doxid-huffman__kernel_8hpp_1ad7c20e726e69ee608fa3aa44b381689e:
.. _cid-dyn_bitlentree_codes:
.. _doxid-huffman__kernel_8hpp_1a247e0870d31850233c760409391cf694:
.. _cid-dyn_litmtree_blen:
.. _doxid-huffman__kernel_8hpp_1a8eb88344d2c0655eec9de7ff45c6ada1:
.. _cid-dyn_dtree_blen:
.. _doxid-huffman__kernel_8hpp_1aea376e739bf6cd066b46448588162f20:
.. _cid-dyn_bitlentree_blen:
.. _doxid-huffman__kernel_8hpp_1a1656b9e8ea6907df9293ac17fd69c691:
.. _cid-dyn_max_codes:
.. _doxid-huffman__kernel_8hpp_1a44eb6ef205332effe0f9080cb2941fa9:
.. _cid-block_size_in_kb:
.. _doxid-huffman__kernel_8hpp_1ae95d91a453faf55403a06da61c492813:
.. _cid-input_size:
.. _doxid-lz77__compress__kernel_8hpp_1a1d2f112774f521217624ddab362504cd:
.. _cid-in-2:
.. _doxid-lz77__compress__kernel_8hpp_1ac9806d4b4c5037a6340ea356aee64c73:
.. _cid-out-2:
.. _doxid-lz77__compress__kernel_8hpp_1a9674b3af4a9c28ca848af6e29f0a5d45:
.. _cid-compressd_size-2:
.. _doxid-lz77__compress__kernel_8hpp_1a23f23d5454fd78b0aa077373c5fae895:
.. _cid-in_block_size-2:
.. _doxid-lz77__compress__kernel_8hpp_1a744a69fbf137bc33bc1a1559cd074a42:
.. _cid-dyn_ltree_freq:
.. _doxid-lz77__compress__kernel_8hpp_1a5f2a73740b7fd3ac02a9d838997d096d:
.. _cid-dyn_dtree_freq:
.. _doxid-lz77__compress__kernel_8hpp_1a3136f74c3bb27ea2eb19d34d0cfe5d98:
.. _cid-block_size_in_kb-2:
.. _doxid-lz77__compress__kernel_8hpp_1aff874e812107094cee53231ebbaaaee0:
.. _cid-input_size-2:
.. _doxid-treegen__kernel_8hpp_1a4a8db7302822eb581a475b01c215f0b8:
.. _cid-dyn_ltree_freq-2:
.. _doxid-treegen__kernel_8hpp_1a1d3d3b941537f29c9a4b17b89730be58:
.. _cid-dyn_dtree_freq-2:
.. _doxid-treegen__kernel_8hpp_1a5f04e5a30b05ef071f6785811efd60a3:
.. _cid-dyn_bltree_freq:
.. _doxid-treegen__kernel_8hpp_1aae57eb95a569ac2855d1ee4fd15506f2:
.. _cid-dyn_ltree_codes:
.. _doxid-treegen__kernel_8hpp_1a3af304e63afcb76e97ad406101ec0896:
.. _cid-dyn_dtree_codes:
.. _doxid-treegen__kernel_8hpp_1aa4f3c9288e7819f9e8b266bf838a676b:
.. _cid-dyn_bltree_codes:
.. _doxid-treegen__kernel_8hpp_1ab266ba50d287d00916c87686c5518ef5:
.. _cid-dyn_ltree_blen:
.. _doxid-treegen__kernel_8hpp_1a051421a174203b260bf6b88aa73df72e:
.. _cid-dyn_dtree_blen-2:
.. _doxid-treegen__kernel_8hpp_1a48db95ab2e01cf0e267718aa3f1008e2:
.. _cid-dyn_bltree_blen:
.. _doxid-treegen__kernel_8hpp_1a9c97949dd48f5f84a84c04dc77a73f3d:
.. _cid-max_codes:
.. _doxid-treegen__kernel_8hpp_1ac010d2545685cfe4d38383096da7ee0b:
.. _cid-block_size_in_kb-3:
.. _doxid-treegen__kernel_8hpp_1aca4bc0a7ff057fac780058a14890f5fc:
.. _cid-input_size-3:
.. _doxid-treegen__kernel_8hpp_1a850a59f2f80fb157a81fcd3b4220c254:
.. _cid-blocks_per_chunk:
.. _doxid-zlib__config_8h_1ad9b35bd5633acb11aa4db5c956cccf89:
.. _cid-gz_max_literal_count:
.. _doxid-zlib__decompress__kernel_8hpp_1a4d66a6d94453a075969915398c49c388:
.. _cid-in-3:
.. _doxid-zlib__decompress__kernel_8hpp_1a49c0705b8b9b834edbb3c949ed1f548a:
.. _cid-out-3:
.. _doxid-zlib__decompress__kernel_8hpp_1a0c3cf165c72569f066f56f2252eefd05:
.. _cid-encoded_size:
.. _doxid-zlib__decompress__kernel_8hpp_1af9dbb3dde00c1b5e85d00538b3ca0f1f:
.. _cid-input_size-4:
.. _doxid-huffman__kernel_8hpp_1a7b846473f310e6962ca8b763772cf862:
.. _cid-bit:
.. _doxid-lz4__decompress__stream__kernel_8hpp_1a7b846473f310e6962ca8b763772cf862:
.. _cid-bit-2:
.. _doxid-lz77__compress__kernel_8hpp_1a7b846473f310e6962ca8b763772cf862:
.. _cid-bit-3:
.. _doxid-zlib__decompress__kernel_8hpp_1a7b846473f310e6962ca8b763772cf862:
.. _cid-bit-4:
.. _doxid-treegen__kernel_8hpp_1a7b846473f310e6962ca8b763772cf862:
.. _cid-bit-5:
.. _doxid-zlib__decompress__kernel_8hpp_1ae4f697e7464ebc5d2138a8607d1d5855:
.. _cid-bitlength:
.. _doxid-zlib__decompress__kernel_8hpp_1af444b6f442c623c21ec7087ed08c37aa:
.. _cid-bitlenhuff:
.. _doxid-huffman__kernel_8hpp_1a9cb9f49d4ce20962a777d05bc7e530ca:
.. _cid-bltree_size:
.. _doxid-treegen__kernel_8hpp_1a9cb9f49d4ce20962a777d05bc7e530ca:
.. _cid-bltree_size-2:
.. _doxid-zlib__config_8h_1a9cb9f49d4ce20962a777d05bc7e530ca:
.. _cid-bltree_size-3:
.. _doxid-zlib__config_8h_1a9e19158a493307d4f211cdf223da8319:
.. _cid-bl_codes:
.. _doxid-zlib__decompress__kernel_8hpp_1a4ccc9878008def89d325d0bb7efdbd6b:
.. _cid-check:
.. _doxid-zlib__decompress__kernel_8hpp_1af0e86dcd490d17570f09975b7b3905b5:
.. _cid-codelens:
.. _doxid-zlib__decompress__kernel_8hpp_1a9e77d621548de2a80bc9c5909bfa2b8a:
.. _cid-copy:
.. _doxid-zlib__decompress__kernel_8hpp_1a460d396dc2973a3dc63478dcaf21baa2:
.. _cid-copy_:
.. _doxid-lz77__compress__kernel_8hpp_1a05216c357020a68f3aa13417f0f28417:
.. _cid-dict_ele_width:
.. _doxid-zlib__decompress__kernel_8hpp_1a05216c357020a68f3aa13417f0f28417:
.. _cid-dict_ele_width-2:
.. _doxid-huffman__kernel_8hpp_1a339221efc337bd8f704993fa62cdc2fe:
.. _cid-dist_extra:
.. _doxid-huffman__kernel_8hpp_1abab81c1ada38fed9923f8dc69b38d439:
.. _cid-dist_rep:
.. _doxid-zlib__decompress__kernel_8hpp_1abe6b865c045f3e7c6892ef4f15ff5779:
.. _cid-done:
.. _doxid-treegen__kernel_8hpp_1a55382a9a0b26bb7dfc5df2ecd43cb500:
.. _cid-dtree_size:
.. _doxid-zlib__config_8h_1a55382a9a0b26bb7dfc5df2ecd43cb500:
.. _cid-dtree_size-2:
.. _doxid-huffman__kernel_8hpp_1a55382a9a0b26bb7dfc5df2ecd43cb500:
.. _cid-dtree_size-3:
.. _doxid-gzip__tables_8h_1a8798a9a526623abbd88fedb0727e21aa:
.. _cid-d_codes:
.. _doxid-zlib__config_8h_1a8798a9a526623abbd88fedb0727e21aa:
.. _cid-d_codes-2:
.. _doxid-zlib__config_8h_1a9e7596921a3a653bf68d7049f1cfbf24:
.. _cid-extra_blcodes:
.. _doxid-zlib__config_8h_1ae5ff8e171d249fa2b6fce8d66c4274d8:
.. _cid-extra_dcodes:
.. _doxid-zlib__config_8h_1a0ea47ce476b845613b877a110dad982f:
.. _cid-extra_lcodes:
.. _doxid-zlib__decompress__kernel_8hpp_1a4ef9636ea91e8374d90b2df0834b35a3:
.. _cid-get_diff_if_big:
.. _doxid-lz77__compress__kernel_8hpp_1a4ef9636ea91e8374d90b2df0834b35a3:
.. _cid-get_diff_if_big-2:
.. _doxid-zlib__decompress__kernel_8hpp_1a339363060eacccb8cf32c45034c8fde5:
.. _cid-gmem_burst_size:
.. _doxid-lz77__compress__kernel_8hpp_1a339363060eacccb8cf32c45034c8fde5:
.. _cid-gmem_burst_size-2:
.. _doxid-huffman__kernel_8hpp_1a339363060eacccb8cf32c45034c8fde5:
.. _cid-gmem_burst_size-3:
.. _doxid-huffman__kernel_8hpp_1a1512e047741436f48d2ee378518f724f:
.. _cid-gmem_dwidth:
.. _doxid-lz77__compress__kernel_8hpp_1a1512e047741436f48d2ee378518f724f:
.. _cid-gmem_dwidth-2:
.. _doxid-zlib__decompress__kernel_8hpp_1a1512e047741436f48d2ee378518f724f:
.. _cid-gmem_dwidth-3:
.. _doxid-zlib__config_8h_1a1b45302695680930829cac31d65e41e1:
.. _cid-heap_size:
.. _doxid-zlib__decompress__kernel_8hpp_1a43034bdd0ae7c6267b05ff35ae97cddf:
.. _cid-history_size:
.. _doxid-zlib__decompress__kernel_8hpp_1a05b49c662c073f89e86804f7856622a0:
.. _cid-len:
.. _doxid-zlib__config_8h_1a8dd3b78c666b6592944b2acf1706e611:
.. _cid-length_codes:
.. _doxid-lz77__compress__kernel_8hpp_1a8dd3b78c666b6592944b2acf1706e611:
.. _cid-length_codes-2:
.. _doxid-gzip__tables_8h_1a8dd3b78c666b6592944b2acf1706e611:
.. _cid-length_codes-3:
.. _doxid-zlib__decompress__kernel_8hpp_1a8dd3b78c666b6592944b2acf1706e611:
.. _cid-length_codes-4:
.. _doxid-zlib__config_8h_1a3f59145500c9de746e7dc49fb98c29ef:
.. _cid-literals:
.. _doxid-huffman__kernel_8hpp_1a4a091988fcfd7b626880400fcd40376b:
.. _cid-lit_rep:
.. _doxid-zlib__decompress__kernel_8hpp_1a2b8f8e3bbe3f6e707f3f920dfeb2be7b:
.. _cid-low_offset:
.. _doxid-zlib__decompress__kernel_8hpp_1af0f756bfd33c38e7b36c1f10dcb0ba99:
.. _cid-low_offset_state:
.. _doxid-zlib__config_8h_1a5b89ad0599c454b953aab3bb714067a7:
.. _cid-ltree_size:
.. _doxid-huffman__kernel_8hpp_1a5b89ad0599c454b953aab3bb714067a7:
.. _cid-ltree_size-2:
.. _doxid-treegen__kernel_8hpp_1a5b89ad0599c454b953aab3bb714067a7:
.. _cid-ltree_size-3:
.. _doxid-zlib__decompress__kernel_8hpp_1ab093d1684c2f65f96339d0378a178aa0:
.. _cid-lz_dict_size:
.. _doxid-lz77__compress__kernel_8hpp_1ab093d1684c2f65f96339d0378a178aa0:
.. _cid-lz_dict_size-2:
.. _doxid-lz77__compress__kernel_8hpp_1a9147cd813d2460298aa6dc78122c6498:
.. _cid-lz_hash_bit:
.. _doxid-zlib__decompress__kernel_8hpp_1a9147cd813d2460298aa6dc78122c6498:
.. _cid-lz_hash_bit-2:
.. _doxid-zlib__decompress__kernel_8hpp_1af2cda7e0f4a90b5bd73b287e9a52cb24:
.. _cid-lz_max_offset_limit:
.. _doxid-lz77__compress__kernel_8hpp_1af2cda7e0f4a90b5bd73b287e9a52cb24:
.. _cid-lz_max_offset_limit-2:
.. _doxid-zlib__config_8h_1a2b0cc00cc6a7d521fba8d208a1cae477:
.. _cid-l_codes:
.. _doxid-lz77__compress__kernel_8hpp_1a113fb963ba98e31e3c41eb9599b1497d:
.. _cid-match_len:
.. _doxid-zlib__decompress__kernel_8hpp_1a113fb963ba98e31e3c41eb9599b1497d:
.. _cid-match_len-2:
.. _doxid-zlib__decompress__kernel_8hpp_1a32e585b69aa9798cd0335f8e8ff8404d:
.. _cid-match_level:
.. _doxid-lz77__compress__kernel_8hpp_1a32e585b69aa9798cd0335f8e8ff8404d:
.. _cid-match_level-2:
.. _doxid-zlib__decompress__kernel_8hpp_1a36f419731c0d40403a0b2accb2982599:
.. _cid-match_state:
.. _doxid-zlib__decompress__kernel_8hpp_1a6fcad31e688110d9d61bdcc99b2a59d7:
.. _cid-maxbits:
.. _doxid-zlib__config_8h_1a589eefe5223c5fd3dba28cee344d4922:
.. _cid-maxcode_size:
.. _doxid-treegen__kernel_8hpp_1a51c241e7ad52441b8d4c1fd5f498b3b9:
.. _cid-max_bits:
.. _doxid-zlib__config_8h_1a8f9fea0ddde71a75c6caf59ba993ca4e:
.. _cid-max_bl_bits:
.. _doxid-zlib__decompress__kernel_8hpp_1ab7a9188dce25dac8d3a970c01b89b0c6:
.. _cid-max_match:
.. _doxid-gzip__tables_8h_1ab7a9188dce25dac8d3a970c01b89b0c6:
.. _cid-max_match-2:
.. _doxid-lz77__compress__kernel_8hpp_1ab7a9188dce25dac8d3a970c01b89b0c6:
.. _cid-max_match-3:
.. _doxid-zlib__decompress__kernel_8hpp_1a773437eda00419e55ebcf14bf1ef5a4d:
.. _cid-max_match_len:
.. _doxid-lz77__compress__kernel_8hpp_1a773437eda00419e55ebcf14bf1ef5a4d:
.. _cid-max_match_len-2:
.. _doxid-zlib__decompress__kernel_8hpp_1ac1f29ba54415975a2fa23e276fdf8a0f:
.. _cid-min_block_size:
.. _doxid-lz77__compress__kernel_8hpp_1ac1f29ba54415975a2fa23e276fdf8a0f:
.. _cid-min_block_size-2:
.. _doxid-huffman__kernel_8hpp_1ac1f29ba54415975a2fa23e276fdf8a0f:
.. _cid-min_block_size-3:
.. _doxid-lz77__compress__kernel_8hpp_1a7984ceb1ff48ac91172976b91ed43f60:
.. _cid-min_match:
.. _doxid-gzip__tables_8h_1a7984ceb1ff48ac91172976b91ed43f60:
.. _cid-min_match-2:
.. _doxid-zlib__decompress__kernel_8hpp_1a7984ceb1ff48ac91172976b91ed43f60:
.. _cid-min_match-3:
.. _doxid-zlib__decompress__kernel_8hpp_1a265e5b42d1cd6061c3d4a4e3723a338a:
.. _cid-min_offset:
.. _doxid-lz77__compress__kernel_8hpp_1a265e5b42d1cd6061c3d4a4e3723a338a:
.. _cid-min_offset-2:
.. _doxid-huffman__kernel_8hpp_1aa16a8c3e8f342a8bb54cb6ece1ea97a5:
.. _cid-ml_dist_rep:
.. _doxid-huffman__kernel_8hpp_1a421123d90e9b0e3cf508f5c0ae513297:
.. _cid-ml_extra:
.. _doxid-lz77__compress__kernel_8hpp_1a52cab5c557e96dc15148629e854d6d5e:
.. _cid-offset_window:
.. _doxid-zlib__decompress__kernel_8hpp_1a52cab5c557e96dc15148629e854d6d5e:
.. _cid-offset_window-2:
.. _doxid-lz77__compress__kernel_8hpp_1a589b7a395b2f5673eff3157cd143f349:
.. _cid-out_bytes:
.. _doxid-zlib__decompress__kernel_8hpp_1a589b7a395b2f5673eff3157cd143f349:
.. _cid-out_bytes-2:
.. _doxid-zlib__decompress__kernel_8hpp_1ab0139008fdda107456f13f837872b410:
.. _cid-path:
.. _doxid-zlib__decompress__kernel_8hpp_1ab1641d88e38bafd63cfa1c5dcbd61473:
.. _cid-pathdo:
.. _doxid-zlib__decompress__kernel_8hpp_1af24d57192c431f4e3554b6c6be093153:
.. _cid-read_state:
.. _doxid-zlib__config_8h_1a350267bb8ca6269fac9ba06057336788:
.. _cid-repz_11_138:
.. _doxid-zlib__config_8h_1a39f77126525d41c0155506e942365da8:
.. _cid-repz_3_10:
.. _doxid-zlib__config_8h_1a5d39bc5068c496733ec81b9d5543db40:
.. _cid-rep_3_6:
.. _doxid-huffman__kernel_8hpp_1a15de9bbd20c76f6a84a71769060100a4:
.. _cid-send_output:
.. _doxid-zlib__decompress__kernel_8hpp_1a1f104a4798c99e65adde445b937bfe81:
.. _cid-stored:
.. _doxid-zlib__decompress__kernel_8hpp_1acadaccd8321f8569f31a11bdad1829da:
.. _cid-table:
.. _doxid-zlib__decompress__kernel_8hpp_1afcd3bd454f91a270d002dbcb4fe5ebc6:
.. _cid-tcodesize:
.. _doxid-zlib__decompress__kernel_8hpp_1afc0eef637f1016e8786e45e106a4881e:
.. _cid-top:
.. _doxid-zlib__decompress__kernel_8hpp_1ad8ed3651a4baa9662e74ab93564de63e:
.. _cid-total_dists:
.. _doxid-zlib__decompress__kernel_8hpp_1a0be95ec9fb19394c4655b6ebf7745e2c:
.. _cid-total_lens:
.. _doxid-zlib__decompress__kernel_8hpp_1a4749c5f07d5b90ecf9f3d53002f45b0b:
.. _cid-vec:
.. _doxid-lz77__compress__kernel_8hpp_1a4749c5f07d5b90ecf9f3d53002f45b0b:
.. _cid-vec-2:
.. _doxid-lz77__compress__kernel_8hpp_1ab6b5088bacf94b3eae3469d19bd4f584:
.. _cid-write_literal:
.. _doxid-lz77__compress__kernel_8hpp_1af7fd34aa2775a02cf2abdcdca2e1ba4e:
.. _cid-write_lit_len:
.. _doxid-lz77__compress__kernel_8hpp_1aa66d01587d4d0ab028e7674a35b14443:
.. _cid-write_match_len:
.. _doxid-lz77__compress__kernel_8hpp_1ab09994a83f23f00f7fdfee6ef9a5d7a9:
.. _cid-write_offset0:
.. _doxid-lz77__compress__kernel_8hpp_1ad8c1b2524b781fb92e0d114831d7f14e:
.. _cid-write_offset1:
.. _doxid-lz77__compress__kernel_8hpp_1aef9947c0b7fc7a3c0ce3ebf616a651bb:
.. _cid-write_token:
.. _doxid-huffman__kernel_8hpp_1aef9947c0b7fc7a3c0ce3ebf616a651bb:
.. _cid-write_token-2:
.. _doxid-zlib__decompress__kernel_8hpp_1a2f2c9b4b416a1754ea8a01b68798b175:
.. _cid-wrong:
.. _doxid-zlib__decompress__kernel_8hpp_1a27a96226f3dc88e4743131c632adf32f:
.. _cid-z_deflated:
.. _doxid-huffman__kernel_8hpp_1a3a3a3795eafe60850be8b44dad7bdcf7:
.. _cid-d_code:
.. _doxid-lz77__compress__kernel_8hpp_1a3a3a3795eafe60850be8b44dad7bdcf7:
.. _cid-d_code-2:
.. _doxid-treegen__kernel_8hpp_1af255f1f25b11497e0fe987a88c2a5f6c:
.. _cid-findmin:
.. ref-code-block:: cpp
	:class: overview-code-block

	// typedefs

	typedef ap_uint <GMEM_DWIDTH> uint512_t
	typedef ap_uint <16> uintOutV_t
	typedef ap_uint <32> encoded_dt
	typedef ap_uint <32> encodedV_dt
	typedef ap_uint <BIT> uintVt
	typedef ap_uint <MATCH_LEN*BIT> uintMatchV_t
	typedef ap_uint <DICT_ELE_WIDTH> uintDict_t
	typedef ap_uint <MATCH_LEVEL*DICT_ELE_WIDTH> uintDictV_t
	typedef ap_uint <OUT_BYTES*BIT> uintOut_t
	typedef ap_uint <2*OUT_BYTES*BIT> uintDoubleOut_t
	typedef ap_uint <GMEM_DWIDTH> uint512_t
	typedef ap_uint <32> compressd_dt
	typedef ap_uint <VEC*32> compressdV_dt
	typedef ap_uint <64> lz77_compressd_dt
	typedef ap_uint <MATCH_LEN*BIT> uintMatchV_t
	typedef ap_uint <DICT_ELE_WIDTH> uintDict_t
	typedef ap_uint <MATCH_LEVEL*DICT_ELE_WIDTH> uintDictV_t
	typedef ap_uint <OUT_BYTES*BIT> uintOut_t
	typedef ap_uint <2*OUT_BYTES*BIT> uintDoubleOut_t
	typedef ap_uint <GMEM_DWIDTH> uint512_t
	typedef ap_uint <32> compressd_dt
	typedef ap_uint <VEC*32> compressdV_dt
	typedef ap_uint <64> gzip_decompress_compressd_dt

	// enums

	enum :ref:`packcodedata<doxid-zlib__decompress__kernel_8hpp_1a0258f92e64d83b16698b5cd273d4971d>`

	// structs

	struct :ref:`code<doxid-structcode>` 

	// global variables

	const uint8_t length_code[MAX_MATCH-MIN_MATCH+1]
	const uint8_t dist_code[512]
	const uint16_t base_dist[D_CODES]
	const uint8_t base_length[LENGTH_CODES]
	const int fixed_lenlit_table[]
	const int fixed_lenlit_bl[]
	const int fixed_dist_table[]
	const int fixed_dist_bl[]
	const int fixed_len_code[]
	uint512_t* in
	uint512_t uint512_t* out
	uint512_t uint512_t uint32_t* in_block_size
	uint512_t uint512_t uint32_t uint32_t* compressd_size
	uint512_t uint512_t uint32_t uint32_t uint32_t* dyn_litmtree_codes
	uint512_t uint512_t uint32_t uint32_t uint32_t uint32_t* dyn_distree_codes
	uint512_t uint512_t uint32_t uint32_t uint32_t uint32_t uint32_t* dyn_bitlentree_codes
	uint512_t uint512_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t* dyn_litmtree_blen
	uint512_t uint512_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t* dyn_dtree_blen
	uint512_t uint512_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t* dyn_bitlentree_blen
	uint512_t uint512_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t* dyn_max_codes
	uint512_t uint512_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t block_size_in_kb
	uint512_t uint512_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t input_size
	const uint512_t* in
	const uint512_t uint512_t* out
	const uint512_t uint512_t uint32_t* compressd_size
	const uint512_t uint512_t uint32_t uint32_t* in_block_size
	const uint512_t uint512_t uint32_t uint32_t uint32_t* dyn_ltree_freq
	const uint512_t uint512_t uint32_t uint32_t uint32_t uint32_t* dyn_dtree_freq
	const uint512_t uint512_t uint32_t uint32_t uint32_t uint32_t uint32_t block_size_in_kb
	const uint512_t uint512_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t input_size
	uint32_t* dyn_ltree_freq
	uint32_t uint32_t* dyn_dtree_freq
	uint32_t uint32_t uint32_t* dyn_bltree_freq
	uint32_t uint32_t uint32_t uint32_t* dyn_ltree_codes
	uint32_t uint32_t uint32_t uint32_t uint32_t* dyn_dtree_codes
	uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t* dyn_bltree_codes
	uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t* dyn_ltree_blen
	uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t* dyn_dtree_blen
	uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t* dyn_bltree_blen
	uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t* max_codes
	uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t block_size_in_kb
	uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t input_size
	uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t uint32_t blocks_per_chunk
	const int gz_max_literal_count
	uint512_t* in
	uint512_t uint512_t* out
	uint512_t uint512_t uint32_t* encoded_size
	uint512_t uint512_t uint32_t uint32_t input_size

	// macros

	#define BIT
	#define BIT
	#define BIT
	#define BIT
	#define BIT
	#define BITLENGTH
	#define BITLENHUFF
	#define BLTREE_SIZE
	#define BLTREE_SIZE
	#define BLTREE_SIZE
	#define BL_CODES
	#define CHECK
	#define CODELENS
	#define COPY
	#define COPY_
	#define DICT_ELE_WIDTH
	#define DICT_ELE_WIDTH
	#define DIST_EXTRA
	#define DIST_REP
	#define DONE
	#define DTREE_SIZE
	#define DTREE_SIZE
	#define DTREE_SIZE
	#define D_CODES
	#define D_CODES
	#define EXTRA_BLCODES
	#define EXTRA_DCODES
	#define EXTRA_LCODES

	#define GET_DIFF_IF_BIG( \
	    x, \
	    y \
	    )

	#define GET_DIFF_IF_BIG( \
	    x, \
	    y \
	    )

	#define GMEM_BURST_SIZE
	#define GMEM_BURST_SIZE
	#define GMEM_BURST_SIZE
	#define GMEM_DWIDTH
	#define GMEM_DWIDTH
	#define GMEM_DWIDTH
	#define HEAP_SIZE
	#define HISTORY_SIZE
	#define LEN
	#define LENGTH_CODES
	#define LENGTH_CODES
	#define LENGTH_CODES
	#define LENGTH_CODES
	#define LITERALS
	#define LIT_REP
	#define LOW_OFFSET
	#define LOW_OFFSET_STATE
	#define LTREE_SIZE
	#define LTREE_SIZE
	#define LTREE_SIZE
	#define LZ_DICT_SIZE
	#define LZ_DICT_SIZE
	#define LZ_HASH_BIT
	#define LZ_HASH_BIT
	#define LZ_MAX_OFFSET_LIMIT
	#define LZ_MAX_OFFSET_LIMIT
	#define L_CODES
	#define MATCH_LEN
	#define MATCH_LEN
	#define MATCH_LEVEL
	#define MATCH_LEVEL
	#define MATCH_STATE
	#define MAXBITS
	#define MAXCODE_SIZE
	#define MAX_BITS
	#define MAX_BL_BITS
	#define MAX_MATCH
	#define MAX_MATCH
	#define MAX_MATCH
	#define MAX_MATCH_LEN
	#define MAX_MATCH_LEN
	#define MIN_BLOCK_SIZE
	#define MIN_BLOCK_SIZE
	#define MIN_BLOCK_SIZE
	#define MIN_MATCH
	#define MIN_MATCH
	#define MIN_MATCH
	#define MIN_OFFSET
	#define MIN_OFFSET
	#define ML_DIST_REP
	#define ML_EXTRA
	#define OFFSET_WINDOW
	#define OFFSET_WINDOW
	#define OUT_BYTES
	#define OUT_BYTES
	#define PATH
	#define PATHDO
	#define READ_STATE
	#define REPZ_11_138
	#define REPZ_3_10
	#define REP_3_6
	#define SEND_OUTPUT
	#define STORED
	#define TABLE
	#define TCODESIZE
	#define TOP
	#define TOTAL_DISTS
	#define TOTAL_LENS
	#define VEC
	#define VEC
	#define WRITE_LITERAL
	#define WRITE_LIT_LEN
	#define WRITE_MATCH_LEN
	#define WRITE_OFFSET0
	#define WRITE_OFFSET1
	#define WRITE_TOKEN
	#define WRITE_TOKEN
	#define WRONG
	#define Z_DEFLATED

	#define d_code( \
	    dist, \
	    dist_code \
	    )

	#define d_code( \
	    dist, \
	    dist_code \
	    )

	#define findmin( \
	    tree_freq, \
	    n, \
	    m, \
	    depth \
	    )


.. FunctionSection

Global Functions
~~~~~~~~~~~~~~~~

.. _doxid-lz4__compress__kernel_8hpp_1aa11e26152bb864a14a1b2019faf0dee9:
.. _cid-xillz4compress:

xilLz4Compress
--------------


.. code-block:: cpp
	
	#include "lz4_compress_kernel.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void xilLz4Compress (
	    const xf::compression::uintMemWidth_t* in,
	    xf::compression::uintMemWidth_t* out,
	    uint32_t* compressd_size,
	    uint32_t* in_block_size,
	    uint32_t block_size_in_kb,
	    uint32_t input_size
	    )

LZ4 compression kernel takes the raw data as input and compresses the data in block based fashion and writes the output to global memory.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - in

        - input raw data

    *
        - out

        - output compressed data

    *
        - compressd_size

        - compressed output size of each block

    *
        - in_block_size

        - input block size of each block

    *
        - block_size_in_kb

        - input block size in bytes

    *
        - input_size

        - input data size

.. _doxid-lz4__compress__stream__kernel_8hpp_1a6d79149b75972c5baf6f229de87af8e3:
.. _cid-xillz4compressstream:

xilLz4CompressStream
--------------------


.. code-block:: cpp
	
	#include "lz4_compress_stream_kernel.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void xilLz4CompressStream (
	    hls::stream <xf::compression::hStream8b_t>& inAxiStream,
	    hls::stream <xf::compression::hStream8b_t>& outAxiStream,
	    hls::stream <xf::compression::hStream32b_t>& compressedSizeAxis,
	    uint32_t inputSize
	    )

LZ4 compression streaming kernel.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inAxiStream

        - Input axi stream

    *
        - outAxiStream

        - Output axi stream

    *
        - compressedSizeAxis

        - Axi stream to transfer compressed data size

    *
        - inputSize

        - Input data size

.. _doxid-lz4__decompress__kernel_8hpp_1acf6728ba62074fd173cb146ecb59433e:
.. _cid-xillz4decompress:

xilLz4Decompress
----------------


.. code-block:: cpp
	
	#include "lz4_decompress_kernel.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void xilLz4Decompress (
	    const xf::compression::uintMemWidth_t* in,
	    xf::compression::uintMemWidth_t* out,
	    uint32_t* in_block_size,
	    uint32_t* in_compress_size,
	    uint32_t block_size_in_kb,
	    uint32_t no_blocks
	    )

LZ4 decompression kernel takes compressed data as input and process in block based fashion and writes the raw data to global memory.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - in

        - input compressed data

    *
        - out

        - output raw data

    *
        - in_block_size

        - input block size of each block

    *
        - in_compress_size

        - compress size of each block

    *
        - block_size_in_kb

        - block size in bytes

    *
        - no_blocks

        - number of blocks

.. _doxid-lz4__decompress__stream__kernel_8hpp_1ae7ce7f2a2c87341067f3931e8626c32a:
.. _cid-xillz4decompressstream:

xilLz4DecompressStream
----------------------


.. code-block:: cpp
	
	#include "lz4_decompress_stream_kernel.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void xilLz4DecompressStream (
	    hls::stream <xf::compression::hStream8b_t>& inAxiStream,
	    hls::stream <xf::compression::hStream8b_t>& outAxiStream,
	    const uint32_t inputSize,
	    const uint32_t outputSize
	    )

LZ4 decompression streaming kernel.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inAxiStream

        - Input axi stream

    *
        - outAxiStream

        - Output axi stream

    *
        - inputSize

        - Input compressed data size

    *
        - outputSize

        - Output decompressed data size

.. _doxid-snappy__compress__kernel_8hpp_1a32ebd0013229e97db7baeba58ba3a54a:
.. _cid-xilsnappycompress:

xilSnappyCompress
-----------------


.. code-block:: cpp
	
	#include "snappy_compress_kernel.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void xilSnappyCompress (
	    const xf::compression::uintMemWidth_t* in,
	    xf::compression::uintMemWidth_t* out,
	    uint32_t* compressd_size,
	    uint32_t* in_block_size,
	    uint32_t block_size_in_kb,
	    uint32_t input_size
	    )

Snappy compression kernel takes the raw data as input and compresses the data in block based fashion and writes the output to global memory.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - in

        - input raw data

    *
        - out

        - output compressed data

    *
        - compressd_size

        - compressed output size of each block

    *
        - in_block_size

        - input block size of each block

    *
        - block_size_in_kb

        - input block size in bytes

    *
        - input_size

        - input data size

.. _doxid-snappy__decompress__kernel_8hpp_1a70f1512f5f9d55b4aadc6baf57f6d6d6:
.. _cid-xilsnappydecompress:

xilSnappyDecompress
-------------------


.. code-block:: cpp
	
	#include "snappy_decompress_kernel.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void xilSnappyDecompress (
	    const xf::compression::uintMemWidth_t* in,
	    xf::compression::uintMemWidth_t* out,
	    uint32_t* in_block_size,
	    uint32_t* in_compress_size,
	    uint32_t block_size_in_kb,
	    uint32_t no_blocks
	    )

Snappy decompression kernel takes compressed data as input and process in block based fashion and writes the raw data to global memory.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - in

        - input compressed data

    *
        - out

        - output raw data

    *
        - in_block_size

        - input block size of each block

    *
        - in_compress_size

        - compress size of each block

    *
        - block_size_in_kb

        - block size in bytes

    *
        - no_blocks

        - number of blocks

