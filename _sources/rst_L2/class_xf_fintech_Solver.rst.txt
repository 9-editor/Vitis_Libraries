.. index:: pair: class; xf::fintech::Solver
.. _doxid-classxf_1_1fintech_1_1_solver:
.. _cid-xf::fintech::solver:

template class xf::fintech::Solver
==================================

.. toctree::
	:hidden:

.. code-block:: cpp
	:class: overview-code-block

	#include <fd_solver.hpp>


Overview
~~~~~~~~

Class to encapsulate the Finite Difference engine components. :ref:`More...<details-doxid-classxf_1_1fintech_1_1_solver>`

.. ref-code-block:: cpp
	:class: overview-code-block

	template <
	    typename DT,
	    unsigned int M_SIZE,
	    unsigned int LOG2_M_SIZE,
	    unsigned int A_SIZE,
	    unsigned int MEM_WIDTH,
	    unsigned int DIM2_SIZE1 = 3,
	    unsigned int DIM2_SIZE2 = 5
	    >
	class Solver


.. FunctionSection

Methods
~~~~~~~

.. _doxid-classxf_1_1fintech_1_1_solver_1a7fa6400b0fa1a4c3ca7a85e768dadb28:
.. _cid-xf::fintech::solver::reorders2v:

reorderS2V
----------


Defined in <xf_fintech/fd_solver.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	void reorderS2V (
	    const DT v_in [M_SIZE],
	    DT v_out [M_SIZE],
	    const unsigned int m1,
	    const unsigned int m2
	    )

Copy and reorder S ordered vector into V inner form.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - v_in

        - Vector representing array of size m1 x m2 flattened in S inner form

    *
        - m1

        - Size of array [0..m1-1] in S direction

    *
        - m2

        - Size of array [0..m2-1] in V direction

    *
        - v_out

        - Vector representing array of size m1 x m2 flattened in V inner form

.. _doxid-classxf_1_1fintech_1_1_solver_1ab0cf15e3bc52eedfdc929ed2a6b4dca4:
.. _cid-xf::fintech::solver::reorderv2s:

reorderV2S
----------


Defined in <xf_fintech/fd_solver.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	void reorderV2S (
	    const DT v_in [M_SIZE],
	    DT v_out [M_SIZE],
	    const unsigned int m1,
	    const unsigned int m2
	    )

Copy and reorder V ordered vector into S inner form.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - v_in

        - Vector representing array of size m1 x m2 flattened in V inner form

    *
        - m1

        - Size of array [0..m1] in S direction

    *
        - m2

        - Size of array [0..m2] in V direction

    *
        - v_out

        - Vector representing array of size m1 x m2 flattened in S inner form

.. _doxid-classxf_1_1fintech_1_1_solver_1a55c1180b7c9bee4c28f56c578b5ffc55:
.. _cid-xf::fintech::solver::copyvector:

CopyVector
----------


Defined in <xf_fintech/fd_solver.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	void CopyVector (
	    const DT v_in [M_SIZE],
	    DT v_out [M_SIZE]
	    )

Utility function to copy a vector.

.. _doxid-classxf_1_1fintech_1_1_solver_1a4e0a2299b783c89c7afa3d7a97a85f51:
.. _cid-xf::fintech::solver::vectoradd:

vectorAdd
---------


Defined in <xf_fintech/fd_solver.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	void vectorAdd (
	    const DT v_in0 [M_SIZE],
	    const DT v_in1 [M_SIZE],
	    DT v_out [M_SIZE]
	    )

Utility function to add two vectors.

.. _doxid-classxf_1_1fintech_1_1_solver_1ad17183a3d16cfad6ee16f6821b0a0753:
.. _cid-xf::fintech::solver::vectorsub:

vectorSub
---------


Defined in <xf_fintech/fd_solver.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	void vectorSub (
	    const DT v_in0 [M_SIZE],
	    const DT v_in1 [M_SIZE],
	    DT v_out [M_SIZE]
	    )

Utility function to subtract two vectors.

.. _doxid-classxf_1_1fintech_1_1_solver_1a05fd4f52ebf07bf067a06a18461faefd:
.. _cid-xf::fintech::solver::tridiagsovlerpcr:

triDiagSovlerPCR
----------------


Defined in <xf_fintech/fd_solver.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	void triDiagSovlerPCR (
	    DT X1 [M_SIZE][DIM2_SIZE1],
	    DT rhs [M_SIZE],
	    DT v_out [M_SIZE],
	    const unsigned int m1,
	    const unsigned int m2
	    )

Wrapper to PCR tridiagonal solver.

Solves tridiagonal linear system



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - X1

        - M x 3 array holding lower/main/upper diagonals of X1 tridiagonal matrix

    *
        - rhs

        - Right hand side of linear system to be solved

    *
        - m1

        - Size of array [0..m1-1] in S direction

    *
        - m2

        - Size of array [0..m2-1] in V direction

    *
        - v_out

        - Solution vector representing array of size m1 x m2 flattened in V inner form

.. _doxid-classxf_1_1fintech_1_1_solver_1ad56a7fde1c452bbd00c044fb2020ef1c:
.. _cid-xf::fintech::solver::pendadiagsovler:

pendaDiagSovler
---------------


Defined in <xf_fintech/fd_solver.hpp>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. ref-code-block:: cpp
	:class: title-code-block

	void pendaDiagSovler (
	    DT A [M_SIZE][DIM2_SIZE2],
	    DT rhs [M_SIZE],
	    DT v_out [M_SIZE],
	    bool precompute
	    )

Solve pentadiagonal form linear system.

This is a highly serial algorithm and is the bottleneck in this solver Unfortunately due to the formulation used by In 'T Hout & Foulon, the pentadiagonal array contains diagonals which are not fully populated. This causes the common parallel pentadiagonal systems to fail due to divide-by-zero errors or similar.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - A

        - M x 5 array holding lower/lower/main/upper/upper diagonals of X1 tridiagonal matrix

    *
        - rhs

        - Right hand side of linear system to be solved

    *
        - precompute

        - Flag to indicate the scaling factors should be computed

    *
        - v_out

        - Solution vector representing array of size m1 x m2 flattened in V inner form

