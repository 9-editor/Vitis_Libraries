<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="namespacexf_1_1solver" kind="namespace" language="C++">
    <compoundname>xf::solver</compoundname>
    <innernamespace refid="namespacexf_1_1solver_1_1internal">xf::solver::internal</innernamespace>
    <innernamespace refid="namespacexf_1_1solver_1_1internal__gelinear">xf::solver::internal_gelinear</innernamespace>
    <innernamespace refid="namespacexf_1_1solver_1_1internal__gemi">xf::solver::internal_gemi</innernamespace>
    <innernamespace refid="namespacexf_1_1solver_1_1internal__polinear">xf::solver::internal_polinear</innernamespace>
    <innernamespace refid="namespacexf_1_1solver_1_1internal__pomi">xf::solver::internal_pomi</innernamespace>
    <innernamespace refid="namespacexf_1_1solver_1_1internal__trtrs">xf::solver::internal_trtrs</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacexf_1_1solver_1a4380dbd7992efd603fe32bf2a3415df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>NMAX</declname>
            <defname>NMAX</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NCU</declname>
            <defname>NCU</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::solver::gelinearsolver</definition>
        <argsstring>(int n, T *A, int b, T *B, int lda, int ldb, int &amp;info)</argsstring>
        <name>gelinearsolver</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This function solves a system of linear equation with general matrix along with multiple right-hand side vector <linebreak/>
 <formula id="0">\begin{equation*} {Ax=B}\end{equation*}</formula> where <formula id="1">$A$</formula> is a dense general matrix of size <formula id="2">$n \times n$</formula>, <formula id="3">$x$</formula> is a vector need to be computed, and <formula id="4">$B$</formula> is input vector.<linebreak/>
 The maximum matrix size supported in FPGA is templated by NMAX. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data type (support float and double) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NMAX</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of rows/columns of input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NCU</parametername>
</parameternamelist>
<parameterdescription>
<para>number of computation unit </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows/cols of matrix A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">A</parametername>
</parameternamelist>
<parameterdescription>
<para>input matrix of size <formula id="2">$n \times n$</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns of matrix B </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">B</parametername>
</parameternamelist>
<parameterdescription>
<para>input matrix of size <formula id="5">$b \times n$</formula>, and overwritten by the output matrix x </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lda</parametername>
</parameternamelist>
<parameterdescription>
<para>leading dimention of input matrix A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ldb</parametername>
</parameternamelist>
<parameterdescription>
<para>leading dimention of input matrix B </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">info</parametername>
</parameternamelist>
<parameterdescription>
<para>output info (unused) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/proj/autoesl/fengx/work/xf_solver/L2/include/hw/LinearSolver/gelinearsolver.hpp" line="146" column="1" bodyfile="/proj/autoesl/fengx/work/xf_solver/L2/include/hw/LinearSolver/gelinearsolver.hpp" bodystart="146" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1solver_1a330738ad0c91400601fc9029bbe18d70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>NMAX</declname>
            <defname>NMAX</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NCU</declname>
            <defname>NCU</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::solver::gematrixinverse</definition>
        <argsstring>(int m, T *A, int lda, int &amp;info)</argsstring>
        <name>gematrixinverse</name>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This function computes the inverse matrix of <formula id="1">$A$</formula> <linebreak/>
 <formula id="6">\begin{equation*} {A}^{-1}\end{equation*}</formula> where <formula id="1">$A$</formula> is a dense general matrix of size <formula id="7">$m \times m$</formula>. The maximum matrix size supported in FPGA is templated by NMAX. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data type (support float and double) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NMAX</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of rows/columns of input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NCU</parametername>
</parameternamelist>
<parameterdescription>
<para>number of computation unit </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">m</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows/cols of matrix A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">A</parametername>
</parameternamelist>
<parameterdescription>
<para>input matrix of size <formula id="2">$n \times n$</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lda</parametername>
</parameternamelist>
<parameterdescription>
<para>leading dimention of input matrix A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">info</parametername>
</parameternamelist>
<parameterdescription>
<para>output info (unused) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/proj/autoesl/fengx/work/xf_solver/L2/include/hw/LinearSolver/gematrixinverse.hpp" line="148" column="1" bodyfile="/proj/autoesl/fengx/work/xf_solver/L2/include/hw/LinearSolver/gematrixinverse.hpp" bodystart="148" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1solver_1ab2a500c3d35adb231e4fbdfe7b17932a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>NMAX</declname>
            <defname>NMAX</defname>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>NCU</declname>
            <defname>NCU</defname>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int xf::solver::gtsv</definition>
        <argsstring>(unsigned int n, T *matDiagLow, T *matDiag, T *matDiagUp, T *rhs)</argsstring>
        <name>gtsv</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>matDiagLow</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>matDiag</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>matDiagUp</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Tri-diagonal linear solver. Compute solution to linear system with a tridiagonal matrix. Parallel Cyclic Reduction method. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data type (support float and double) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NMAX</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NCU</parametername>
</parameternamelist>
<parameterdescription>
<para>number of compute units </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>matDiagLow</parametername>
</parameternamelist>
<parameterdescription>
<para>lower diagonal of matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>matDiag</parametername>
</parameternamelist>
<parameterdescription>
<para>diagonal of matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>matDiagUp</parametername>
</parameternamelist>
<parameterdescription>
<para>upper diagonal of matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>right-hand side </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/proj/autoesl/fengx/work/xf_solver/L2/include/hw/LinearSolver/gtsv_pcr.hpp" line="927" column="1" bodyfile="/proj/autoesl/fengx/work/xf_solver/L2/include/hw/LinearSolver/gtsv_pcr.hpp" bodystart="927" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1solver_1ada1d0e10d79095ed587f0714b7d3b1d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>NMAX</declname>
            <defname>NMAX</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NCU</declname>
            <defname>NCU</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::solver::polinearsolver</definition>
        <argsstring>(int n, T *A, int b, T *B, int lda, int ldb, int &amp;info)</argsstring>
        <name>polinearsolver</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This function solves a system of linear equation with symmetric positive definite (SPD) matrix along with multiple right-hand side vector <linebreak/>
 <formula id="0">\begin{equation*} {Ax=B}\end{equation*}</formula> where <formula id="1">$A$</formula> is a dense SPD triangular matrix of size <formula id="7">$m \times m$</formula>, <formula id="3">$x$</formula> is a vector need to be computed, and <formula id="4">$B$</formula> is input vector.<linebreak/>
The maximum matrix size supported in FPGA is templated by NMAX. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data type (support float and double) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NMAX</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of rows/columns of input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NCU</parametername>
</parameternamelist>
<parameterdescription>
<para>number of computation unit </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows/cols of matrix A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">A</parametername>
</parameternamelist>
<parameterdescription>
<para>input matrix of size <formula id="2">$n \times n$</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns of matrix B </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">B</parametername>
</parameternamelist>
<parameterdescription>
<para>input matrix of size <formula id="5">$b \times n$</formula>, and overwritten by the output matrix x </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lda</parametername>
</parameternamelist>
<parameterdescription>
<para>leading dimention of input matrix A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ldb</parametername>
</parameternamelist>
<parameterdescription>
<para>leading dimention of input matrix B </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">info</parametername>
</parameternamelist>
<parameterdescription>
<para>output info (unused) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/proj/autoesl/fengx/work/xf_solver/L2/include/hw/LinearSolver/polinearsolver.hpp" line="244" column="1" bodyfile="/proj/autoesl/fengx/work/xf_solver/L2/include/hw/LinearSolver/polinearsolver.hpp" bodystart="244" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1solver_1a3b929dda3eb23cf26506eae627591870" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>NMAX</declname>
            <defname>NMAX</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NCU</declname>
            <defname>NCU</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::solver::pomatrixinverse</definition>
        <argsstring>(int m, T *A, int lda, int &amp;info)</argsstring>
        <name>pomatrixinverse</name>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This function computes the inverse matrix of <formula id="1">$A$</formula> <linebreak/>
 <formula id="6">\begin{equation*} {A}^{-1}\end{equation*}</formula> where <formula id="1">$A$</formula> is a dense symmetric positive-definite matrix of size <formula id="7">$m \times m$</formula>. The maximum matrix size supported in FPGA is templated by NMAX. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data type (support float and double) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NMAX</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of rows/columns of input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NCU</parametername>
</parameternamelist>
<parameterdescription>
<para>number of computation unit </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">m</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows/cols of matrix A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">A</parametername>
</parameternamelist>
<parameterdescription>
<para>input matrix of size <formula id="2">$n \times n$</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lda</parametername>
</parameternamelist>
<parameterdescription>
<para>leading dimention of input matrix A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">info</parametername>
</parameternamelist>
<parameterdescription>
<para>output info (unused) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/proj/autoesl/fengx/work/xf_solver/L2/include/hw/LinearSolver/pomatrixinverse.hpp" line="251" column="1" bodyfile="/proj/autoesl/fengx/work/xf_solver/L2/include/hw/LinearSolver/pomatrixinverse.hpp" bodystart="251" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1solver_1a807c039392d453610093336dbb4b0b19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>NMAX</declname>
            <defname>NMAX</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NCU</declname>
            <defname>NCU</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::solver::trtrs</definition>
        <argsstring>(char uplo, int m, T *A, int b, T *B, int lda, int ldb, int &amp;info)</argsstring>
        <name>trtrs</name>
        <param>
          <type>char</type>
          <declname>uplo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This function solves a system of linear equation with triangular coefficient matrix along with multiple right-hand side vector <linebreak/>
 <formula id="0">\begin{equation*} {Ax=B}\end{equation*}</formula> where <formula id="1">$A$</formula> is a dense lower or upper triangular matrix of size <formula id="7">$m \times m$</formula>, <formula id="3">$x$</formula> is a vector need to be computed, and <formula id="4">$B$</formula> is input vector.<linebreak/>
The maximum matrix size supported in FPGA is templated by NMAX. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data type (support float and double) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NMAX</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of rows/columns of input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NCU</parametername>
</parameternamelist>
<parameterdescription>
<para>number of computation unit </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">m</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows/cols of matrix A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">A</parametername>
</parameternamelist>
<parameterdescription>
<para>input matrix of size <formula id="2">$n \times n$</formula> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns of matrix B </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">B</parametername>
</parameternamelist>
<parameterdescription>
<para>input matrix of size <formula id="5">$b \times n$</formula>, and overwritten by the output matrix x </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lda</parametername>
</parameternamelist>
<parameterdescription>
<para>leading dimention of input matrix A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ldb</parametername>
</parameternamelist>
<parameterdescription>
<para>leading dimention of input matrix B </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">info</parametername>
</parameternamelist>
<parameterdescription>
<para>output info (unused) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/proj/autoesl/fengx/work/xf_solver/L2/include/hw/LinearSolver/trtrs.hpp" line="98" column="1" bodyfile="/proj/autoesl/fengx/work/xf_solver/L2/include/hw/LinearSolver/trtrs.hpp" bodystart="98" bodyend="134"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/proj/autoesl/fengx/work/xf_solver/L2/include/hw/LinearSolver/gelinearsolver.hpp" line="26" column="1"/>
  </compounddef>
</doxygen>
