<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="namespacexf_1_1security_1_1details" kind="namespace">
    <compoundname>xf::security::details</compoundname>
    <innerclass refid="structxf_1_1security_1_1details_1_1block_type" prot="public">xf::security::details::blockType</innerclass>
    <innerclass refid="classxf_1_1security_1_1details_1_1aes_cbc_enc" prot="public">xf::security::details::aesCbcEnc</innerclass>
    <innerclass refid="classxf_1_1security_1_1details_1_1aes_cbc_dec" prot="public">xf::security::details::aesCbcDec</innerclass>
    <innerclass refid="structxf_1_1security_1_1details_1_1_s_h_a256_block" prot="public">xf::security::details::SHA256Block</innerclass>
    <innerclass refid="structxf_1_1security_1_1details_1_1sha256__digest__config" prot="public">xf::security::details::sha256_digest_config</innerclass>
    <innerclass refid="structxf_1_1security_1_1details_1_1sha256__digest__config_3_01true_01_4" prot="public">xf::security::details::sha256_digest_config&lt; true &gt;</innerclass>
    <innerclass refid="structxf_1_1security_1_1details_1_1sha256__digest__config_3_01false_01_4" prot="public">xf::security::details::sha256_digest_config&lt; false &gt;</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacexf_1_1security_1_1details_1a07222f2e1eeb318273a4b22a8c32b3dc" prot="public" static="no">
        <type>ap_uint&lt; 512 &gt;</type>
        <definition>typedef ap_uint&lt;512&gt; xf::security::details::blockTypeChacha</definition>
        <argsstring></argsstring>
        <name>blockTypeChacha</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/chacha20.hpp" line="38" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/chacha20.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a7032247284d6599cb53f45550d36267d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>BitWidth</declname>
            <defname>BitWidth</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::swap</definition>
        <argsstring>(ap_int&lt; BitWidth &gt; &amp;x, ap_int&lt; BitWidth &gt; &amp;y)</argsstring>
        <name>swap</name>
        <param>
          <type>ap_int&lt; BitWidth &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ap_int&lt; BitWidth &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/asymmetric.hpp" line="28" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/asymmetric.hpp" bodystart="28" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1adf644fbe2feff7b136668d6627249dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>BitWidth</declname>
            <defname>BitWidth</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::extendEculid</definition>
        <argsstring>(ap_int&lt; BitWidth+2 &gt; u, ap_int&lt; BitWidth+2 &gt; v, ap_int&lt; BitWidth+2 &gt; &amp;a, ap_int&lt; BitWidth+2 &gt; &amp;b)</argsstring>
        <name>extendEculid</name>
        <param>
          <type>ap_int&lt; BitWidth+2 &gt;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>ap_int&lt; BitWidth+2 &gt;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>ap_int&lt; BitWidth+2 &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>ap_int&lt; BitWidth+2 &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/asymmetric.hpp" line="38" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/asymmetric.hpp" bodystart="38" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1afe73c08199d1d29bcbaffeb20f8baed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Width</declname>
            <defname>Width</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::elementMulAdd</definition>
        <argsstring>(ap_uint&lt; Width &gt; a, ap_uint&lt; Width &gt; b, ap_uint&lt; Width &gt; c, ap_uint&lt; Width &gt; d, ap_uint&lt; Width &gt; &amp;lower, ap_uint&lt; Width &gt; &amp;upper)</argsstring>
        <name>elementMulAdd</name>
        <param>
          <type>ap_uint&lt; Width &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>ap_uint&lt; Width &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>ap_uint&lt; Width &gt;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ap_uint&lt; Width &gt;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>ap_uint&lt; Width &gt; &amp;</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>ap_uint&lt; Width &gt; &amp;</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/asymmetric.hpp" line="87" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/asymmetric.hpp" bodystart="87" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1aa8557918854e0a8a3cacc7dccd801428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>BlockWidth</declname>
            <defname>BlockWidth</defname>
          </param>
          <param>
            <type>int</type>
            <declname>BlockNum</declname>
            <defname>BlockNum</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::bigIntMul</definition>
        <argsstring>(ap_uint&lt; BlockWidth *BlockNum &gt; a, ap_uint&lt; BlockWidth *BlockNum &gt; b, ap_uint&lt; BlockWidth *BlockNum *2 &gt; &amp;c)</argsstring>
        <name>bigIntMul</name>
        <param>
          <type>ap_uint&lt; BlockWidth *BlockNum &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>ap_uint&lt; BlockWidth *BlockNum &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>ap_uint&lt; BlockWidth *BlockNum *2 &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/asymmetric.hpp" line="101" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/asymmetric.hpp" bodystart="101" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ac56ac20af0073a15f820da68b7ea9b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>BlockWidth</declname>
            <defname>BlockWidth</defname>
          </param>
          <param>
            <type>int</type>
            <declname>BlockNum</declname>
            <defname>BlockNum</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::REDC</definition>
        <argsstring>(ap_uint&lt; BlockWidth *BlockNum *2 &gt; t, ap_uint&lt; BlockWidth *BlockNum &gt; n, ap_uint&lt; BlockWidth *BlockNum &gt; np, ap_uint&lt; BlockWidth *BlockNum &gt; &amp;result)</argsstring>
        <name>REDC</name>
        <param>
          <type>ap_uint&lt; BlockWidth *BlockNum *2 &gt;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>ap_uint&lt; BlockWidth *BlockNum &gt;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>ap_uint&lt; BlockWidth *BlockNum &gt;</type>
          <declname>np</declname>
        </param>
        <param>
          <type>ap_uint&lt; BlockWidth *BlockNum &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/asymmetric.hpp" line="161" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/asymmetric.hpp" bodystart="161" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a8be2bcb760121d10c7c9245913cd6886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
            <defval>64</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::generateBlock</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;msg_len_strm, hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;key_strm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;key_len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; blockType &gt; &amp;blk_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;msg_len_out_strm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;key_len_out_strm)</argsstring>
        <name>generateBlock</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>msg_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>key_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>key_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; <ref refid="structxf_1_1security_1_1details_1_1block_type" kindref="compound">blockType</ref> &gt; &amp;</type>
          <declname>blk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>msg_len_out_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>key_len_out_strm</declname>
        </param>
        <briefdescription>
<para>Generate 1024-bit processing blocks by padding (pipeline). </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The BLAKE2 Cryptographic Hash and Message Authentication Code (MAC)&quot;. The optimization goal of this function is to yield a 1024-bit block per cycle.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit width of the message words in block, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message length in byte (0 &lt;= msg_len &lt;= 2^128). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Key length in byte (0 &lt;= key_len &lt;= 64). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The 1024-bit hash block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of hash block for this message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for number of hash block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg_len_out_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message length pass on to the digest process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_len_out_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Key length pass on to the digest process. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/blake2b.hpp" line="75" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/blake2b.hpp" bodystart="75" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1af9bf62640e08b903458c6249619c819b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
            <defval>64</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>n</declname>
            <defname>n</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ap_uint&lt; w &gt;</type>
        <definition>ap_uint&lt;w&gt; xf::security::details::ROTR</definition>
        <argsstring>(ap_uint&lt; w &gt; x)</argsstring>
        <name>ROTR</name>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>The implementation of rotate right (circular right shift) operation. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The BLAKE2 Cryptographic Hash and Message Authentication Code (MAC)&quot;.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, default value is 64. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits for input x to be shifted.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Word to be rotated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/blake2b.hpp" line="291" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/blake2b.hpp" bodystart="291" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ac56ea1e43d2c767528dd1cd7e3212147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
            <defval>64</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::G</definition>
        <argsstring>(ap_uint&lt; w &gt; v[16], ap_uint&lt; 4 &gt; a, ap_uint&lt; 4 &gt; b, ap_uint&lt; 4 &gt; c, ap_uint&lt; 4 &gt; d, ap_uint&lt; w &gt; x, ap_uint&lt; w &gt; y)</argsstring>
        <name>G</name>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>v</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Mixing function G as defined in standard. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The BLAKE2 Cryptographic Hash and Message Authentication Code (MAC)&quot;.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Bit</parametername>
</parameternamelist>
<parameterdescription>
<para>width of the words, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The third index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the fourth index. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The first input working word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second input working word. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/blake2b.hpp" line="318" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/blake2b.hpp" bodystart="318" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a5f34b33efe5aa6ae657dde4879c9396b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
            <defval>64</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::halfMixing</definition>
        <argsstring>(ap_uint&lt; w &gt; v[16], ap_uint&lt; 4 &gt; vi0, ap_uint&lt; 4 &gt; vi1, ap_uint&lt; 4 &gt; vi2, ap_uint&lt; 4 &gt; vi3, ap_uint&lt; 4 &gt; vi4, ap_uint&lt; 4 &gt; vi5, ap_uint&lt; 4 &gt; vi6, ap_uint&lt; 4 &gt; vi7, ap_uint&lt; 4 &gt; vi8, ap_uint&lt; 4 &gt; vi9, ap_uint&lt; 4 &gt; vi10, ap_uint&lt; 4 &gt; vi11, ap_uint&lt; 4 &gt; vi12, ap_uint&lt; 4 &gt; vi13, ap_uint&lt; 4 &gt; vi14, ap_uint&lt; 4 &gt; vi15, ap_uint&lt; w &gt; m[16], ap_uint&lt; 4 &gt; mi0, ap_uint&lt; 4 &gt; mi1, ap_uint&lt; 4 &gt; mi2, ap_uint&lt; 4 &gt; mi3, ap_uint&lt; 4 &gt; mi4, ap_uint&lt; 4 &gt; mi5, ap_uint&lt; 4 &gt; mi6, ap_uint&lt; 4 &gt; mi7)</argsstring>
        <name>halfMixing</name>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>v</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi0</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi1</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi2</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi3</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi4</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi5</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi6</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi7</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi8</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi9</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi10</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi11</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi12</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi13</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi14</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>vi15</declname>
        </param>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>m</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>mi0</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>mi1</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>mi2</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>mi3</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>mi4</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>mi5</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>mi6</declname>
        </param>
        <param>
          <type>ap_uint&lt; 4 &gt;</type>
          <declname>mi7</declname>
        </param>
        <briefdescription>
<para>Mixing 2 halves for unroll purpose. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Bit</parametername>
</parameternamelist>
<parameterdescription>
<para>width of the words, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi0</parametername>
</parameternamelist>
<parameterdescription>
<para>The 1st index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi1</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2nd index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi2</parametername>
</parameternamelist>
<parameterdescription>
<para>The 3rd index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi3</parametername>
</parameternamelist>
<parameterdescription>
<para>The 4th index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi4</parametername>
</parameternamelist>
<parameterdescription>
<para>The 5th index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi5</parametername>
</parameternamelist>
<parameterdescription>
<para>The 6th index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi6</parametername>
</parameternamelist>
<parameterdescription>
<para>The 7th index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi7</parametername>
</parameternamelist>
<parameterdescription>
<para>The 8th index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi8</parametername>
</parameternamelist>
<parameterdescription>
<para>The 9th index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi9</parametername>
</parameternamelist>
<parameterdescription>
<para>The 10th index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi10</parametername>
</parameternamelist>
<parameterdescription>
<para>The 11th index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi11</parametername>
</parameternamelist>
<parameterdescription>
<para>The 12th index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi12</parametername>
</parameternamelist>
<parameterdescription>
<para>The 13th index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi13</parametername>
</parameternamelist>
<parameterdescription>
<para>The 14th index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi14</parametername>
</parameternamelist>
<parameterdescription>
<para>The 15th index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi15</parametername>
</parameternamelist>
<parameterdescription>
<para>The 16th index for working vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Message vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mi0</parametername>
</parameternamelist>
<parameterdescription>
<para>The 1st index for message vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mi1</parametername>
</parameternamelist>
<parameterdescription>
<para>The 2nd index for message vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mi2</parametername>
</parameternamelist>
<parameterdescription>
<para>The 3rd index for message vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mi3</parametername>
</parameternamelist>
<parameterdescription>
<para>The 4th index for message vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mi4</parametername>
</parameternamelist>
<parameterdescription>
<para>The 5th index for message vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mi5</parametername>
</parameternamelist>
<parameterdescription>
<para>The 6th index for message vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mi6</parametername>
</parameternamelist>
<parameterdescription>
<para>The 7th index for message vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mi7</parametername>
</parameternamelist>
<parameterdescription>
<para>The 8th index for message vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/blake2b.hpp" line="376" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/blake2b.hpp" bodystart="376" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ac308d30cef1463409f9f72d078f55c1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
            <defval>64</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>round</declname>
            <defname>round</defname>
            <defval>12</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::Compress</definition>
        <argsstring>(ap_uint&lt; w &gt; h[8], ap_uint&lt; w &gt; blake2b_iv[8], ap_uint&lt; w &gt; m[16], ap_uint&lt; 2 *w &gt; t, bool last)</argsstring>
        <name>Compress</name>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>h</declname>
          <array>[8]</array>
        </param>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>blake2b_iv</declname>
          <array>[8]</array>
        </param>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>m</declname>
          <array>[16]</array>
        </param>
        <param>
          <type>ap_uint&lt; 2 *w &gt;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>Compression function F as defined in standard. </para>        </briefdescription>
        <detaileddescription>
<para>The optimization goal of this function is for better performance. The algorithm reference is : &quot;The BLAKE2 Cryptographic Hash and Message Authentication Code (MAC)&quot;.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit width of the words, default value is 64. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>round</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rounds, 12 for BLAKE2b and 10 for BLAKE2s.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>State vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blake2b_iv</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message block vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset counter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Final block indicator. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/blake2b.hpp" line="433" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/blake2b.hpp" bodystart="433" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ad362b9b1b268f268c869fa907ffa19f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::blake2bDigest</definition>
        <argsstring>(hls::stream&lt; blockType &gt; &amp;blk_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;key_len_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;msg_len_strm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;out_len_strm, hls::stream&lt; ap_uint&lt; 8 *w &gt; &gt; &amp;digest_strm, hls::stream&lt; bool &gt; &amp;end_digest_strm)</argsstring>
        <name>blake2bDigest</name>
        <param>
          <type>hls::stream&lt; <ref refid="structxf_1_1security_1_1details_1_1block_type" kindref="compound">blockType</ref> &gt; &amp;</type>
          <declname>blk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>key_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>msg_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>out_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *w &gt; &gt; &amp;</type>
          <declname>digest_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_digest_strm</declname>
        </param>
        <briefdescription>
<para>The implementation of the digest prcoess of BLAKE2. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The BLAKE2 Cryptographic Hash and Message Authentication Code (MAC)&quot;. The optimization goal of this function is for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit width of the words, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The 512-bit hash block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of hash block for this message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for number of hash block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Key length in byte (0 &lt;= key_len &lt;= 64). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message length in byte (0 &lt;= msg_len &lt;= 2^128). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Result hash value length in byte (0 &lt; out_len &lt; 64). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The full digest stream (result is stored in the lower out_len bytes). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the result. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/blake2b.hpp" line="522" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/blake2b.hpp" bodystart="522" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1acd9e497ba44d2fcd6155391336e8e64e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesCbcEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;initialization_vector, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e)</argsstring>
        <name>aesCbcEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>initialization_vector</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <briefdescription>
<para>aesCbcEncrypt is CBC encryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialization_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" line="151" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" bodystart="151" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a7b5da858c0d8139e0264c6b1e3958e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesCbcDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IV_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e)</argsstring>
        <name>aesCbcDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IV_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <briefdescription>
<para>aesCbcDecrypt is CBC decryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialization_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" line="330" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" bodystart="330" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a0fdf7464d2112a88ceeebafe6ea8e578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_t</declname>
            <defname>_t</defname>
            <defval>16</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>_q</declname>
            <defname>_q</defname>
            <defval>8</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::formatting</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ADStrm, hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;nonceStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenPldStrm, hls::stream&lt; bool &gt; &amp;endLenStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;blockStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;outLenADStrm, hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;outNonceStrm)</argsstring>
        <name>formatting</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;</type>
          <declname>nonceStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>blockStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>outLenADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;</type>
          <declname>outNonceStrm</declname>
        </param>
        <briefdescription>
<para>Impletmentation of formatting function as specified in standard. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is: &quot;Recommendation for Block Cipher Modes of Operation: The CCM Mode for Authentication and
Confidentiality&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the MAC in byte, t is an element of {4, 6, 8, 10, 12, 14, 16}. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_q</parametername>
</parameternamelist>
<parameterdescription>
<para>Length in byte of the binary representation of the length of the payload in byte, q is an element of {2, 3, 4, 5, 6, 7, 8}.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated data stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonceStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonce stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of associated data in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of payload in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the length streams. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Block stream of the formatted input as specified in reference. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outLenADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pass on the length of associated data to CBC-MAC. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outNonceStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pass on the nonce to CTR. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" line="72" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" bodystart="72" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ae25f842c4fac08ac46ae09b34cb52f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_q</declname>
            <defname>_q</defname>
            <defval>8</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesCtrEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;payloadStrm, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;nonceStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenPldStrm, hls::stream&lt; bool &gt; &amp;endLenPldStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;outPayloadStrm, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;outCipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;S0Strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenCphStrm)</argsstring>
        <name>aesCtrEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>payloadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;</type>
          <declname>nonceStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endLenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>outPayloadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>outCipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>S0Strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenCphStrm</declname>
        </param>
        <briefdescription>
<para>Implementation of CTR encryption part in CCM. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is: &quot;Recommendation for Block Cipher Modes of Operation: The CCM Mode for Authentication and
Confidentiality&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_q</parametername>
</parameternamelist>
<parameterdescription>
<para>Length in byte of the binary representation of the length of the payload in byte, q is an element of {2, 3, 4, 5, 6, 7, 8}. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit-width of the cipher key, typically 128, 192, or 256 for AES.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payloadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonceStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonce stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of payload in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endLenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the payload length stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outPayloadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pass on the payload stream to CBC-MAC. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outCipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pass on the cipherkey to CBC-MAC. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S0Strm</parametername>
</parameternamelist>
<parameterdescription>
<para>First cipher used to generate the MAC. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenCphStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of cipher in byte. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" line="226" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" bodystart="226" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a016713797b99badb9b9432a40ec99c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_q</declname>
            <defname>_q</defname>
            <defval>8</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesCtrDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;payloadStrm, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;nonceStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenPldStrm, hls::stream&lt; bool &gt; &amp;endLenPldStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;outPayloadStrm, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;outCipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;S0Strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenCphStrm)</argsstring>
        <name>aesCtrDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>payloadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;</type>
          <declname>nonceStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endLenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>outPayloadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>outCipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>S0Strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenCphStrm</declname>
        </param>
        <briefdescription>
<para>Implementation of CTR decryption part in CCM. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is: &quot;Recommendation for Block Cipher Modes of Operation: The CCM Mode for Authentication and
Confidentiality&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_q</parametername>
</parameternamelist>
<parameterdescription>
<para>Length in byte of the binary representation of the length of the payload in byte, q is an element of {2, 3, 4, 5, 6, 7, 8}. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit-width of the cipher key, typically 128, 192, or 256 for AES.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payloadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonceStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonce stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of payload in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endLenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the payload length stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outPayloadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pass on the payload stream to CBC-MAC. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outCipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pass on the cipherkey to CBC-MAC. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S0Strm</parametername>
</parameternamelist>
<parameterdescription>
<para>First cipher used to generate the MAC. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenCphStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of cipher in byte. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" line="400" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" bodystart="400" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1af1d768278ab714ff7283448275a71156" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_t</declname>
            <defname>_t</defname>
            <defval>16</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::CBC_MAC</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;payloadStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenPldStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;blockStrm, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;S0Strm, hls::stream&lt; bool &gt; &amp;endLenStrm, hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;tagStrm, hls::stream&lt; bool &gt; &amp;endTagStrm)</argsstring>
        <name>CBC_MAC</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>payloadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>blockStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>S0Strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endTagStrm</declname>
        </param>
        <briefdescription>
<para>Impletmentation of CBC-MAC in CCM. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is: &quot;Recommendation for Block Cipher Modes of Operation: The CCM Mode for Authentication and
Confidentiality&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the MAC in byte, t is an element of {4, 6, 8, 10, 12, 14, 16}. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit-width of the cipher key, typically 128, 192, or 256 for AES.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payloadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of associated data in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of payload in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Block stream of the formatted input as specified in reference. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key, typically 128, 192, or 256 for AES. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S0Strm</parametername>
</parameternamelist>
<parameterdescription>
<para>First cipher used to generate the MAC. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the length streams. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The MAC. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endTagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the MAC stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" line="580" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" bodystart="580" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a61034df6ae150d9438dc5de666ab3f20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_width</declname>
            <defname>_width</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::dupStrm</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; _width &gt; &gt; &amp;inStrm, hls::stream&lt; bool &gt; &amp;endInStrm, hls::stream&lt; ap_uint&lt; _width &gt; &gt; &amp;out1Strm, hls::stream&lt; bool &gt; &amp;endOut1Strm, hls::stream&lt; ap_uint&lt; _width &gt; &gt; &amp;out2Strm, hls::stream&lt; bool &gt; &amp;endOut2Strm, hls::stream&lt; ap_uint&lt; _width &gt; &gt; &amp;out3Strm, hls::stream&lt; bool &gt; &amp;endOut3Strm)</argsstring>
        <name>dupStrm</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _width &gt; &gt; &amp;</type>
          <declname>inStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endInStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _width &gt; &gt; &amp;</type>
          <declname>out1Strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endOut1Strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _width &gt; &gt; &amp;</type>
          <declname>out2Strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endOut2Strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _width &gt; &gt; &amp;</type>
          <declname>out3Strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endOut3Strm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" line="796" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" bodystart="796" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a88f49bebbe401cc73a6b42570c30bc8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_t</declname>
            <defname>_t</defname>
            <defval>16</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>_q</declname>
            <defname>_q</defname>
            <defval>8</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesCcmEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;payloadStrm, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;nonceStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenPldStrm, hls::stream&lt; bool &gt; &amp;endLenStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenCphStrm, hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;tagStrm, hls::stream&lt; bool &gt; &amp;endTagStrm)</argsstring>
        <name>aesCcmEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>payloadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;</type>
          <declname>nonceStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenCphStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endTagStrm</declname>
        </param>
        <briefdescription>
<para>aesCcmEncrypt is CCM encryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is: &quot;Recommendation for Block Cipher Modes of Operation: The CCM Mode for Authentication and
Confidentiality&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the MAC in byte, t is an element of {4, 6, 8, 10, 12, 14, 16}. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_q</parametername>
</parameternamelist>
<parameterdescription>
<para>Length in byte of the binary representation of the length of the payload in byte, q is an element of {2, 3, 4, 5, 6, 7, 8}. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payloadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonceStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonce stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated data stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of associated data in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of payload in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the length streams. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenCphStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of cipher in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The MAC stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endTagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the MAC stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" line="861" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" bodystart="861" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a7896c0e187cddeecf323260383ebe704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_t</declname>
            <defname>_t</defname>
            <defval>16</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>_q</declname>
            <defname>_q</defname>
            <defval>8</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesCcmDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;payloadStrm, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;nonceStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenPldStrm, hls::stream&lt; bool &gt; &amp;endLenStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenCphStrm, hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;tagStrm, hls::stream&lt; bool &gt; &amp;endTagStrm)</argsstring>
        <name>aesCcmDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>payloadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;</type>
          <declname>nonceStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenCphStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endTagStrm</declname>
        </param>
        <briefdescription>
<para>aesCcmDecrypt is CCM decryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is: &quot;Recommendation for Block Cipher Modes of Operation: The CCM Mode for Authentication and
Confidentiality&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the MAC in byte, t is an element of {4, 6, 8, 10, 12, 14, 16}. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_q</parametername>
</parameternamelist>
<parameterdescription>
<para>Length in byte of the binary representation of the length of the payload in byte, q is an element of {2, 3, 4, 5, 6, 7, 8}. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payloadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonceStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonce stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated data stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of associated data in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of payload in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the length streams. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenCphStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of cipher in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The MAC stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endTagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the MAC stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" line="961" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" bodystart="961" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a3c3cf684300ca636dd40aabe8ddb1412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesCfb1Encrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;initialization_vector, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e)</argsstring>
        <name>aesCfb1Encrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>initialization_vector</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <briefdescription>
<para>aesCfb1Encrypt is CFB1 encryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialization_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="66" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="66" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a551420cf3d3a1f6cac06ef3f34d8ed80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesCfb1Decrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IV_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e)</argsstring>
        <name>aesCfb1Decrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IV_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <briefdescription>
<para>aesCfb1Decrypt is CFB1 decryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IV_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="218" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="218" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a195f42f9320e96043d277575bbbafc16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesCfb8Encrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;initialization_vector, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e)</argsstring>
        <name>aesCfb8Encrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>initialization_vector</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <briefdescription>
<para>aesCfb8Encrypt is CFB8 encryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialization_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="370" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="370" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a09dd351257531100a67d8d7ea0f9291b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesCfb8Decrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IV_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e)</argsstring>
        <name>aesCfb8Decrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IV_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <briefdescription>
<para>aesCfb8Decrypt is CFB8 decryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IV_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="484" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="484" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a35e8f3407d053b1b6c02c035dd8c42b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesCfb128Encrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;initialization_vector, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e)</argsstring>
        <name>aesCfb128Encrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>initialization_vector</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <briefdescription>
<para>aesCfb128Encrypt is CFB128 encryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialization_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="599" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="599" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1aedeed8606323e776e455a276b7ce6a04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesCfb128Decrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IV_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e)</argsstring>
        <name>aesCfb128Decrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IV_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <briefdescription>
<para>aesCfb128Decrypt is CFB128 decryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IV_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="697" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="697" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ac3c594a08d3625a5547c750ccc928c7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xf::security::details::chachaEncrpt</definition>
        <argsstring>(hls::stream&lt; blockTypeChacha &gt; &amp;stateStrm, hls::stream&lt; blockTypeChacha &gt; &amp;packPlainStrm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;numPackPlainStrm, hls::stream&lt; bool &gt; &amp;ePackPlainStrm, hls::stream&lt; blockTypeChacha &gt; &amp;packCipherStrm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;numPackCipherStrm, hls::stream&lt; bool &gt; &amp;ePackCipherStrm)</argsstring>
        <name>chachaEncrpt</name>
        <param>
          <type>hls::stream&lt; <ref refid="namespacexf_1_1security_1_1details_1a07222f2e1eeb318273a4b22a8c32b3dc" kindref="member">blockTypeChacha</ref> &gt; &amp;</type>
          <declname>stateStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; <ref refid="namespacexf_1_1security_1_1details_1a07222f2e1eeb318273a4b22a8c32b3dc" kindref="member">blockTypeChacha</ref> &gt; &amp;</type>
          <declname>packPlainStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>numPackPlainStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ePackPlainStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; <ref refid="namespacexf_1_1security_1_1details_1a07222f2e1eeb318273a4b22a8c32b3dc" kindref="member">blockTypeChacha</ref> &gt; &amp;</type>
          <declname>packCipherStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>numPackCipherStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ePackCipherStrm</declname>
        </param>
        <briefdescription>
<para>chachaEncrpt encrpyts the plain text. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input state stream only once </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packPlainStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input plain text stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numPackPlainStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of effective bytes in each packed data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ePackPlainStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of packPlainStrm</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packCipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output cipher stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numPackCipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of effective bytes in each packed data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ePackCipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of packCipherStrm </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/chacha20.hpp" line="70" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/chacha20.hpp" bodystart="70" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ae0a3595212924936fc38a59b16eaec43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xf::security::details::generateBlock</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;keyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;counterNonceStrm, hls::stream&lt; blockTypeChacha &gt; &amp;stateStrm)</argsstring>
        <name>generateBlock</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>keyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>counterNonceStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; <ref refid="namespacexf_1_1security_1_1details_1a07222f2e1eeb318273a4b22a8c32b3dc" kindref="member">blockTypeChacha</ref> &gt; &amp;</type>
          <declname>stateStrm</declname>
        </param>
        <briefdescription>
<para>generateBlock generates the state matrix from initial key and counter. state matrix: s[0] s[1] s[2] s[3] s[4] s[5] s[6] s[7] s[8] s[9] s[10] s[11] s[12] s[13] s[14] s[15] </para>        </briefdescription>
        <detaileddescription>
<para>the layout of the data from counteStrm 0-31 bit: counter s[12] 32-63 bit: nonce1 s[13] 64-95 bit: nonce2 s[14] 96-127 bit: nonce3 s[15] <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>initial key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>counterNonceStm</parametername>
</parameternamelist>
<parameterdescription>
<para>initial counter and nonce </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output state stream </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/chacha20.hpp" line="155" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/chacha20.hpp" bodystart="155" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a21342d4b6c28b0ee8b541b430c89ed34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xf::security::details::packMsg</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;plainStrm, hls::stream&lt; bool &gt; &amp;ePlainStrm, hls::stream&lt; blockTypeChacha &gt; &amp;packPlainStrm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;numPackPlainStrm, hls::stream&lt; bool &gt; &amp;ePackPlainStrm)</argsstring>
        <name>packMsg</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>plainStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ePlainStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; <ref refid="namespacexf_1_1security_1_1details_1a07222f2e1eeb318273a4b22a8c32b3dc" kindref="member">blockTypeChacha</ref> &gt; &amp;</type>
          <declname>packPlainStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>numPackPlainStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ePackPlainStrm</declname>
        </param>
        <briefdescription>
<para>packMsg converts a few of bytes to a big width data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plainStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input stream with byte </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ePlainStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>end of plainStrm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packPlainStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output big width stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numPackPlainStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of effective bytes in each packed data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ePackPlainStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of packPlainStrm </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/chacha20.hpp" line="200" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/chacha20.hpp" bodystart="200" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a1c2da864d10e25d1bfcf7a64195fca09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xf::security::details::convert2Byte</definition>
        <argsstring>(hls::stream&lt; blockTypeChacha &gt; &amp;packStrm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;numPackStrm, hls::stream&lt; bool &gt; &amp;ePackStrm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;byteStrm, hls::stream&lt; bool &gt; &amp;eByteStrm)</argsstring>
        <name>convert2Byte</name>
        <param>
          <type>hls::stream&lt; <ref refid="namespacexf_1_1security_1_1details_1a07222f2e1eeb318273a4b22a8c32b3dc" kindref="member">blockTypeChacha</ref> &gt; &amp;</type>
          <declname>packStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>numPackStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ePackStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>byteStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eByteStrm</declname>
        </param>
        <briefdescription>
<para>convert2Byte converts big width data to a few of bytes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>a big width stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numPackStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>each element contains the number of effective bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ePackStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of packStrm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byteStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output byte stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eByteStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of byteStrm </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/chacha20.hpp" line="237" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/chacha20.hpp" bodystart="237" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a3f1951467a9ff46a223c77ccc80b31d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xf::security::details::chacha20Imp</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;keyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;counterNonceStrm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;plainStrm, hls::stream&lt; bool &gt; &amp;ePlainStrm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;cipherStrm, hls::stream&lt; bool &gt; &amp;eCipherStrm)</argsstring>
        <name>chacha20Imp</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>keyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>counterNonceStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>plainStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ePlainStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>cipherStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eCipherStrm</declname>
        </param>
        <briefdescription>
<para>chacha20 is a function for stream ciphering </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>initail key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>counterNonceStm</parametername>
</parameternamelist>
<parameterdescription>
<para>initial counter and nonce </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plainStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input plain text to be encrypted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ePlainStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of plainStrm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output encrypted text </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eCipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of cipherStrm </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/chacha20.hpp" line="268" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/chacha20.hpp" bodystart="268" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ae07ad3b9e18d8749754e7b1914711c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesCtrEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;initialization_vector, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e)</argsstring>
        <name>aesCtrEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>initialization_vector</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <briefdescription>
<para>aesCtrEncrypt is CTR encryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialization_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" line="64" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" bodystart="64" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a9ab35ac8a3b4dcb67c6daded1181d1c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesCtrDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IV_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e)</argsstring>
        <name>aesCtrDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IV_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <briefdescription>
<para>aesCtrDecrypt is CTR decryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IV_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" line="192" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" bodystart="192" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a3831c1bb191a72d327fbb1d77f72abc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesEcbEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e)</argsstring>
        <name>aesEcbEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <briefdescription>
<para>aesEcbEncrypt is ECB encryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" line="64" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" bodystart="64" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ae56d1f897ebf63e46eef3c145b5b2fb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesEcbDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e)</argsstring>
        <name>aesEcbDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <briefdescription>
<para>aesEcbDecrypt is ECB decryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" line="147" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" bodystart="147" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a2ac7ab0c074c32d0c15646d16e6b0e40" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void xf::security::details::ciphertext_gen</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;IV_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;H_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;E_K_Y0_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e)</argsstring>
        <name>ciphertext_gen</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;</type>
          <declname>IV_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>H_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>E_K_Y0_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" line="47" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" bodystart="47" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a2fb785565b7d0a2ee757f9aed8aea7a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::plaintext_gen</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;IV_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;H_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;E_K_Y0_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e)</argsstring>
        <name>plaintext_gen</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;</type>
          <declname>IV_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>H_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>E_K_Y0_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" line="223" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" bodystart="223" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a789e24a5e1d927591e37f9b343bd5d8e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::GF128_mult</definition>
        <argsstring>(ap_uint&lt; 128 &gt; X, ap_uint&lt; 128 &gt; Y, ap_uint&lt; 128 &gt; &amp;Z)</argsstring>
        <name>GF128_mult</name>
        <param>
          <type>ap_uint&lt; 128 &gt;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>ap_uint&lt; 128 &gt;</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>ap_uint&lt; 128 &gt; &amp;</type>
          <declname>Z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" line="398" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" bodystart="398" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a4ca83180265cef498e7cde9026e01803" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::tag_gen</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;AAD_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;H_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;E_K_Y0_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;tag_strm)</argsstring>
        <name>tag_gen</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>AAD_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>H_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>E_K_Y0_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>tag_strm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" line="491" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" bodystart="491" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1af0cac68929f3e774d210efdc3a7abe7a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::dup_strm</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;in_strm, hls::stream&lt; bool &gt; &amp;in_e_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;out1_strm, hls::stream&lt; bool &gt; &amp;out1_e_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;out2_strm, hls::stream&lt; bool &gt; &amp;out2_e_strm)</argsstring>
        <name>dup_strm</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>in_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>in_e_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>out1_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>out1_e_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>out2_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>out2_e_strm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" line="602" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" bodystart="602" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a250e87ace03ba32b464f52293c94f630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesGcmEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;IV_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;AAD_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;tag_strm)</argsstring>
        <name>aesGcmEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;</type>
          <declname>IV_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>AAD_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>tag_strm</declname>
        </param>
        <briefdescription>
<para>aesGcmEncrypt is GCM encryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IV_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AAD_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional authenticated data for calculating the tag, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The data tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" line="654" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" bodystart="654" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1af2ababf0307ade760283de330b6b1694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesGcmDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;IV_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;AAD_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;tag_strm)</argsstring>
        <name>aesGcmDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;</type>
          <declname>IV_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>AAD_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>tag_strm</declname>
        </param>
        <briefdescription>
<para>aesGcmEncrypt is GCM decryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IV_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AAD_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional authenticated data for calculating the tag, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The data tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" line="734" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" bodystart="734" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a809f09a8ab840cec4c1da2980ddb992c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::generateEKY0</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;keyStrm, hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;ivStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;aadStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;hStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ekyStrm)</argsstring>
        <name>generateEKY0</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>keyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;</type>
          <declname>ivStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>aadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>hStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ekyStrm</declname>
        </param>
        <briefdescription>
<para>generateEKY0 generates H and E_K_Y0 based on AES-256. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input key used in encryption, 256 bits for AES-256. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ivStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output 128 bits zero. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>generate H by encrypting 128-bit 0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ekyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>generate E_K_Y0 by encrypting 128-bit data including IV. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gmac.hpp" line="53" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gmac.hpp" bodystart="53" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a97de6aea5f185b3bbc1110b8d44f5d66" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::preProcessing</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 32 &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; blockType &gt; &amp;blk_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm)</argsstring>
        <name>preProcessing</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 32 &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; <ref refid="structxf_1_1security_1_1details_1_1block_type" kindref="compound">blockType</ref> &gt; &amp;</type>
          <declname>blk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <briefdescription>
<para>Generate 512-bit processing blocks by padding and appending (pipeline). </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD4 Message-Digest Algorithm&quot;. The optimization goal of this function is to yield a 512-bit block per cycle.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The 512-bit hash block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of hash block for this message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for number of hash block. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" line="66" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" bodystart="66" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a4ed47aeb7bbce0e05cd022266968a401" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ap_uint&lt; 32 &gt;</type>
        <definition>static ap_uint&lt;32&gt; xf::security::details::F</definition>
        <argsstring>(ap_uint&lt; 32 &gt; x, ap_uint&lt; 32 &gt; y, ap_uint&lt; 32 &gt; z)</argsstring>
        <name>F</name>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Perform function F as defined in standard. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD4 Message-Digest Algorithm&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The first 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The third 32-bit operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" line="265" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" bodystart="265" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ab39f5ae51b9e383d3eea44b1b92ac7fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ap_uint&lt; 32 &gt;</type>
        <definition>static ap_uint&lt;32&gt; xf::security::details::G</definition>
        <argsstring>(ap_uint&lt; 32 &gt; x, ap_uint&lt; 32 &gt; y, ap_uint&lt; 32 &gt; z)</argsstring>
        <name>G</name>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Perform function G as defined in standard. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD4 Message-Digest Algorithm&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The first 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The third 32-bit operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" line="287" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" bodystart="287" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a2be905306e2c2b33c4e425a035788002" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ap_uint&lt; 32 &gt;</type>
        <definition>static ap_uint&lt;32&gt; xf::security::details::H</definition>
        <argsstring>(ap_uint&lt; 32 &gt; x, ap_uint&lt; 32 &gt; y, ap_uint&lt; 32 &gt; z)</argsstring>
        <name>H</name>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Perform function H as defined in standard. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD4 Message-Digest Algorithm&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The first 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The third 32-bit operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" line="309" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" bodystart="309" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a970de8c8ba246fb16eeeb7b476744395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>ap_uint&lt; w &gt;</type>
        <definition>ap_uint&lt; w &gt; xf::security::details::ROTL</definition>
        <argsstring>(unsigned int n, ap_uint&lt; w &gt; x)</argsstring>
        <name>ROTL</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>The implementation of rotate left (circular left shift) operation. </para>        </briefdescription>
        <detaileddescription>
<para>The implementation of rotate left (circular left shift) operation. The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012.</para><para>The algorithm reference is : &quot;The MD4 Message-Digest Algorithm&quot;.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, default value is 32.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits for input x to be shifted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Word to be rotated.</para></parameterdescription>
</parameteritem>
</parameterlist>
The algorithm reference is : &quot;The MD5 Message-Digest Algorithm&quot;.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, default value is 32.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits for input x to be shifted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Word to be rotated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, default value is 32.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits for input x to be shifted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Word to be rotated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" line="334" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" bodystart="334" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a20a9f7d47224cf6b98632f198085c3b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::MD4Round1</definition>
        <argsstring>(ap_uint&lt; 32 &gt; &amp;a, ap_uint&lt; 32 &gt; b, ap_uint&lt; 32 &gt; c, ap_uint&lt; 32 &gt; d, ap_uint&lt; 32 &gt; X, unsigned int s)</argsstring>
        <name>MD4Round1</name>
        <param>
          <type>ap_uint&lt; 32 &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>The implementation of the function defined in round 1. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD4 Message-Digest Algorithm&quot;. The operation is defined as : a = (a + F(b, c, d) + X[k]) &lt;&lt;&lt; s.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The third 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The specific message word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to be shifted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" line="360" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" bodystart="360" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ae85105f732c50c28a5b798ca05218488" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::MD4Round2</definition>
        <argsstring>(ap_uint&lt; 32 &gt; &amp;a, ap_uint&lt; 32 &gt; b, ap_uint&lt; 32 &gt; c, ap_uint&lt; 32 &gt; d, ap_uint&lt; 32 &gt; X, unsigned int s)</argsstring>
        <name>MD4Round2</name>
        <param>
          <type>ap_uint&lt; 32 &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>The implementation of the function defined in round 2. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD4 Message-Digest Algorithm&quot;. The operation is defined as : a = (a + G(b, c, d) + X[k] + 0x5a827999) &lt;&lt;&lt; s</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The third 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The specific message word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to be shifted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" line="391" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" bodystart="391" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a028eb29a040ea578d325df2419cb1f86" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::MD4Round3</definition>
        <argsstring>(ap_uint&lt; 32 &gt; &amp;a, ap_uint&lt; 32 &gt; b, ap_uint&lt; 32 &gt; c, ap_uint&lt; 32 &gt; d, ap_uint&lt; 32 &gt; X, unsigned int s)</argsstring>
        <name>MD4Round3</name>
        <param>
          <type>ap_uint&lt; 32 &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>The implementation of the function defined in round 3. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD4 Message-Digest Algorithm&quot;. The operation is defined as : a = (a + H(b, c, d) + X[k] + 0x6ed9eba1) &lt;&lt;&lt; s</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The third 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The specific message word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to be shifted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" line="422" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" bodystart="422" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a2adb2bc1599c7782927652ce2cb15001" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::MD4Digest</definition>
        <argsstring>(hls::stream&lt; blockType &gt; &amp;blk_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;digest_strm, hls::stream&lt; bool &gt; &amp;end_digest_strm)</argsstring>
        <name>MD4Digest</name>
        <param>
          <type>hls::stream&lt; <ref refid="structxf_1_1security_1_1details_1_1block_type" kindref="compound">blockType</ref> &gt; &amp;</type>
          <declname>blk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>digest_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_digest_strm</declname>
        </param>
        <briefdescription>
<para>The implementation of the digest part of MD4. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD4 Message-Digest Algorithm&quot;. The optimization goal of this function is for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The 512-bit hash block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of hash block for this message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for number of hash block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The digest (fingerprint) stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the result. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" line="451" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" bodystart="451" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a97de6aea5f185b3bbc1110b8d44f5d66" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::preProcessing</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 32 &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; blockType &gt; &amp;blk_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm)</argsstring>
        <name>preProcessing</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 32 &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; <ref refid="structxf_1_1security_1_1details_1_1block_type" kindref="compound">blockType</ref> &gt; &amp;</type>
          <declname>blk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <briefdescription>
<para>Generate 512-bit processing blocks by padding and appending (pipeline). </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD5 Message-Digest Algorithm&quot;. The optimization goal of this function is to yield a 512-bit block per cycle.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The 512-bit hash block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of hash block for this message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for number of hash block. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" line="65" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" bodystart="65" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a4ed47aeb7bbce0e05cd022266968a401" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ap_uint&lt; 32 &gt;</type>
        <definition>static ap_uint&lt;32&gt; xf::security::details::F</definition>
        <argsstring>(ap_uint&lt; 32 &gt; x, ap_uint&lt; 32 &gt; y, ap_uint&lt; 32 &gt; z)</argsstring>
        <name>F</name>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Perform function F as defined in standard. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD5 Message-Digest Algorithm&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The first 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The third 32-bit operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" line="264" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" bodystart="264" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ab39f5ae51b9e383d3eea44b1b92ac7fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ap_uint&lt; 32 &gt;</type>
        <definition>static ap_uint&lt;32&gt; xf::security::details::G</definition>
        <argsstring>(ap_uint&lt; 32 &gt; x, ap_uint&lt; 32 &gt; y, ap_uint&lt; 32 &gt; z)</argsstring>
        <name>G</name>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Perform function G as defined in standard. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD5 Message-Digest Algorithm&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The first 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The third 32-bit operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" line="286" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" bodystart="286" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a2be905306e2c2b33c4e425a035788002" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ap_uint&lt; 32 &gt;</type>
        <definition>static ap_uint&lt;32&gt; xf::security::details::H</definition>
        <argsstring>(ap_uint&lt; 32 &gt; x, ap_uint&lt; 32 &gt; y, ap_uint&lt; 32 &gt; z)</argsstring>
        <name>H</name>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Perform function H as defined in standard. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD5 Message-Digest Algorithm&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The first 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The third 32-bit operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" line="308" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" bodystart="308" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1acc666b2bf029f8600ca8338b9ade5308" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ap_uint&lt; 32 &gt;</type>
        <definition>static ap_uint&lt;32&gt; xf::security::details::I</definition>
        <argsstring>(ap_uint&lt; 32 &gt; x, ap_uint&lt; 32 &gt; y, ap_uint&lt; 32 &gt; z)</argsstring>
        <name>I</name>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Perform function I as defined in standard. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD5 Message-Digest Algorithm&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The first 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The third 32-bit operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" line="330" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" bodystart="330" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a8aad0f87e53721246d15f69c62c5c952" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::MD5Round1</definition>
        <argsstring>(ap_uint&lt; 32 &gt; &amp;a, ap_uint&lt; 32 &gt; b, ap_uint&lt; 32 &gt; c, ap_uint&lt; 32 &gt; d, ap_uint&lt; 32 &gt; X, ap_uint&lt; 32 &gt; T, unsigned int s)</argsstring>
        <name>MD5Round1</name>
        <param>
          <type>ap_uint&lt; 32 &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>The implementation of the function defined in round 1. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD5 Message-Digest Algorithm&quot;. The operation is defined as : a = b + ((a + F(b, c, d) + X + T) &lt;&lt;&lt; s).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The third 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The specific message word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the specific sine value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to be shifted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" line="382" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" bodystart="382" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a5f8264d87fbbec143271cc46e8b1e373" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::MD5Round2</definition>
        <argsstring>(ap_uint&lt; 32 &gt; &amp;a, ap_uint&lt; 32 &gt; b, ap_uint&lt; 32 &gt; c, ap_uint&lt; 32 &gt; d, ap_uint&lt; 32 &gt; X, ap_uint&lt; 32 &gt; T, unsigned int s)</argsstring>
        <name>MD5Round2</name>
        <param>
          <type>ap_uint&lt; 32 &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>The implementation of the function defined in round 2. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD5 Message-Digest Algorithm&quot;. The operation is defined as : a = b + ((a + G(b, c, d) + X + T) &lt;&lt;&lt; s).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The third 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The specific message word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the specific sine value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to be shifted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" line="416" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" bodystart="416" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1aeb5496b145940ec18c416f43f7624c34" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::MD5Round3</definition>
        <argsstring>(ap_uint&lt; 32 &gt; &amp;a, ap_uint&lt; 32 &gt; b, ap_uint&lt; 32 &gt; c, ap_uint&lt; 32 &gt; d, ap_uint&lt; 32 &gt; X, ap_uint&lt; 32 &gt; T, unsigned int s)</argsstring>
        <name>MD5Round3</name>
        <param>
          <type>ap_uint&lt; 32 &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>The implementation of the function defined in round 3. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD5 Message-Digest Algorithm&quot;. The operation is defined as : a = b + ((a + H(b, c, d) + X + T) &lt;&lt;&lt; s).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The third 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The specific message word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the specific sine value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to be shifted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" line="450" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" bodystart="450" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a0a95ee6bf223865609af232afba27405" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::MD5Round4</definition>
        <argsstring>(ap_uint&lt; 32 &gt; &amp;a, ap_uint&lt; 32 &gt; b, ap_uint&lt; 32 &gt; c, ap_uint&lt; 32 &gt; d, ap_uint&lt; 32 &gt; X, ap_uint&lt; 32 &gt; T, unsigned int s)</argsstring>
        <name>MD5Round4</name>
        <param>
          <type>ap_uint&lt; 32 &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>ap_uint&lt; 32 &gt;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>The implementation of the function defined in round 4. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD5 Message-Digest Algorithm&quot;. The operation is defined as : a = b + ((a + I(b, c, d) + X + T) &lt;&lt;&lt; s).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The third 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth 32-bit operand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>X</parametername>
</parameternamelist>
<parameterdescription>
<para>The specific message word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the specific sine value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to be shifted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" line="484" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" bodystart="484" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a2ddf4cf6dc14376257ff7e17442672b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::MD5Digest</definition>
        <argsstring>(hls::stream&lt; blockType &gt; &amp;blk_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;digest_strm, hls::stream&lt; bool &gt; &amp;end_digest_strm)</argsstring>
        <name>MD5Digest</name>
        <param>
          <type>hls::stream&lt; <ref refid="structxf_1_1security_1_1details_1_1block_type" kindref="compound">blockType</ref> &gt; &amp;</type>
          <declname>blk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>digest_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_digest_strm</declname>
        </param>
        <briefdescription>
<para>The implementation of the digest part of MD5. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD5 Message-Digest Algorithm&quot;. The optimization goal of this function is for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The 512-bit hash block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of hash block for this message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for number of hash block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The digest (fingerprint) stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the result. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" line="515" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" bodystart="515" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1aca8cb55fbef31d35daa39bd6bdedc185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesOfbEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;initialization_vector, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e)</argsstring>
        <name>aesOfbEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>initialization_vector</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <briefdescription>
<para>aesOfbEncrypt is OFB encryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialization_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" line="65" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" bodystart="65" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ab8374ff37b115e73346542172406a128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesOfbDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext, hls::stream&lt; bool &gt; &amp;ciphertext_e, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IV_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext, hls::stream&lt; bool &gt; &amp;plaintext_e)</argsstring>
        <name>aesOfbDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IV_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e</declname>
        </param>
        <briefdescription>
<para>aesOfbDecrypt is OFB decryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IV_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" line="163" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" bodystart="163" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1aa287aa18e11ee5285976ae925caaf740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ap_uint&lt; 264 &gt;</type>
        <definition>ap_uint&lt;264&gt; xf::security::details::multOperator</definition>
        <argsstring>(ap_uint&lt; 136 &gt; A, ap_uint&lt; 128 &gt; B)</argsstring>
        <name>multOperator</name>
        <param>
          <type>ap_uint&lt; 136 &gt;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>ap_uint&lt; 128 &gt;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>The implementation of large bit-width multiplication, the result is A * B. The optimization goal of this function to improve timing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The input multiplicand. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The input multiplier. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The output product. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/poly1305.hpp" line="48" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/poly1305.hpp" bodystart="48" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1abc86cedbc06fa719ea3ec53bab724269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ap_uint&lt; 132 &gt;</type>
        <definition>ap_uint&lt;132&gt; xf::security::details::resOperator</definition>
        <argsstring>(ap_uint&lt; 264 &gt; A)</argsstring>
        <name>resOperator</name>
        <param>
          <type>ap_uint&lt; 264 &gt;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>The implementation of large bit-width Module Operation, the result is A % 2^130-5. The optimization goal of this function to improve timing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The input parameter. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The output result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/poly1305.hpp" line="95" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/poly1305.hpp" bodystart="95" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a71994c0f57c81f9c8ae279199f4dc19d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xf::security::details::poly1305Imp</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;keyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;payloadStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenPldStrm, hls::stream&lt; bool &gt; &amp;endLenStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;tagStrm)</argsstring>
        <name>poly1305Imp</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>keyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>payloadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <briefdescription>
<para>The implementation of poly1305. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>initail key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payloadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>For a massage, input block stream text, 128 bits per block, less than 128 bits, high padding 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of payload in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the length streams. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Return a 16-byte tag to to authenticate the message. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/poly1305.hpp" line="126" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/poly1305.hpp" bodystart="126" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1aafb581797dc3f702a969e22071e011aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::rc4Imp</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;keyStrm, hls::stream&lt; bool &gt; &amp;eKeyStrm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;plainStream, hls::stream&lt; bool &gt; &amp;ePlainStream, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;cipherStream, hls::stream&lt; bool &gt; &amp;eCipherStream)</argsstring>
        <name>rc4Imp</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>keyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eKeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>plainStream</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ePlainStream</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>cipherStream</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eCipherStream</declname>
        </param>
        <briefdescription>
<para>Rc_4 is the basic function for stream ciphering keyLength defined as the number of bytes in the key and can be in the range 1&lt;= keylength &lt;=256, typically between 5 and 16, corresponding to a key length of 40-128 bits. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>initail key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eKeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>end flag of keyStrm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input plain text to be encrypted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ePlaintStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of plaintStrm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output encrypted text </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eCipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of cipherStrm </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/rc4.hpp" line="52" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/rc4.hpp" bodystart="52" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a97de6aea5f185b3bbc1110b8d44f5d66" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::preProcessing</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 32 &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; blockType &gt; &amp;blk_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm)</argsstring>
        <name>preProcessing</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 32 &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; <ref refid="structxf_1_1security_1_1details_1_1block_type" kindref="compound">blockType</ref> &gt; &amp;</type>
          <declname>blk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <briefdescription>
<para>Generate 512-bit processing blocks by padding and appending (pipeline). </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. The optimization goal of this function is to yield a 512-bit block per cycle.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The 512-bit hash block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of hash block for this message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for number of hash block. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" line="66" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" bodystart="66" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1af680f3585034296cc68b7b5fdb54d5f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>ap_uint&lt; w &gt;</type>
        <definition>ap_uint&lt; w &gt; xf::security::details::Ch</definition>
        <argsstring>(ap_uint&lt; w &gt; x, ap_uint&lt; w &gt; y, ap_uint&lt; w &gt; z)</argsstring>
        <name>Ch</name>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>The implementation of Ch(x,y,z), the sequence of logical functions of SHA-1 where 0 &lt;= t &lt;= 19. The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. </para>        </briefdescription>
        <detaileddescription>
<para>The implementation of Ch(x,y,z). The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, y, and z, default value is 32.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The first w-bit input word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second w-bit input word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The third w-bit input word.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, y, and z, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The first w-bit input word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second w-bit input word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The third w-bit input word. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" line="300" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" bodystart="300" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ae8fcb30e1e894f23cbad08704d5641eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>ap_uint&lt; w &gt;</type>
        <definition>ap_uint&lt;w&gt; xf::security::details::Parity</definition>
        <argsstring>(ap_uint&lt; w &gt; x, ap_uint&lt; w &gt; y, ap_uint&lt; w &gt; z)</argsstring>
        <name>Parity</name>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>The implementation of Parity(x,y,z), the sequence of logical functions of SHA-1 where 20 &lt;= t &lt;= 39, and 60 &lt;= t &lt;= 79. The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, y, and z, default value is 32.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The first w-bit input word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second w-bit input word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The third w-bit input word. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" line="326" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" bodystart="326" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a969e741d6d91783e2aa91c7b48d0bb52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>ap_uint&lt; w &gt;</type>
        <definition>ap_uint&lt; w &gt; xf::security::details::Maj</definition>
        <argsstring>(ap_uint&lt; w &gt; x, ap_uint&lt; w &gt; y, ap_uint&lt; w &gt; z)</argsstring>
        <name>Maj</name>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>The implementation of Maj(x,y,z), the sequence of logical functions of SHA-1 where 40 &lt;= t &lt;= 59. The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. </para>        </briefdescription>
        <detaileddescription>
<para>The implementation of Maj(x,y,z). The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, y, and z, default value is 32.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The first w-bit input word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second w-bit input word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The third w-bit input word.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, y, and z, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The first w-bit input word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The second w-bit input word. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>The third w-bit input word. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" line="351" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" bodystart="351" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a0d462e4e7b61a5e2be4340f425921756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::dup_strm</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;in_strm, hls::stream&lt; bool &gt; &amp;in_e_strm, hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;out1_strm, hls::stream&lt; bool &gt; &amp;out1_e_strm, hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;out2_strm, hls::stream&lt; bool &gt; &amp;out2_e_strm)</argsstring>
        <name>dup_strm</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>in_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>in_e_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>out1_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>out1_e_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>out2_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>out2_e_strm</declname>
        </param>
        <briefdescription>
<para>Duplicate 1 input stream to 2 output streams. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of the streams.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input stream to be duplicated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_e_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of input stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out1_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The first output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out1_e_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of the first output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out2_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The second output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out2_e_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of the second output stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" line="378" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" bodystart="378" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a2e984dfcaee9d54662ccb5529d80a43e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::generateMsgSchedule</definition>
        <argsstring>(hls::stream&lt; blockType &gt; &amp;blk_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm, hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;w_strm)</argsstring>
        <name>generateMsgSchedule</name>
        <param>
          <type>hls::stream&lt; <ref refid="structxf_1_1security_1_1details_1_1block_type" kindref="compound">blockType</ref> &gt; &amp;</type>
          <declname>blk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>w_strm</declname>
        </param>
        <briefdescription>
<para>Generate message schedule W (80 words) in stream. The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of message schedule W which defined in the standard.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message block stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of message block stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for number of message block stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message schedule in stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" line="423" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" bodystart="423" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a76f31de65da1c8aaa1fdf113381ab3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::SHA1Digest</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;w_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm, hls::stream&lt; ap_uint&lt; 5 *w &gt; &gt; &amp;digest_strm, hls::stream&lt; bool &gt; &amp;end_digest_strm)</argsstring>
        <name>SHA1Digest</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>w_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 5 *w &gt; &gt; &amp;</type>
          <declname>digest_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_digest_strm</declname>
        </param>
        <briefdescription>
<para>This function performs the computation of the secure hash algorithm. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of each input message word, default value is 32.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message schedule stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of message block stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for number of message block stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output digest stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for output digest stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" line="490" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" bodystart="490" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ac15fc0fcf45caa45011a950816cf21d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xf::security::details::preProcessing</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 32 &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; SHA256Block &gt; &amp;blk_strm, hls::stream&lt; uint64_t &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm)</argsstring>
        <name>preProcessing</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 32 &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; <ref refid="structxf_1_1security_1_1details_1_1_s_h_a256_block" kindref="compound">SHA256Block</ref> &gt; &amp;</type>
          <declname>blk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; uint64_t &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <briefdescription>
<para>Generate 512bit processing blocks for SHA224/SHA256 (pipeline) with const width. The performance goal of this function is to yield a 512b block per cycle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>that flag to signal end of input. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the 512-bit hash block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of hash block for this message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>end flag for number of hash block. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>message length in byte.</para><para>message length in bit.</para><para>total number blocks to digest.</para><para>message block.</para><para>number of bytes not in blocks yet.</para><para>last block</para><para>last but 1 block.</para><para>last block. </para>        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" line="82" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" bodystart="82" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a50ff8f39a454ffcb6ff9b5f6c3f99e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xf::security::details::preProcessing</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; SHA256Block &gt; &amp;blk_strm, hls::stream&lt; uint64_t &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm)</argsstring>
        <name>preProcessing</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; <ref refid="structxf_1_1security_1_1details_1_1_s_h_a256_block" kindref="compound">SHA256Block</ref> &gt; &amp;</type>
          <declname>blk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; uint64_t &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <briefdescription>
<para>Generate 512bit processing blocks for SHA224/SHA256 (pipeline) with const width. The performance goal of this function is to yield a 512b block per cycle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>that flag to signal end of input. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the 512-bit hash block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of hash block for this message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>end flag for number of hash block. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>message length in byte.</para><para>message length in bit.</para><para>total number blocks to digest.</para><para>message block.</para><para>number of bytes not in blocks yet.</para><para>last block</para><para>last block. </para>        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" line="285" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" bodystart="285" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1af07f929189ad7b49b670e688681172b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xf::security::details::dup_strm</definition>
        <argsstring>(hls::stream&lt; uint64_t &gt; &amp;in_strm, hls::stream&lt; bool &gt; &amp;in_e_strm, hls::stream&lt; uint64_t &gt; &amp;out1_strm, hls::stream&lt; bool &gt; &amp;out1_e_strm, hls::stream&lt; uint64_t &gt; &amp;out2_strm, hls::stream&lt; bool &gt; &amp;out2_e_strm)</argsstring>
        <name>dup_strm</name>
        <param>
          <type>hls::stream&lt; uint64_t &gt; &amp;</type>
          <declname>in_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>in_e_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; uint64_t &gt; &amp;</type>
          <declname>out1_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>out1_e_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; uint64_t &gt; &amp;</type>
          <declname>out2_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>out2_e_strm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" line="498" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" bodystart="498" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1aadc7ac5db009149af8e764ff3f81e8d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void xf::security::details::generateMsgSchedule</definition>
        <argsstring>(hls::stream&lt; SHA256Block &gt; &amp;blk_strm, hls::stream&lt; uint64_t &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm, hls::stream&lt; uint32_t &gt; &amp;w_strm)</argsstring>
        <name>generateMsgSchedule</name>
        <param>
          <type>hls::stream&lt; <ref refid="structxf_1_1security_1_1details_1_1_s_h_a256_block" kindref="compound">SHA256Block</ref> &gt; &amp;</type>
          <declname>blk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; uint64_t &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; uint32_t &gt; &amp;</type>
          <declname>w_strm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>message schedule W, from message or </para>        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" line="523" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" bodystart="523" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1af66f36cfce4e837f4046ca508e8860af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void xf::security::details::sha256_iter</definition>
        <argsstring>(uint32_t &amp;a, uint32_t &amp;b, uint32_t &amp;c, uint32_t &amp;d, uint32_t &amp;e, uint32_t &amp;f, uint32_t &amp;g, uint32_t &amp;h, hls::stream&lt; uint32_t &gt; &amp;w_strm, uint32_t &amp;Kt, const uint32_t K[], short t)</argsstring>
        <name>sha256_iter</name>
        <param>
          <type>uint32_t &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>hls::stream&lt; uint32_t &gt; &amp;</type>
          <declname>w_strm</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>Kt</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>K</declname>
          <array>[]</array>
        </param>
        <param>
          <type>short</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>temporal variables </para>        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" line="565" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" bodystart="565" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a5d16559a5979466cbd93e7cdcc4a8da7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>h_width</declname>
            <defname>h_width</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::sha256Digest</definition>
        <argsstring>(hls::stream&lt; uint64_t &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm, hls::stream&lt; uint32_t &gt; &amp;w_strm, hls::stream&lt; ap_uint&lt; h_width &gt; &gt; &amp;hash_strm, hls::stream&lt; bool &gt; &amp;end_hash_strm)</argsstring>
        <name>sha256Digest</name>
        <param>
          <type>hls::stream&lt; uint64_t &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; uint32_t &gt; &amp;</type>
          <declname>w_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; h_width &gt; &gt; &amp;</type>
          <declname>hash_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_hash_strm</declname>
        </param>
        <briefdescription>
<para>Digest message blocks and emit final hash. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>h_width</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash width(type). </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>number of message block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>end flag for number of message block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash result stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_hash_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>end flag for hash result. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>constant K</para><para>total number blocks to digest.</para><para>internal states</para><para>working variables. </para>        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" line="610" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" bodystart="610" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a0b6eb399d9f28f5cd04d96c79c6de842" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>m_width</declname>
            <defname>m_width</defname>
          </param>
          <param>
            <type>int</type>
            <declname>h_width</declname>
            <defname>h_width</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::sha256_top</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; m_width &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; ap_uint&lt; h_width &gt; &gt; &amp;hash_strm, hls::stream&lt; bool &gt; &amp;end_hash_strm)</argsstring>
        <name>sha256_top</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; m_width &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; h_width &gt; &gt; &amp;</type>
          <declname>hash_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_hash_strm</declname>
        </param>
        <briefdescription>
<para>SHA-256/224 implementation top overload for ap_uint input. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>m_width</parametername>
</parameternamelist>
<parameterdescription>
<para>the input message stream width. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h_width</parametername>
</parameternamelist>
<parameterdescription>
<para>the output hash stream width. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the length message being hashed in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>end flag stream of input, one per message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the result. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_hash_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>end falg stream of output, one per hash. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>512-bit Block stream</para><para>number of Blocks, send per msg</para><para>end flag, send per msg.</para><para>W, 64 items for each block </para>        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" line="747" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" bodystart="747" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a7273b76146abec19a5883c69c2ba00d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
            <defval>64</defval>
          </param>
        </templateparamlist>
        <type>ap_uint&lt; w &gt;</type>
        <definition>ap_uint&lt;w&gt; xf::security::details::ROTL</definition>
        <argsstring>(ap_uint&lt; w &gt; x, unsigned int n)</argsstring>
        <name>ROTL</name>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>The implementation of rotate left (circular left shift) operation. The algorithm reference is : &quot;SHA-3 Standard : Permutation-Based Hash and Extendable-Output Functions&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits for input x to be shifted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Word to be rotated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" line="66" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" bodystart="66" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a19880785102ffc1fc684abca7cdd1f79" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::details::KECCAK_f</definition>
        <argsstring>(ap_uint&lt; 64 &gt; stateArray[25])</argsstring>
        <name>KECCAK_f</name>
        <param>
          <type>ap_uint&lt; 64 &gt;</type>
          <declname>stateArray</declname>
          <array>[25]</array>
        </param>
        <briefdescription>
<para>The implementation of KECCAK-f permutation function. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;SHA-3 Standard : Permutation-Based Hash and Extendable-Output Functions&quot;. The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateArray</parametername>
</parameternamelist>
<parameterdescription>
<para>The 5*5*64 state array defined in standard. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" line="87" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" bodystart="87" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1abfb4bb749ca38ce965b453a3146c23a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>hashLen</declname>
            <defname>hashLen</defname>
            <defval>32</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::sha3Digest</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;msgStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;msgLenStrm, hls::stream&lt; bool &gt; &amp;endMsgLenStrm, hls::stream&lt; ap_uint&lt; 8 *hashLen &gt; &gt; &amp;digestStrm, hls::stream&lt; bool &gt; &amp;endDigestStrm)</argsstring>
        <name>sha3Digest</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>msgStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>msgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endMsgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *hashLen &gt; &gt; &amp;</type>
          <declname>digestStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endDigestStrm</declname>
        </param>
        <briefdescription>
<para>This function performs the computation of SHA-3. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;SHA-3 Standard : Permutation-Based Hash and Extendable-Output Functions&quot;. The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>hashLen</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the digest in byte, default value is 32 (SHA3-256).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endMsgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output digest stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endDigestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for output digest stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" line="198" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" bodystart="198" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ad91823d93ae8c1b060f9e6c9e0ef21d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>hashLen</declname>
            <defname>hashLen</defname>
            <defval>16</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::shakeXOF</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;msgStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;msgLenStrm, hls::stream&lt; bool &gt; &amp;endMsgLenStrm, hls::stream&lt; ap_uint&lt; 8 *hashLen &gt; &gt; &amp;digestStrm, hls::stream&lt; bool &gt; &amp;endDigestStrm)</argsstring>
        <name>shakeXOF</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>msgStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>msgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endMsgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *hashLen &gt; &gt; &amp;</type>
          <declname>digestStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endDigestStrm</declname>
        </param>
        <briefdescription>
<para>This function performs the computation of SHAKE. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;SHA-3 Standard : Permutation-Based Hash and Extendable-Output Functions&quot;. The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>hashLen</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the digest in byte, default value is 16 (SHAKE-128).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endMsgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output digest stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endDigestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for output digest stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" line="373" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" bodystart="373" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1af17bff1339abe5a302bd1adbcec2789e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void xf::security::details::preProcessing</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; blockType &gt; &amp;blk_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm)</argsstring>
        <name>preProcessing</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; <ref refid="structxf_1_1security_1_1details_1_1block_type" kindref="compound">blockType</ref> &gt; &amp;</type>
          <declname>blk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <briefdescription>
<para>Generate 1024-bit processing blocks by padding and appending (pipeline). </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. The optimization goal of this function is to yield a 1024-bit block per cycle.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of each input message word, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The 1024-bit hash block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of hash block for this message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for number of hash block. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" line="69" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" bodystart="69" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1aefd2a0c9c01be79d85e2f6fad38db4c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>ap_uint&lt; w &gt;</type>
        <definition>ap_uint&lt;w&gt; xf::security::details::SHR</definition>
        <argsstring>(unsigned int n, ap_uint&lt; w &gt; x)</argsstring>
        <name>SHR</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>The implementation of right shift operation. The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits for input x to be shifted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Word to be shifted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" line="358" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" bodystart="358" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a1ab9416cc0d63e84a70e4030f328a9ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>ap_uint&lt; w &gt;</type>
        <definition>ap_uint&lt;w&gt; xf::security::details::ROTR</definition>
        <argsstring>(unsigned int n, ap_uint&lt; w &gt; x)</argsstring>
        <name>ROTR</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>The implementation of rotate right (circular right shift) operation. The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits for input x to be shifted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Word to be rotated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" line="381" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" bodystart="381" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ab28659aeaee00ecba95297be65f7ccc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>ap_uint&lt; w &gt;</type>
        <definition>ap_uint&lt;w&gt; xf::security::details::BSIG0</definition>
        <argsstring>(ap_uint&lt; w &gt; x)</argsstring>
        <name>BSIG0</name>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>The implementation of upper-case letter sigma 0. The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" line="453" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" bodystart="453" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1af75e535f0f90def371f9154e885cd10c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>ap_uint&lt; w &gt;</type>
        <definition>ap_uint&lt;w&gt; xf::security::details::BSIG1</definition>
        <argsstring>(ap_uint&lt; w &gt; x)</argsstring>
        <name>BSIG1</name>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>The implementation of upper-case letter sigma 1. The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" line="474" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" bodystart="474" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a5ba691c73c7faa20521a395fc30e8fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>ap_uint&lt; w &gt;</type>
        <definition>ap_uint&lt;w&gt; xf::security::details::SSIG0</definition>
        <argsstring>(ap_uint&lt; w &gt; x)</argsstring>
        <name>SSIG0</name>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>The implementation of lower-case letter sigma 0. The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" line="495" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" bodystart="495" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a8b8749a6355403e195b80e3ce8152ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>ap_uint&lt; w &gt;</type>
        <definition>ap_uint&lt;w&gt; xf::security::details::SSIG1</definition>
        <argsstring>(ap_uint&lt; w &gt; x)</argsstring>
        <name>SSIG1</name>
        <param>
          <type>ap_uint&lt; w &gt;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>The implementation of lower-case letter sigma 1. The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of input x, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The operand. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" line="516" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" bodystart="516" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1aa5fc18d5c7c89a0fe0f9be40bd602dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::generateMsgSchedule</definition>
        <argsstring>(hls::stream&lt; blockType &gt; &amp;blk_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm, hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;w_strm)</argsstring>
        <name>generateMsgSchedule</name>
        <param>
          <type>hls::stream&lt; <ref refid="structxf_1_1security_1_1details_1_1block_type" kindref="compound">blockType</ref> &gt; &amp;</type>
          <declname>blk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>w_strm</declname>
        </param>
        <briefdescription>
<para>Generate message schedule W (80 words) in stream. The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of message schedule W which defined in the standard, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message block stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of message block stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for number of message block stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message schedule in stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" line="586" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" bodystart="586" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a4b04850498c5dc7230eb42c82446551e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>hash_width</declname>
            <defname>hash_width</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::SHA512Digest</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;w_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;nblk_strm, hls::stream&lt; bool &gt; &amp;end_nblk_strm, hls::stream&lt; ap_uint&lt; hash_width &gt; &gt; &amp;digest_strm, hls::stream&lt; bool &gt; &amp;end_digest_strm)</argsstring>
        <name>SHA512Digest</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>w_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_nblk_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; hash_width &gt; &gt; &amp;</type>
          <declname>digest_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_digest_strm</declname>
        </param>
        <briefdescription>
<para>This function performs the computation of SHA-512. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of each input message word, default value is 64. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_width</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of hash width, which depends on specific algorithm.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message schedule stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of message block stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_nblk_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for number of message block stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output digest stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for output digest stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" line="652" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" bodystart="652" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ae25a12dc808b51fc3615ac718eb1c487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>hash_width</declname>
            <defname>hash_width</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::sha512Top</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; ap_uint&lt; hash_width &gt; &gt; &amp;digest_strm, hls::stream&lt; bool &gt; &amp;end_digest_strm)</argsstring>
        <name>sha512Top</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; hash_width &gt; &gt; &amp;</type>
          <declname>digest_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_digest_strm</declname>
        </param>
        <briefdescription>
<para>Top of SHA-512. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. The implementation dataflows the pre-processing part and message digest part.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of each input message word, default value is 64. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_width</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of hash width, which depends on specific algorithm.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output digest stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for output digest stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" line="848" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" bodystart="848" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1ada00480a7c97b1592a179debb327e2cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesXtsEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext_strm, hls::stream&lt; bool &gt; &amp;plaintext_e_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;len_strm, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;initialization_vector_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext_strm, hls::stream&lt; bool &gt; &amp;ciphertext_e_strm)</argsstring>
        <name>aesXtsEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>initialization_vector_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e_strm</declname>
        </param>
        <briefdescription>
<para>aesXtsEncrypt is XTS encryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;IEEE Standard for Cryptographic Protection of
Data on Block-Oriented Storage Devices&quot; The implementation is optimized for better performance in FPGA.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintext_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Total length of plaintext in bit, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input two cipher key used in encryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialization_vector_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/xts.hpp" line="67" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/xts.hpp" bodystart="67" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1details_1a945feb3736d61e840071433b6cb1829f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_keyWidth</declname>
            <defname>_keyWidth</defname>
            <defval>256</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::details::aesXtsDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertext_strm, hls::stream&lt; bool &gt; &amp;ciphertext_e_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;len_strm, hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;cipherkey_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;initialization_vector_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintext_strm, hls::stream&lt; bool &gt; &amp;plaintext_e_strm)</argsstring>
        <name>aesXtsDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertext_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ciphertext_e_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; _keyWidth &gt; &gt; &amp;</type>
          <declname>cipherkey_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>initialization_vector_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintext_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>plaintext_e_strm</declname>
        </param>
        <briefdescription>
<para>aesXtsDecrypt is XTS decryption mode with AES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;IEEE Standard for Cryptographic Protection of
Data on Block-Oriented Storage Devices&quot; The implementation is optimized for better performance in FPGA.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_keyWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit-width of the cipher key, which is 128, 192, or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertext_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext_e_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Total length of plaintext in bit, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input two cipher key used in decryption, x bits for AES-x. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialization_vector_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_e_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/xts.hpp" line="206" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/xts.hpp" bodystart="206" bodyend="326"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/asymmetric.hpp" line="25" column="1"/>
  </compounddef>
</doxygen>
