<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="namespacexf_1_1security" kind="namespace">
    <compoundname>xf::security</compoundname>
    <innerclass refid="classxf_1_1security_1_1aes_enc" prot="public">xf::security::aesEnc</innerclass>
    <innerclass refid="classxf_1_1security_1_1aes_enc_3_01256_01_4" prot="public">xf::security::aesEnc&lt; 256 &gt;</innerclass>
    <innerclass refid="classxf_1_1security_1_1aes_dec" prot="public">xf::security::aesDec</innerclass>
    <innerclass refid="classxf_1_1security_1_1aes_dec_3_01256_01_4" prot="public">xf::security::aesDec&lt; 256 &gt;</innerclass>
    <innernamespace refid="namespacexf_1_1security_1_1detail">xf::security::detail</innernamespace>
    <innernamespace refid="namespacexf_1_1security_1_1details">xf::security::details</innernamespace>
    <innernamespace refid="namespacexf_1_1security_1_1internal">xf::security::internal</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacexf_1_1security_1a1d60d0862b320446d55551927015864d" prot="public" static="no" mutable="no">
        <type>const ap_uint&lt; 8 &gt;</type>
        <definition>const ap_uint&lt;8&gt; xf::security::sbox_Rcon[2048]</definition>
        <argsstring>[2048]</argsstring>
        <name>sbox_Rcon</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="61" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacexf_1_1security_1a3eb01e133888e7a3ca358c23cd431cab" prot="public" static="no" mutable="no">
        <type>const ap_uint&lt; 16 &gt;</type>
        <definition>const ap_uint&lt;16&gt; xf::security::sbox_mix_col_1[256]</definition>
        <argsstring>[256]</argsstring>
        <name>sbox_mix_col_1</name>
        <initializer>= {
    0xc663, 0xf87c, 0xee77, 0xf67b, 0xfff2, 0xd66b, 0xde6f, 0x91c5, 0x6030, 0x201,  0xce67, 0x562b, 0xe7fe, 0xb5d7,
    0x4dab, 0xec76, 0x8fca, 0x1f82, 0x89c9, 0xfa7d, 0xeffa, 0xb259, 0x8e47, 0xfbf0, 0x41ad, 0xb3d4, 0x5fa2, 0x45af,
    0x239c, 0x53a4, 0xe472, 0x9bc0, 0x75b7, 0xe1fd, 0x3d93, 0x4c26, 0x6c36, 0x7e3f, 0xf5f7, 0x83cc, 0x6834, 0x51a5,
    0xd1e5, 0xf9f1, 0xe271, 0xabd8, 0x6231, 0x2a15, 0x0804, 0x95c7, 0x4623, 0x9dc3, 0x3018, 0x3796, 0x0a05, 0x2f9a,
    0x0e07, 0x2412, 0x1b80, 0xdfe2, 0xcdeb, 0x4e27, 0x7fb2, 0xea75, 0x1209, 0x1d83, 0x582c, 0x341a, 0x361b, 0xdc6e,
    0xb45a, 0x5ba0, 0xa452, 0x763b, 0xb7d6, 0x7db3, 0x5229, 0xdde3, 0x5e2f, 0x1384, 0xa653, 0xb9d1, 0x0,    0xc1ed,
    0x4020, 0xe3fc, 0x79b1, 0xb65b, 0xd46a, 0x8dcb, 0x67be, 0x7239, 0x944a, 0x984c, 0xb058, 0x85cf, 0xbbd0, 0xc5ef,
    0x4faa, 0xedfb, 0x8643, 0x9a4d, 0x6633, 0x1185, 0x8a45, 0xe9f9, 0x402,  0xfe7f, 0xa050, 0x783c, 0x259f, 0x4ba8,
    0xa251, 0x5da3, 0x8040, 0x58f,  0x3f92, 0x219d, 0x7038, 0xf1f5, 0x63bc, 0x77b6, 0xafda, 0x4221, 0x2010, 0xe5ff,
    0xfdf3, 0xbfd2, 0x81cd, 0x180c, 0x2613, 0xc3ec, 0xbe5f, 0x3597, 0x8844, 0x2e17, 0x93c4, 0x55a7, 0xfc7e, 0x7a3d,
    0xc864, 0xba5d, 0x3219, 0xe673, 0xc060, 0x1981, 0x9e4f, 0xa3dc, 0x4422, 0x542a, 0x3b90, 0x0b88, 0x8c46, 0xc7ee,
    0x6bb8, 0x2814, 0xa7de, 0xbc5e, 0x160b, 0xaddb, 0xdbe0, 0x6432, 0x743a, 0x140a, 0x9249, 0x0c06, 0x4824, 0xb85c,
    0x9fc2, 0xbdd3, 0x43ac, 0xc462, 0x3991, 0x3195, 0xd3e4, 0xf279, 0xd5e7, 0x8bc8, 0x6e37, 0xda6d, 0x18d,  0xb1d5,
    0x9c4e, 0x49a9, 0xd86c, 0xac56, 0xf3f4, 0xcfea, 0xca65, 0xf47a, 0x47ae, 0x1008, 0x6fba, 0xf078, 0x4a25, 0x5c2e,
    0x381c, 0x57a6, 0x73b4, 0x97c6, 0xcbe8, 0xa1dd, 0xe874, 0x3e1f, 0x964b, 0x61bd, 0x0d8b, 0x0f8a, 0xe070, 0x7c3e,
    0x71b5, 0xcc66, 0x9048, 0x603,  0xf7f6, 0x1c0e, 0xc261, 0x6a35, 0xae57, 0x69b9, 0x1786, 0x99c1, 0x3a1d, 0x279e,
    0xd9e1, 0xebf8, 0x2b98, 0x2211, 0xd269, 0xa9d9, 0x78e,  0x3394, 0x2d9b, 0x3c1e, 0x1587, 0xc9e9, 0x87ce, 0xaa55,
    0x5028, 0xa5df, 0x38c,  0x59a1, 0x0989, 0x1a0d, 0x65bf, 0xd7e6, 0x8442, 0xd068, 0x8241, 0x2999, 0x5a2d, 0x1e0f,
    0x7bb0, 0xa854, 0x6dbb, 0x2c16}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="171" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacexf_1_1security_1a6a20d9aab86218fdbca0e5025c70f0e7" prot="public" static="no" mutable="no">
        <type>const ap_uint&lt; 8 &gt;</type>
        <definition>const ap_uint&lt;8&gt; xf::security::isbox[256]</definition>
        <argsstring>[256]</argsstring>
        <name>isbox</name>
        <initializer>= {
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB, 0x7C, 0xE3, 0x39,
    0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB, 0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2,
    0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E, 0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76,
    0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25, 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC,
    0x5D, 0x65, 0xB6, 0x92, 0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D,
    0x84, 0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06, 0xD0, 0x2C,
    0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B, 0x3A, 0x91, 0x11, 0x41, 0x4F,
    0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73, 0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85,
    0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E, 0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62,
    0x0E, 0xAA, 0x18, 0xBE, 0x1B, 0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD,
    0x5A, 0xF4, 0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F, 0x60,
    0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF, 0xA0, 0xE0, 0x3B, 0x4D,
    0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6,
    0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="192" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacexf_1_1security_1a236569f97ff7cd7a2c3bc3d2569b7a00" prot="public" static="no" mutable="no">
        <type>const ap_uint&lt; 8 &gt;</type>
        <definition>const ap_uint&lt;8&gt; xf::security::sbox[2048]</definition>
        <argsstring>[2048]</argsstring>
        <name>sbox</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="208" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacexf_1_1security_1a2dcf4295949aa23af393274da8e7cc3f" prot="public" static="no" mutable="no">
        <type>const ap_uint&lt; 32 &gt;</type>
        <definition>const ap_uint&lt;32&gt; xf::security::gtbox[256]</definition>
        <argsstring>[256]</argsstring>
        <name>gtbox</name>
        <initializer>= {
    0x50a7f451, 0x5365417e, 0xc3a4171a, 0x965e273a, 0xcb6bab3b, 0xf1459d1f, 0xab58faac, 0x9303e34b, 0x55fa3020,
    0xf66d76ad, 0x9176cc88, 0x254c02f5, 0xfcd7e54f, 0xd7cb2ac5, 0x80443526, 0x8fa362b5, 0x495ab1de, 0x671bba25,
    0x980eea45, 0xe1c0fe5d, 0x02752fc3, 0x12f04c81, 0xa397468d, 0xc6f9d36b, 0xe75f8f03, 0x959c9215, 0xeb7a6dbf,
    0xda595295, 0x2d83bed4, 0xd3217458, 0x2969e049, 0x44c8c98e, 0x6a89c275, 0x78798ef4, 0x6b3e5899, 0xdd71b927,
    0xb64fe1be, 0x17ad88f0, 0x66ac20c9, 0xb43ace7d, 0x184adf63, 0x82311ae5, 0x60335197, 0x457f5362, 0xe07764b1,
    0x84ae6bbb, 0x1ca081fe, 0x942b08f9, 0x58684870, 0x19fd458f, 0x876cde94, 0xb7f87b52, 0x23d373ab, 0xe2024b72,
    0x578f1fe3, 0x2aab5566, 0x0728ebb2, 0x03c2b52f, 0x9a7bc586, 0xa50837d3, 0xf2872830, 0xb2a5bf23, 0xba6a0302,
    0x5c8216ed, 0x2b1ccf8a, 0x92b479a7, 0xf0f207f3, 0xa1e2694e, 0xcdf4da65, 0xd5be0506, 0x1f6234d1, 0x8afea6c4,
    0x9d532e34, 0xa055f3a2, 0x32e18a05, 0x75ebf6a4, 0x39ec830b, 0xaaef6040, 0x069f715e, 0x51106ebd, 0xf98a213e,
    0x3d06dd96, 0xae053edd, 0x46bde64d, 0xb58d5491, 0x055dc471, 0x6fd40604, 0xff155060, 0x24fb9819, 0x97e9bdd6,
    0xcc434089, 0x779ed967, 0xbd42e8b0, 0x888b8907, 0x385b19e7, 0xdbeec879, 0x470a7ca1, 0xe90f427c, 0xc91e84f8,
    0x00000000, 0x83868009, 0x48ed2b32, 0xac70111e, 0x4e725a6c, 0xfbff0efd, 0x5638850f, 0x1ed5ae3d, 0x27392d36,
    0x64d90f0a, 0x21a65c68, 0xd1545b9b, 0x3a2e3624, 0xb1670a0c, 0x0fe75793, 0xd296eeb4, 0x9e919b1b, 0x4fc5c080,
    0xa220dc61, 0x694b775a, 0x161a121c, 0x0aba93e2, 0xe52aa0c0, 0x43e0223c, 0x1d171b12, 0x0b0d090e, 0xadc78bf2,
    0xb9a8b62d, 0xc8a91e14, 0x8519f157, 0x4c0775af, 0xbbdd99ee, 0xfd607fa3, 0x9f2601f7, 0xbcf5725c, 0xc53b6644,
    0x347efb5b, 0x7629438b, 0xdcc623cb, 0x68fcedb6, 0x63f1e4b8, 0xcadc31d7, 0x10856342, 0x40229713, 0x2011c684,
    0x7d244a85, 0xf83dbbd2, 0x1132f9ae, 0x6da129c7, 0x4b2f9e1d, 0xf330b2dc, 0xec52860d, 0xd0e3c177, 0x6c16b32b,
    0x99b970a9, 0xfa489411, 0x2264e947, 0xc48cfca8, 0x1a3ff0a0, 0xd82c7d56, 0xef903322, 0xc74e4987, 0xc1d138d9,
    0xfea2ca8c, 0x360bd498, 0xcf81f5a6, 0x28de7aa5, 0x268eb7da, 0xa4bfad3f, 0xe49d3a2c, 0x0d927850, 0x9bcc5f6a,
    0x62467e54, 0xc2138df6, 0xe8b8d890, 0x5ef7392e, 0xf5afc382, 0xbe805d9f, 0x7c93d069, 0xa92dd56f, 0xb31225cf,
    0x3b99acc8, 0xa77d1810, 0x6e639ce8, 0x7bbb3bdb, 0x097826cd, 0xf418596e, 0x01b79aec, 0xa89a4f83, 0x656e95e6,
    0x7ee6ffaa, 0x08cfbc21, 0xe6e815ef, 0xd99be7ba, 0xce366f4a, 0xd4099fea, 0xd67cb029, 0xafb2a431, 0x31233f2a,
    0x3094a5c6, 0xc066a235, 0x37bc4e74, 0xa6ca82fc, 0xb0d090e0, 0x15d8a733, 0x4a9804f1, 0xf7daec41, 0x0e50cd7f,
    0x2ff69117, 0x8dd64d76, 0x4db0ef43, 0x544daacc, 0xdf0496e4, 0xe3b5d19e, 0x1b886a4c, 0xb81f2cc1, 0x7f516546,
    0x04ea5e9d, 0x5d358c01, 0x737487fa, 0x2e410bfb, 0x5a1d67b3, 0x52d2db92, 0x335610e9, 0x1347d66d, 0x8c61d79a,
    0x7a0ca137, 0x8e14f859, 0x893c13eb, 0xee27a9ce, 0x35c961b7, 0xede51ce1, 0x3cb1477a, 0x59dfd29c, 0x3f73f255,
    0x79ce1418, 0xbf37c773, 0xeacdf753, 0x5baafd5f, 0x146f3ddf, 0x86db4478, 0x81f3afca, 0x3ec468b9, 0x2c342438,
    0x5f40a3c2, 0x72c31d16, 0x0c25e2bc, 0x8b493c28, 0x41950dff, 0x7101a839, 0xdeb30c08, 0x9ce4b4d8, 0x90c15664,
    0x6184cb7b, 0x70b632d5, 0x745c6c48, 0x4257b8d0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="318" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacexf_1_1security_1a128b80f49b3054a5c73fa60c3f33ee2d" prot="public" static="no" mutable="no">
        <type>const ap_uint&lt; 8 &gt;</type>
        <definition>const ap_uint&lt;8&gt; xf::security::sboxEnc[256]</definition>
        <argsstring>[256]</argsstring>
        <name>sboxEnc</name>
        <initializer>= {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9,
    0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f,
    0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07,
    0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3,
    0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58,
    0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3,
    0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f,
    0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
    0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac,
    0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a,
    0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
    0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11,
    0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42,
    0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="349" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacexf_1_1security_1ab103b183b5674a0510353c1f69462a60" prot="public" static="no" mutable="no">
        <type>const ap_uint&lt; 8 &gt;</type>
        <definition>const ap_uint&lt;8&gt; xf::security::Rcon[10]</definition>
        <argsstring>[10]</argsstring>
        <name>Rcon</name>
        <initializer>= {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="959" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="959" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacexf_1_1security_1af6ef1ec1ce711d7d5acf212b4088a300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>W</declname>
            <defname>W</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::printVar</definition>
        <argsstring>(std::string var, ap_uint&lt; W &gt; a)</argsstring>
        <name>printVar</name>
        <param>
          <type>std::string</type>
          <declname>var</declname>
        </param>
        <param>
          <type>ap_uint&lt; W &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="38" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="38" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a7809338a8b042a25e899513366731b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>W</declname>
            <defname>W</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::printVar</definition>
        <argsstring>(ap_uint&lt; W &gt; a)</argsstring>
        <name>printVar</name>
        <param>
          <type>ap_uint&lt; W &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="50" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="50" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a48b43c1a4198d7367833720d9b1378a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256Encrypt</definition>
        <argsstring>(ap_uint&lt; 128 &gt; plaintext, ap_uint&lt; 256 &gt; cipherkey, ap_uint&lt; 128 &gt; &amp;ciphertext)</argsstring>
        <name>aes256Encrypt</name>
        <param>
          <type>ap_uint&lt; 128 &gt;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>ap_uint&lt; 256 &gt;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>ap_uint&lt; 128 &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <briefdescription>
<para>aes256Encrypt is the basic function for ciphering one block with one cipher key </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>input one word plain text to be encrypted, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkey</parametername>
</parameternamelist>
<parameterdescription>
<para>input cipher key, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>output one word encrypted text, 128 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="497" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="497" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a8b392ab72e2f3853eeff05348c5fa076" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256Decrypt</definition>
        <argsstring>(ap_uint&lt; 128 &gt; ciphertext, ap_uint&lt; 256 &gt; cipherkey, ap_uint&lt; 128 &gt; &amp;plaintext)</argsstring>
        <name>aes256Decrypt</name>
        <param>
          <type>ap_uint&lt; 128 &gt;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>ap_uint&lt; 256 &gt;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>ap_uint&lt; 128 &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <briefdescription>
<para>aes256Decrypt is the basic function for decrypting one block with one cipher key </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>input one word cipher text to be decrypted, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plainkey</parametername>
</parameternamelist>
<parameterdescription>
<para>input plain key, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>output one word encrypted text, 128 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="785" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="785" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a17416cdae7bafa80a9f8eaa8d1d196ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::processWordTemp</definition>
        <argsstring>(ap_uint&lt; 32 &gt; &amp;round_tmp, int &amp;nRcon)</argsstring>
        <name>processWordTemp</name>
        <param>
          <type>ap_uint&lt; 32 &gt; &amp;</type>
          <declname>round_tmp</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nRcon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="961" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="961" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1aa0a31b64c60951dafc4f026c8f70fbdd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128Encrypt</definition>
        <argsstring>(ap_uint&lt; 128 &gt; plaintext, ap_uint&lt; 128 &gt; cipherkey, ap_uint&lt; 128 &gt; &amp;ciphertext)</argsstring>
        <name>aes128Encrypt</name>
        <param>
          <type>ap_uint&lt; 128 &gt;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>ap_uint&lt; 128 &gt;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>ap_uint&lt; 128 &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="977" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="977" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a8b7f6fbaf050cb27141541a4b7bb234e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192Encrypt</definition>
        <argsstring>(ap_uint&lt; 128 &gt; plaintext, ap_uint&lt; 192 &gt; cipherkey, ap_uint&lt; 128 &gt; &amp;ciphertext)</argsstring>
        <name>aes192Encrypt</name>
        <param>
          <type>ap_uint&lt; 128 &gt;</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>ap_uint&lt; 192 &gt;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>ap_uint&lt; 128 &gt; &amp;</type>
          <declname>ciphertext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="1067" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="1067" bodyend="1192"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a874379e9d8a0c1e63097ba0d742c4e1d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128Decrypt</definition>
        <argsstring>(ap_uint&lt; 128 &gt; ciphertext, ap_uint&lt; 128 &gt; cipherkey, ap_uint&lt; 128 &gt; &amp;plaintext)</argsstring>
        <name>aes128Decrypt</name>
        <param>
          <type>ap_uint&lt; 128 &gt;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>ap_uint&lt; 128 &gt;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>ap_uint&lt; 128 &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <briefdescription>
<para>aes128Decrypt is the basic function for decrypting one block with one cipher key </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>input one word cipher text to be decrypted, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plainkey</parametername>
</parameternamelist>
<parameterdescription>
<para>input plain key, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>output one word encrypted text, 128 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="1203" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="1203" bodyend="1364"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1afe60f26308f46392c708e07096062568" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192Decrypt</definition>
        <argsstring>(ap_uint&lt; 128 &gt; ciphertext, ap_uint&lt; 192 &gt; cipherkey, ap_uint&lt; 128 &gt; &amp;plaintext)</argsstring>
        <name>aes192Decrypt</name>
        <param>
          <type>ap_uint&lt; 128 &gt;</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>ap_uint&lt; 192 &gt;</type>
          <declname>cipherkey</declname>
        </param>
        <param>
          <type>ap_uint&lt; 128 &gt; &amp;</type>
          <declname>plaintext</declname>
        </param>
        <briefdescription>
<para>aes192Decrypt is the basic function for decrypting one block with one 192-bit cipher key </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertext</parametername>
</parameternamelist>
<parameterdescription>
<para>input one word cipher text to be decrypted, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plainkey</parametername>
</parameternamelist>
<parameterdescription>
<para>input plain key, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext</parametername>
</parameternamelist>
<parameterdescription>
<para>output one word encrypted text, 128 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="1375" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" bodystart="1375" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1aa3333f8d1713b88c61936977f846681d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>KeyLength</declname>
            <defname>KeyLength</defname>
          </param>
          <param>
            <type>int</type>
            <declname>BlockWidth</declname>
            <defname>BlockWidth</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::rsa</definition>
        <argsstring>(ap_uint&lt; KeyLength &gt; message, ap_uint&lt; KeyLength &gt; N, ap_uint&lt; KeyLength &gt; key, ap_uint&lt; KeyLength &gt; &amp;result)</argsstring>
        <name>rsa</name>
        <param>
          <type>ap_uint&lt; KeyLength &gt;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>ap_uint&lt; KeyLength &gt;</type>
          <declname>N</declname>
        </param>
        <param>
          <type>ap_uint&lt; KeyLength &gt;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>ap_uint&lt; KeyLength &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>RSA encryption/decryption function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>KeyLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of key, usually 1024/2048 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BlockWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Basic multiplication width, should be picked according to cards. Also KeyLength shoud be divisible by BlockWidth.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to be encrypted or ciphertxt to be decrypted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>Served as modulus in modular operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Encryption/decryption key used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>encrypiton/decryption result. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/asymmetric.hpp" line="195" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/asymmetric.hpp" bodystart="195" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1abe39c66e4cc328feeea53d44be6259ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::blake2b</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;msg_len_strm, hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;key_strm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;key_len_strm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;out_len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; ap_uint&lt; 8 *w &gt; &gt; &amp;digest_strm, hls::stream&lt; bool &gt; &amp;end_digest_strm)</argsstring>
        <name>blake2b</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>msg_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>key_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>key_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>out_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *w &gt; &gt; &amp;</type>
          <declname>digest_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_digest_strm</declname>
        </param>
        <briefdescription>
<para>Top of BLAKE2B. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The BLAKE2 Cryptographic Hash and Message Authentication Code (MAC)&quot;. The implementation dataflows the sub-modules.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message length in byte (0 &lt;= msg_len &lt;= 2^128). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The optional key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Key length in byte (0 &lt;= key_len &lt;= 64). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Result hash value length in byte (0 &lt; out_len &lt; 64). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The digest (hash value) stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the result. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/blake2b.hpp" line="659" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/blake2b.hpp" bodystart="659" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a46333afdffd3d1c2395ff65d2ea22437" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::desCbcEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>desCbcEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>desCbcEncrypt is CBC encryption mode with DES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 64 bits for each key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of DES encrypition, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" line="422" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" bodystart="422" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1aca909bfbf44c09656ca2d6b0b4d7e240" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::desCbcDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>desCbcDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>desCbcDecrypt is CBC decryption mode with DES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 64 bits for each key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of DES decrypition, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" line="517" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" bodystart="517" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1ab5f7d57eb969a21a65144956528466d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128CbcEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes128CbcEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes128CbcEncrypt is CBC encryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each text block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each cipher block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" line="606" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" bodystart="606" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1aff65b65cf960ffdac34ea8eb8e3f2e6d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128CbcDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes128CbcDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes128CbcDecrypt is CBC decryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" line="637" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" bodystart="637" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1aaa579217a7a3ab9f952316ac5d97e666" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192CbcEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes192CbcEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes192CbcEncrypt is CBC encryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each text block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each cipher block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" line="667" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" bodystart="667" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a7c621e1c63ab1921542150b90a44d063" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192CbcDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes192CbcDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes192CbcDecrypt is CBC decryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" line="698" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" bodystart="698" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a777e324e59ad3460a43c4e66fd5e3741" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256CbcEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes256CbcEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes256CbcEncrypt is CBC encryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each text block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each cipher block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" line="728" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" bodystart="728" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a3957e3e39c619a7c19889f8010ed4651" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256CbcDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes256CbcDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes256CbcDecrypt is CBC decryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" line="759" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cbc.hpp" bodystart="759" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1ad46f1f886572d932d63aa7cb814ba1c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_t</declname>
            <defname>_t</defname>
            <defval>16</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>_q</declname>
            <defname>_q</defname>
            <defval>8</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::aes128CcmEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;payloadStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;nonceStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenPldStrm, hls::stream&lt; bool &gt; &amp;endLenStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenCphStrm, hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;tagStrm, hls::stream&lt; bool &gt; &amp;endTagStrm)</argsstring>
        <name>aes128CcmEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>payloadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;</type>
          <declname>nonceStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenCphStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endTagStrm</declname>
        </param>
        <briefdescription>
<para>aes128CcmEncrypt is CCM encryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is: &quot;Recommendation for Block Cipher Modes of Operation: The CCM Mode for Authentication and
Confidentiality&quot; The implementation is modified for better performance.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>_t</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the MAC in byte, t is an element of {4, 6, 8, 10, 12, 14, 16}. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_q</parametername>
</parameternamelist>
<parameterdescription>
<para>Length in byte of the binary representation of the length of the payload in byte, q is an element of {2, 3, 4, 5, 6, 7, 8}.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payloadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonceStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonce stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated data stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of associated data in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of payload in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the length streams. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenCphStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of cipher in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The MAC stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endTagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the MAC stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" line="1062" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" bodystart="1062" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a20a4d5e439c3e3c931adc74039cddf70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_t</declname>
            <defname>_t</defname>
            <defval>16</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>_q</declname>
            <defname>_q</defname>
            <defval>8</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::aes128CcmDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;payloadStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;nonceStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenPldStrm, hls::stream&lt; bool &gt; &amp;endLenStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenCphStrm, hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;tagStrm, hls::stream&lt; bool &gt; &amp;endTagStrm)</argsstring>
        <name>aes128CcmDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>payloadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;</type>
          <declname>nonceStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenCphStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endTagStrm</declname>
        </param>
        <briefdescription>
<para>aes128CcmDecrypt is CCM decryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is: &quot;Recommendation for Block Cipher Modes of Operation: The CCM Mode for Authentication and
Confidentiality&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payloadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonceStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonce stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated data stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of associated data in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of payload in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the length streams. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenCphStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of cipher in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The MAC stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endTagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the MAC stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" line="1104" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" bodystart="1104" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a6eb5aba07a922e2f99491fa56d072667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_t</declname>
            <defname>_t</defname>
            <defval>16</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>_q</declname>
            <defname>_q</defname>
            <defval>8</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::aes192CcmEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;payloadStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;nonceStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenPldStrm, hls::stream&lt; bool &gt; &amp;endLenStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenCphStrm, hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;tagStrm, hls::stream&lt; bool &gt; &amp;endTagStrm)</argsstring>
        <name>aes192CcmEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>payloadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;</type>
          <declname>nonceStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenCphStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endTagStrm</declname>
        </param>
        <briefdescription>
<para>aes192CcmEncrypt is CCM encryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is: &quot;Recommendation for Block Cipher Modes of Operation: The CCM Mode for Authentication and
Confidentiality&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payloadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonceStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonce stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated data stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of associated data in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of payload in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the length streams. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenCphStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of cipher in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The MAC stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endTagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the MAC stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" line="1146" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" bodystart="1146" bodyend="1163"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1aaa920c49e27e6963ccdb29fe39bb1492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_t</declname>
            <defname>_t</defname>
            <defval>16</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>_q</declname>
            <defname>_q</defname>
            <defval>8</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::aes192CcmDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;payloadStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;nonceStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenPldStrm, hls::stream&lt; bool &gt; &amp;endLenStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenCphStrm, hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;tagStrm, hls::stream&lt; bool &gt; &amp;endTagStrm)</argsstring>
        <name>aes192CcmDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>payloadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;</type>
          <declname>nonceStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenCphStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endTagStrm</declname>
        </param>
        <briefdescription>
<para>aes192CcmDecrypt is CCM decryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is: &quot;Recommendation for Block Cipher Modes of Operation: The CCM Mode for Authentication and
Confidentiality&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payloadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonceStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonce stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated data stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of associated data in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of payload in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the length streams. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenCphStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of cipher in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The MAC stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endTagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the MAC stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" line="1188" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" bodystart="1188" bodyend="1205"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1ab6f66f04e25bb14520961acf9b89e0ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_t</declname>
            <defname>_t</defname>
            <defval>16</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>_q</declname>
            <defname>_q</defname>
            <defval>8</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::aes256CcmEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;payloadStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;nonceStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenPldStrm, hls::stream&lt; bool &gt; &amp;endLenStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenCphStrm, hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;tagStrm, hls::stream&lt; bool &gt; &amp;endTagStrm)</argsstring>
        <name>aes256CcmEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>payloadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;</type>
          <declname>nonceStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenCphStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endTagStrm</declname>
        </param>
        <briefdescription>
<para>aes256CcmEncrypt is CCM encryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is: &quot;Recommendation for Block Cipher Modes of Operation: The CCM Mode for Authentication and
Confidentiality&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payloadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonceStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonce stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated data stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of associated data in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of payload in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the length streams. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenCphStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of cipher in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The MAC stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endTagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the MAC stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" line="1230" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" bodystart="1230" bodyend="1247"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a9e7730079a9b9503d1d9262ee02c2f03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>_t</declname>
            <defname>_t</defname>
            <defval>16</defval>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>_q</declname>
            <defname>_q</defname>
            <defval>8</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::aes256CcmDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;payloadStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;nonceStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenADStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenPldStrm, hls::stream&lt; bool &gt; &amp;endLenStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenCphStrm, hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;tagStrm, hls::stream&lt; bool &gt; &amp;endTagStrm)</argsstring>
        <name>aes256CcmDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>payloadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *(15-_q)&gt; &gt; &amp;</type>
          <declname>nonceStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenCphStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 *_t &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endTagStrm</declname>
        </param>
        <briefdescription>
<para>aes256CcmDecrypt is CCM decryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is: &quot;Recommendation for Block Cipher Modes of Operation: The CCM Mode for Authentication and
Confidentiality&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payloadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nonceStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The nonce stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Associated data stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of associated data in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of payload in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the length streams. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenCphStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of cipher in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The MAC stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endTagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the MAC stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" line="1272" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ccm.hpp" bodystart="1272" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a41714abe8a575750d2599c5c501a8766" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::desCfb1Encrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>desCfb1Encrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>desCfb1Encrypt is CFB1 encryption mode with DES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 64 bits for each key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of DES encrypition, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="794" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="794" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a3299e13c09434efbf2d482fa25ef1e7d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::desCfb1Decrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>desCfb1Decrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>desCfb1Decrypt is CFB1 decryption mode with DES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 64 bits for each key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of DES decrypition, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="927" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="927" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a9602b6c267031d5d254d3dd758ddbc90" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128Cfb1Encrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes128Cfb1Encrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes128Cfb1Encrypt is CFB1 encryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each text block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each cipher block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1060" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1060" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a16c6b1407dbf578be20085c0a7e19723" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128Cfb1Decrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes128Cfb1Decrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes128Cfb1Decrypt is CFB1 decryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1091" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1091" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1aaf7c290c22ac580e7c96b9df7e2cced6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192Cfb1Encrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes192Cfb1Encrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes192Cfb1Encrypt is CFB1 encryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each text block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each cipher block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1122" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1122" bodyend="1135"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1ae6227cb7ba75a2c9a9cfee7898d952cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192Cfb1Decrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes192Cfb1Decrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes192Cfb1Decrypt is CFB1 decryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1153" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1153" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a33ed8bcb9733b1b31f2a2bff67cfbd55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256Cfb1Encrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes256Cfb1Encrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes256Cfb1Encrypt is CFB1 encryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each text block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each cipher block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1184" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1184" bodyend="1197"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a6583d392c603d07a6c09dcf6e1abed0a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256Cfb1Decrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes256Cfb1Decrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes256Cfb1Decrypt is CFB1 decryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1215" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1215" bodyend="1228"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a3c23bf745edfebf653478d17162c01c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::desCfb8Encrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>desCfb8Encrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>desCfb8Encrypt is CFB8 encryption mode with DES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 64 bits for each key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of DES encrypition, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1246" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1246" bodyend="1339"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a54ebb64875b4074b8f376ceec583d538" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::desCfb8Decrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>desCfb8Decrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>desCfb8Decrypt is CFB8 decryption mode with DES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 64 bits for each key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of DES decrypition, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1357" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1357" bodyend="1451"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a5d18b3b4e51e499b7dfc7add49cdd0b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128Cfb8Encrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes128Cfb8Encrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes128Cfb8Encrypt is CFB8 encryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each text block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each cipher block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1469" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1469" bodyend="1482"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a8ecc4ddbe99a6195bdf8dbe8f2643053" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128Cfb8Decrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes128Cfb8Decrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes128Cfb8Decrypt is CFB8 decryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1500" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1500" bodyend="1513"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1af1ef9abb2960c95dafdd9629faadcddb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192Cfb8Encrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes192Cfb8Encrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes192Cfb8Encrypt is CFB8 encryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each text block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each cipher block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1531" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1531" bodyend="1544"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1afe3217cb98ded0c8846f1ba2f3e58279" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192Cfb8Decrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes192Cfb8Decrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes192Cfb8Decrypt is CFB8 decryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1562" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1562" bodyend="1575"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1ab4e75a7c333fc3bfe1acc708977522c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256Cfb8Encrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes256Cfb8Encrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes256Cfb8Encrypt is CFB8 encryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each text block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each cipher block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1593" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1593" bodyend="1606"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a6352656455b55672a253449c507b017b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256Cfb8Decrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes256Cfb8Decrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes256Cfb8Decrypt is CFB8 decryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1624" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1624" bodyend="1637"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a1748c1f2d56850c35b3b4dfa3f54b182" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::desCfb128Encrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>desCfb128Encrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>desCfb128Encrypt is CFB128 encryption mode with DES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 64 bits for each key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of DES encrypition, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1655" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1655" bodyend="1732"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1af9561ddb468c1de9094c0a9bba75bdc0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::desCfb128Decrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>desCfb128Decrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>desCfb128Decrypt is CFB128 decryption mode with DES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 64 bits for each key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of DES decrypition, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1750" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1750" bodyend="1827"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1ac3f3c68a5ad2550d6e879b0aeca8d519" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128Cfb128Encrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes128Cfb128Encrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes128Cfb128Encrypt is CFB128 encryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each text block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each cipher block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1845" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1845" bodyend="1858"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a0e92f7d7ad09577a3a5a316fa985ebfc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128Cfb128Decrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes128Cfb128Decrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes128Cfb128Decrypt is CFB128 decryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1876" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1876" bodyend="1889"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a8b9de6ac135cc7c6949f96c03e6a2749" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192Cfb128Encrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes192Cfb128Encrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes192Cfb128Encrypt is CFB128 encryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each text block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each cipher block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1907" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1907" bodyend="1920"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a293b209e35cf6e4aa61b53d39b190c90" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192Cfb128Decrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes192Cfb128Decrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes192Cfb128Decrypt is CFB128 decryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1938" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1938" bodyend="1951"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a6286a22b0fa037776b7fa1d7e9214c7b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256Cfb128Encrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes256Cfb128Encrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes256Cfb128Encrypt is CFB128 encryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each text block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each cipher block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="1969" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="1969" bodyend="1982"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1aacbd3bd862cceb7bb3bd7af8b3a850df" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256Cfb128Decrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes256Cfb128Decrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes256Cfb128Decrypt is CFB128 decryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" line="2000" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/cfb.hpp" bodystart="2000" bodyend="2013"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a69def70ab12428ea13c129eb577599c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xf::security::chacha20</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;keyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;counterNonceStrm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;plainStrm, hls::stream&lt; bool &gt; &amp;ePlainStrm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;cipherStrm, hls::stream&lt; bool &gt; &amp;eCipherStrm)</argsstring>
        <name>chacha20</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>keyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>counterNonceStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>plainStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ePlainStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>cipherStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eCipherStrm</declname>
        </param>
        <briefdescription>
<para>chahcha20 is a basic function for stream ciphering when key is &quot;keylayout-chacha&quot;, its layout in a 256-bit ap_uint&lt;&gt; likes this, </para>        </briefdescription>
        <detaileddescription>
<para>0 - 7 bit: &apos;k&apos; 8 - 15 bit: &apos;e&apos; 16 - 23 bit: &apos;y&apos; 24 - 31 bit: &apos;l&apos; ... 232- 239 bit: &apos;c&apos; 240- 247 bit: &apos;h&apos; 248- 255 bit: &apos;a&apos;</para><para>state matrix: s[0] s[1] s[2] s[3] s[4] s[5] s[6] s[7] s[8] s[9] s[10] s[11] s[12] s[13] s[14] s[15]</para><para>128bits counterNonceStrm = counter 32 bits + nonce 96 bits the layout of the data from counteStrm 0-31 bit: counter s[12] 32-63 bit: nonce1 s[13] 64-95 bit: nonce2 s[14] 96-127 bit: nonce3 s[15]</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>initail key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>counterNonceStm</parametername>
</parameternamelist>
<parameterdescription>
<para>initial counter and nonce </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plainStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input plain text to be encrypted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ePlainStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of plainStrm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output encrypted text </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eCipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of cipherStrm </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/chacha20.hpp" line="336" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/chacha20.hpp" bodystart="336" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a664918bb4a2b04e1aa37c5c0a57b7c07" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128CtrEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes128CtrEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes128CtrEncrypt is CTR encryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" line="319" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" bodystart="319" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1aeaa3dc664aae554de709b6f64a830c14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128CtrDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes128CtrDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes128CtrDecrypt is CTR decryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" line="350" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" bodystart="350" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a5d635faad3bf9a1850fb005a4938c9cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192CtrEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes192CtrEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes192CtrEncrypt is CTR encryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" line="381" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" bodystart="381" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a779d4970310275226aee441c471147b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192CtrDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes192CtrDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes192CtrDecrypt is CTR decryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" line="412" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" bodystart="412" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a4b99260252986a745bda2417076807f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256CtrEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes256CtrEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes256CtrEncrypt is CTR encryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" line="443" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" bodystart="443" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a72c8d60bd86d2076a2c89a604b9749b7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256CtrDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes256CtrDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes256CtrDecrypt is CTR decryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" line="474" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ctr.hpp" bodystart="474" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1ad974b89188fa179991041fc5a551df39" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::desEncrypt</definition>
        <argsstring>(ap_uint&lt; 64 &gt; in, ap_uint&lt; 64 &gt; key, ap_uint&lt; 64 &gt; &amp;out)</argsstring>
        <name>desEncrypt</name>
        <param>
          <type>ap_uint&lt; 64 &gt;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>ap_uint&lt; 64 &gt;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>ap_uint&lt; 64 &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>desEncrypt is the basic function for ciphering one block with one cipher key using DES </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>input one plain text to be encrypted, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>input cipher key, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output encrypted text, 64 bits. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/des.hpp" line="451" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/des.hpp" bodystart="451" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1ab0ebb58407aaac6f8086ddcbca29947f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::desDecrypt</definition>
        <argsstring>(ap_uint&lt; 64 &gt; in, ap_uint&lt; 64 &gt; cipherKey, ap_uint&lt; 64 &gt; &amp;out)</argsstring>
        <name>desDecrypt</name>
        <param>
          <type>ap_uint&lt; 64 &gt;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>ap_uint&lt; 64 &gt;</type>
          <declname>cipherKey</declname>
        </param>
        <param>
          <type>ap_uint&lt; 64 &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>desDecrypt is the basic function for decrypt one block with one cipher key using DES </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>input one encrypted text to be decrypted, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherKey</parametername>
</parameternamelist>
<parameterdescription>
<para>input cipher key, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output decrypted text, 64 bits. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/des.hpp" line="510" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/des.hpp" bodystart="510" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1ab808290a69705afb297ed9bf2e551bff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::des3Encrypt</definition>
        <argsstring>(ap_uint&lt; 64 &gt; in, ap_uint&lt; 64 &gt; key1, ap_uint&lt; 64 &gt; key2, ap_uint&lt; 64 &gt; key3, ap_uint&lt; 64 &gt; &amp;out)</argsstring>
        <name>des3Encrypt</name>
        <param>
          <type>ap_uint&lt; 64 &gt;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>ap_uint&lt; 64 &gt;</type>
          <declname>key1</declname>
        </param>
        <param>
          <type>ap_uint&lt; 64 &gt;</type>
          <declname>key2</declname>
        </param>
        <param>
          <type>ap_uint&lt; 64 &gt;</type>
          <declname>key3</declname>
        </param>
        <param>
          <type>ap_uint&lt; 64 &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>des3Encrypt is the basic function for ciphering one block with three cipher keys using 3DES </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>input one plain text to be encrypted, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key1</parametername>
</parameternamelist>
<parameterdescription>
<para>input cipher key, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key2</parametername>
</parameternamelist>
<parameterdescription>
<para>input cipher key, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key3</parametername>
</parameternamelist>
<parameterdescription>
<para>input cipher key, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output encrypted text, 64 bits. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/des.hpp" line="570" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/des.hpp" bodystart="570" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a5d5f67065902616b6c8fbafce4fc1fa1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::des3Decrypt</definition>
        <argsstring>(ap_uint&lt; 64 &gt; in, ap_uint&lt; 64 &gt; key1, ap_uint&lt; 64 &gt; key2, ap_uint&lt; 64 &gt; key3, ap_uint&lt; 64 &gt; &amp;out)</argsstring>
        <name>des3Decrypt</name>
        <param>
          <type>ap_uint&lt; 64 &gt;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>ap_uint&lt; 64 &gt;</type>
          <declname>key1</declname>
        </param>
        <param>
          <type>ap_uint&lt; 64 &gt;</type>
          <declname>key2</declname>
        </param>
        <param>
          <type>ap_uint&lt; 64 &gt;</type>
          <declname>key3</declname>
        </param>
        <param>
          <type>ap_uint&lt; 64 &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>desDecrypt is the basic function for decrypt one block with three cipher keys using 3DES </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>input one encrypted text to be decrypted, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key1</parametername>
</parameternamelist>
<parameterdescription>
<para>input cipher key, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key2</parametername>
</parameternamelist>
<parameterdescription>
<para>input cipher key, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key3</parametername>
</parameternamelist>
<parameterdescription>
<para>input cipher key, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output decrypted text, 64 bits. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/des.hpp" line="590" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/des.hpp" bodystart="590" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1af7be7cdf390d4c45bf1f6b57efe2b4f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::desEcbEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>desEcbEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>desEcbEncrypt is ECB encryption mode with DES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 64 bits for each key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" line="225" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" bodystart="225" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a6f8dbfa51ef386d6eda828529ac69de5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::desEcbDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>desEcbDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>desEcbDecrypt is ECB decryption mode with DES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream to be decrypted, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 64 bits for each key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" line="305" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" bodystart="305" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a8fad538c40d5201f790fee2323d80851" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128EcbEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes128EcbEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes128EcbEncrypt is ECB encryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" line="381" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" bodystart="381" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a14b914daa46a22398c6015939ef6b913" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128EcbDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes128EcbDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes128EcbDecrypt is ECB decryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" line="409" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" bodystart="409" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a3636084af49deac6fc27b82d2e71334c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192EcbEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes192EcbEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes192EcbEncrypt is ECB encryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" line="437" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" bodystart="437" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a50e15b44ca27b306de9f3829db31374e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192EcbDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes192EcbDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes192EcbDecrypt is ECB decryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" line="465" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" bodystart="465" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1aef159af0edf79c1c29352c50edf98588" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256EcbEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes256EcbEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes256EcbEncrypt is ECB encryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" line="493" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" bodystart="493" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a58502cc465bb5bfaded03bd66db6d111" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256EcbDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes256EcbDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes256EcbDecrypt is ECB decryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" line="521" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ecb.hpp" bodystart="521" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1ac6e4a18f7566a1de7e3f16a8e52db967" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128GcmEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;AADStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;tagStrm)</argsstring>
        <name>aes128GcmEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>AADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <briefdescription>
<para>aes128GcmEncrypt is GCM encryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional authenticated data for calculating the tag, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The data tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" line="815" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" bodystart="815" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a351432bccd1d3143257b84c23c74bba2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128GcmDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;AADStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;tagStrm)</argsstring>
        <name>aes128GcmDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>AADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <briefdescription>
<para>aes128GcmDecrypt is GCM decryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional authenticated data for calculating the tag, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The data tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" line="851" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" bodystart="851" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a23d877a87d12099c7dfbe34e2161c247" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192GcmEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;AADStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;tagStrm)</argsstring>
        <name>aes192GcmEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>AADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <briefdescription>
<para>aes192GcmEncrypt is GCM encryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional authenticated data for calculating the tag, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The data tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" line="887" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" bodystart="887" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a2b287e053f09032aeea5449e24dfe082" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192GcmDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;AADStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;tagStrm)</argsstring>
        <name>aes192GcmDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>AADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <briefdescription>
<para>aes192GcmDecrypt is GCM decryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional authenticated data for calculating the tag, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The data tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" line="923" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" bodystart="923" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1ae51d3eabebdbec9ee65e40d5f4ecb816" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256GcmEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;AADStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;tagStrm)</argsstring>
        <name>aes256GcmEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>AADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <briefdescription>
<para>aes256GcmEncrypt is GCM encryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional authenticated data for calculating the tag, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The data tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" line="959" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" bodystart="959" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a8e0508dcd73c25abee0659eb56880fa7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256GcmDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;AADStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;tagStrm)</argsstring>
        <name>aes256GcmDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>AADStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <briefdescription>
<para>aes256GcmDecrypt is GCM decryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;IEEE Standard for Authenticated Encryption with Length Expansion for Storage Devices&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AADStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional authenticated data for calculating the tag, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The data tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" line="995" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gcm.hpp" bodystart="995" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1ac42e1407fa37a17c4b2c88683fe47fdf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256Gmac</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;dataStrm, hls::stream&lt; bool &gt; &amp;eDataStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;keyStrm, hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;ivStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;tagStrm)</argsstring>
        <name>aes256Gmac</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>dataStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eDataStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>keyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 96 &gt; &gt; &amp;</type>
          <declname>ivStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <briefdescription>
<para>aes256Gmac is the basic encryption mode of AES-256. </para>        </briefdescription>
        <detaileddescription>
<para>Galois Message Authentication Code (GMAC) is a mechanism to provide data origin authentication.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dataStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>is input stream text to be authenticated, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eDataStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>is end flag of stream data, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>is input key used in encryption, 256 bits for AES-256. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ivStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>is initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>is the data tag </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gmac.hpp" line="103" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/gmac.hpp" bodystart="103" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a5405eced476b6783c0ef7517395fbe6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>keyW</declname>
            <defname>keyW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>msgW</declname>
            <defname>msgW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>lW</declname>
            <defname>lW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>hshW</declname>
            <defname>hshW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>blockSize</declname>
            <defname>blockSize</defname>
          </param>
          <param>
            <type>template&lt; int iW, int ilW, int oW &gt; class</type>
            <declname>F</declname>
            <defname>F</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::hmac</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; keyW &gt; &gt; &amp;keyStrm, hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;keyLenStrm, hls::stream&lt; ap_uint&lt; msgW &gt; &gt; &amp;msgStrm, hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;lenStrm, hls::stream&lt; bool &gt; &amp;eLenStrm, hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;hshStrm, hls::stream&lt; bool &gt; &amp;eHshStrm)</argsstring>
        <name>hmac</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; keyW &gt; &gt; &amp;</type>
          <declname>keyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;</type>
          <declname>keyLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; msgW &gt; &gt; &amp;</type>
          <declname>msgStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;</type>
          <declname>lenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;</type>
          <declname>hshStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eHshStrm</declname>
        </param>
        <briefdescription>
<para>compute hmac value according to specific hash function and input data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>keyW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of input stream keyStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of input stream msgStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the block size(bytes) of the underlying hash function (e.g. 64 bytes for md5 and SHA-1). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of output stream hshStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function, iW is its input stream&apos;s width and oW is output stream&apos;s width.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input key stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the length stream of input key stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input meassge stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the length stream of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of length stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eHshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>end flag of output stream hshStrm. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/hmac.hpp" line="653" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/hmac.hpp" bodystart="653" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1ae3fb57b80e5370f7050dfa02d3bbd2cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::md4</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 32 &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;digest_strm, hls::stream&lt; bool &gt; &amp;end_digest_strm)</argsstring>
        <name>md4</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 32 &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>digest_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_digest_strm</declname>
        </param>
        <briefdescription>
<para>Top of MD4. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD4 Message-Digest Algorithm&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The digest (fingerprint) stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the result. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" line="594" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md4.hpp" bodystart="594" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a4e0c0530f24ce90acd6b5eaa57b72b9b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::md5</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 32 &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;digest_strm, hls::stream&lt; bool &gt; &amp;end_digest_strm)</argsstring>
        <name>md5</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 32 &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>digest_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_digest_strm</declname>
        </param>
        <briefdescription>
<para>Top of MD5. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;The MD5 Message-Digest Algorithm&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The digest (fingerprint) stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the result. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" line="660" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/md5.hpp" bodystart="660" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a7705af5971e39b7d100b1badcafeffb5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::desOfbEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>desOfbEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>desOfbEncrypt is OFB encryption mode with DES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 64 bits for each key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of DES encrypition, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" line="260" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" bodystart="260" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1aab0b8d383316fcb199e2f0ebcdc85f48" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::desOfbDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>desOfbDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>desOfbDecrypt is OFB decryption mode with DES single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream to be decrypted, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 64 bits for each key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of DES decrypition, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" line="355" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" bodystart="355" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a34c5576ce84ea97f854dc73366c4ddfa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128OfbEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes128OfbEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes128OfbEncrypt is OFB encryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" line="450" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" bodystart="450" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a0b55cc09719a565ebfd26fd845ab5f0d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128OfbDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes128OfbDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes128OfbDecrypt is OFB decryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" line="481" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" bodystart="481" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1ad3d626195e50943b4486d9c7064196b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192OfbEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes192OfbEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes192OfbEncrypt is OFB encryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" line="512" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" bodystart="512" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a64063f9dfb545f88963f8ca131cc651e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes192OfbDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes192OfbDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 192 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes192OfbDecrypt is OFB decryption mode with AES-192 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 192 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" line="543" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" bodystart="543" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a0d7b2182146497a9a3034e1de2f14e95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256OfbEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes256OfbEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes256OfbEncrypt is OFB encryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in encryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" line="574" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" bodystart="574" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a201d4bec77f490fb384dca4dff2be0f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256OfbDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes256OfbDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes256OfbDecrypt is OFB decryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Recommendation for Block Cipher Modes of Operation - Methods and Techniques&quot; The implementation is modified for better performance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input cipher key used in decryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES decrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" line="605" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/ofb.hpp" bodystart="605" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a98647f42dfc8ee197b9395eaf65d7819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xf::security::poly1305</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;keyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;payloadStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenPldStrm, hls::stream&lt; bool &gt; &amp;endLenStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;tagStrm)</argsstring>
        <name>poly1305</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>keyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>payloadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenPldStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>tagStrm</declname>
        </param>
        <briefdescription>
<para>The poly1305 takes a 32-byte one-time key and a message and produces a 16-byte tag. This tag is used to authenticate the message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>initail key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payloadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>For a massage, input block stream text, 128 bits per block, less than 128 bits, high padding 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenPldStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of payload in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to signal the end of the length streams. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Return a 16-byte tag to to authenticate the message. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/poly1305.hpp" line="201" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/poly1305.hpp" bodystart="201" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a9f63a3d179dd50b6b84fa8f5842590c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::rc4</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;keyStrm, hls::stream&lt; bool &gt; &amp;eKeyStrm, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;plainStream, hls::stream&lt; bool &gt; &amp;ePlainStream, hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;cipherStream, hls::stream&lt; bool &gt; &amp;eCipherStream)</argsstring>
        <name>rc4</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>keyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eKeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>plainStream</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>ePlainStream</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 8 &gt; &gt; &amp;</type>
          <declname>cipherStream</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eCipherStream</declname>
        </param>
        <briefdescription>
<para>Rc_4 is the basic function for stream ciphering keyLength defined as the number of bytes in the key and can be in the range 1&lt;= keylength &lt;=256, typically between 5 and 16, corresponding to a key length of 40-128 bits. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>initail key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eKeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>end flag of keyStrm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input plain text to be encrypted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ePlaintStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of plaintStrm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output encrypted text </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eCipherStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of cipherStrm </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/rc4.hpp" line="150" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/rc4.hpp" bodystart="150" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1aad113f7845eb17d7812e4dc16665236b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::sha1</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; ap_uint&lt; 5 *w &gt; &gt; &amp;digest_strm, hls::stream&lt; bool &gt; &amp;end_digest_strm)</argsstring>
        <name>sha1</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 5 *w &gt; &gt; &amp;</type>
          <declname>digest_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_digest_strm</declname>
        </param>
        <briefdescription>
<para>Top of SHA-1. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. The implementation dataflows the pre-processing part and message digest part.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of each input message word, default value is 32.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output digest stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for output digest stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" line="619" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha1.hpp" bodystart="619" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a30423c771a46078121605392a02e34b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>m_width</declname>
            <defname>m_width</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::sha224</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; m_width &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; ap_uint&lt; 224 &gt; &gt; &amp;hash_strm, hls::stream&lt; bool &gt; &amp;end_hash_strm)</argsstring>
        <name>sha224</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; m_width &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 224 &gt; &gt; &amp;</type>
          <declname>hash_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_hash_strm</declname>
        </param>
        <briefdescription>
<para>SHA-224 algorithm with ap_uint stream input and output. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>m_width</parametername>
</parameternamelist>
<parameterdescription>
<para>the input message stream width, currently only 32 allowed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the length message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the flag for end of message length input. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the result. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_hash_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the flag for end of hash output. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" line="810" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" bodystart="810" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a33cc66115d0656dc718e3c25bc462ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>m_width</declname>
            <defname>m_width</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::sha256</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; m_width &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;hash_strm, hls::stream&lt; bool &gt; &amp;end_hash_strm)</argsstring>
        <name>sha256</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; m_width &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>hash_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_hash_strm</declname>
        </param>
        <briefdescription>
<para>SHA-256 algorithm with ap_uint stream input and output. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>m_width</parametername>
</parameternamelist>
<parameterdescription>
<para>the input message stream width, currently only 32 allowed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the length message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the flag for end of message length input. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the result. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_hash_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>the flag for end of hash output. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" line="827" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha224_256.hpp" bodystart="827" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1afc6fde65befdedeccc4bcb733dd5c8c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::sha3_224</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;msgStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;msgLenStrm, hls::stream&lt; bool &gt; &amp;endMsgLenStrm, hls::stream&lt; ap_uint&lt; 224 &gt; &gt; &amp;digestStrm, hls::stream&lt; bool &gt; &amp;endDigestStrm)</argsstring>
        <name>sha3_224</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>msgStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>msgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endMsgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 224 &gt; &gt; &amp;</type>
          <declname>digestStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endDigestStrm</declname>
        </param>
        <briefdescription>
<para>Top of SHA3-224. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;SHA-3 Standard : Permutation-Based Hash and Extendable-Output Functions&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endMsgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output digest stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endDigestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for output digest stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" line="546" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" bodystart="546" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a67c79bc64f8ddabcc9a11de3c43f764f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::sha3_256</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;msgStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;msgLenStrm, hls::stream&lt; bool &gt; &amp;endMsgLenStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;digestStrm, hls::stream&lt; bool &gt; &amp;endDigestStrm)</argsstring>
        <name>sha3_256</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>msgStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>msgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endMsgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>digestStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endDigestStrm</declname>
        </param>
        <briefdescription>
<para>Top of SHA3-256. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;SHA-3 Standard : Permutation-Based Hash and Extendable-Output Functions&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endMsgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output digest stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endDigestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for output digest stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" line="574" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" bodystart="574" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a2945aee1cfda81c251c8bceea10f93b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::sha3_384</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;msgStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;msgLenStrm, hls::stream&lt; bool &gt; &amp;endMsgLenStrm, hls::stream&lt; ap_uint&lt; 384 &gt; &gt; &amp;digestStrm, hls::stream&lt; bool &gt; &amp;endDigestStrm)</argsstring>
        <name>sha3_384</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>msgStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>msgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endMsgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 384 &gt; &gt; &amp;</type>
          <declname>digestStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endDigestStrm</declname>
        </param>
        <briefdescription>
<para>Top of SHA3-384. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;SHA-3 Standard : Permutation-Based Hash and Extendable-Output Functions&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endMsgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output digest stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endDigestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for output digest stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" line="602" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" bodystart="602" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a58848d055ddfa297f2b3c3f17c9b8ac5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::sha3_512</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;msgStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;msgLenStrm, hls::stream&lt; bool &gt; &amp;endMsgLenStrm, hls::stream&lt; ap_uint&lt; 512 &gt; &gt; &amp;digestStrm, hls::stream&lt; bool &gt; &amp;endDigestStrm)</argsstring>
        <name>sha3_512</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>msgStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>msgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endMsgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 512 &gt; &gt; &amp;</type>
          <declname>digestStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endDigestStrm</declname>
        </param>
        <briefdescription>
<para>Top of SHA3-512. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;SHA-3 Standard : Permutation-Based Hash and Extendable-Output Functions&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endMsgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output digest stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endDigestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for output digest stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" line="630" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" bodystart="630" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a513f7f392e1f7f8cda8c9f9c189965e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::shake128</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;msgStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;msgLenStrm, hls::stream&lt; bool &gt; &amp;endMsgLenStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;digestStrm, hls::stream&lt; bool &gt; &amp;endDigestStrm)</argsstring>
        <name>shake128</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>msgStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>msgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endMsgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>digestStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endDigestStrm</declname>
        </param>
        <briefdescription>
<para>Top of SHAKE-128. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;SHA-3 Standard : Permutation-Based Hash and Extendable-Output Functions&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endMsgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output digest stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endDigestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for output digest stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" line="658" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" bodystart="658" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a0b859e7cbb27dcd0117298e2c2cd49cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::shake256</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;msgStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;msgLenStrm, hls::stream&lt; bool &gt; &amp;endMsgLenStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;digestStrm, hls::stream&lt; bool &gt; &amp;endDigestStrm)</argsstring>
        <name>shake256</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>msgStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>msgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endMsgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>digestStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endDigestStrm</declname>
        </param>
        <briefdescription>
<para>Top of SHAKE-256. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;SHA-3 Standard : Permutation-Based Hash and Extendable-Output Functions&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endMsgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output digest stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endDigestStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for output digest stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" line="686" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha3.hpp" bodystart="686" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1af5f670b509db52ecc46c5cb45be0e53a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::sha384</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; ap_uint&lt; 384 &gt; &gt; &amp;digest_strm, hls::stream&lt; bool &gt; &amp;end_digest_strm)</argsstring>
        <name>sha384</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 384 &gt; &gt; &amp;</type>
          <declname>digest_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_digest_strm</declname>
        </param>
        <briefdescription>
<para>SHA-384 algorithm with stream input and output. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. The implementation dataflows the pre-processing part and message digest part.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of each input message word, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output digest stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for output digest stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" line="924" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" bodystart="924" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a61a521d4ac7e9120db1952e3cc7df13e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::sha512</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; ap_uint&lt; 512 &gt; &gt; &amp;digest_strm, hls::stream&lt; bool &gt; &amp;end_digest_strm)</argsstring>
        <name>sha512</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 512 &gt; &gt; &amp;</type>
          <declname>digest_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_digest_strm</declname>
        </param>
        <briefdescription>
<para>SHA-512 algorithm with stream input and output. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. The implementation dataflows the pre-processing part and message digest part.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of each input message word, default value is 64.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output digest stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for output digest stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" line="955" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" bodystart="955" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a9f95e3168b8ca4eb9c6e6cb9af1b1a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>w</declname>
            <defname>w</defname>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>t</declname>
            <defname>t</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::sha512_t</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;msg_strm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;len_strm, hls::stream&lt; bool &gt; &amp;end_len_strm, hls::stream&lt; ap_uint&lt; t &gt; &gt; &amp;digest_strm, hls::stream&lt; bool &gt; &amp;end_digest_strm)</argsstring>
        <name>sha512_t</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; w &gt; &gt; &amp;</type>
          <declname>msg_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_len_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; t &gt; &gt; &amp;</type>
          <declname>digest_strm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>end_digest_strm</declname>
        </param>
        <briefdescription>
<para>SHA-512/t algorithm with stream input and output. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;Secure Hash Standard&quot;, which published by NIST in February 2012. The implementation dataflows the pre-processing part and message digest part.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of each input message word, default value is 64. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>The bit width of the digest which depends on specific algorithm, typically is 224 or 256.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message being hashed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The message length in byte. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_len_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>The flag to signal end of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output digest stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_digest_strm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag for output digest stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" line="987" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/sha512_t.hpp" bodystart="987" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a2348276c53da93cc692e02d68bca8e96" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128XtsEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes128XtsEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes128XtsEncrypt is XTS encryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;IEEE Standard for Cryptographic Protection of
Data on Block-Oriented Storage Devices&quot; The implementation is optimized for better performance in FPGA.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Total length of plaintext in bit, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input two cipher key used in encryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/xts.hpp" line="348" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/xts.hpp" bodystart="348" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1a2c307e84e9405be7579fffdfa55fe898" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes128XtsDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes128XtsDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes128XtsDecrypt is XTS decryption mode with AES-128 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;IEEE Standard for Cryptographic Protection of
Data on Block-Oriented Storage Devices&quot; The implementation is optimized for better performance in FPGA.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Total length of plaintext in bit, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input two cipher key used in decryption, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/xts.hpp" line="381" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/xts.hpp" bodystart="381" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1aa19f90be317a49e6e04c469f93591f8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256XtsEncrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm)</argsstring>
        <name>aes256XtsEncrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <briefdescription>
<para>aes256XtsEncrypt is XTS encryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;IEEE Standard for Cryptographic Protection of
Data on Block-Oriented Storage Devices&quot; The implementation is optimized for better performance in FPGA.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be encrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Total length of plaintext in bit, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input two cipher key used in encryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output encrypted block stream text, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/xts.hpp" line="414" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/xts.hpp" bodystart="414" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1aa3fc81575a5babdfc58e5f09806c7568" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void xf::security::aes256XtsDecrypt</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;ciphertextStrm, hls::stream&lt; bool &gt; &amp;endCiphertextStrm, hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;lenStrm, hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;cipherkeyStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;IVStrm, hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;plaintextStrm, hls::stream&lt; bool &gt; &amp;endPlaintextStrm)</argsstring>
        <name>aes256XtsDecrypt</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>ciphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endCiphertextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 64 &gt; &gt; &amp;</type>
          <declname>lenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 256 &gt; &gt; &amp;</type>
          <declname>cipherkeyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>IVStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; 128 &gt; &gt; &amp;</type>
          <declname>plaintextStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>endPlaintextStrm</declname>
        </param>
        <briefdescription>
<para>aes256XtsDecrypt is XTS decryption mode with AES-256 single block cipher. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm reference is : &quot;IEEE Standard for Cryptographic Protection of
Data on Block-Oriented Storage Devices&quot; The implementation is optimized for better performance in FPGA.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ciphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input block stream text to be decrypted, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endCiphertextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream ciphertext, 1 bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Total length of plaintext in bit, 64 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipherkeyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Input two cipher key used in decryption, 256 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IVStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization vector for the fisrt iteration of AES encrypition, 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>Output decrypted block stream text, each block is 128 bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endPlaintextStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>End flag of block stream plaintext, 1 bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/xts.hpp" line="447" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/xts.hpp" bodystart="447" bodyend="460"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/wrk/xsjhdnobkup4/tuol/xf_security/L1/include/xf_security/aes.hpp" line="34" column="1"/>
  </compounddef>
</doxygen>
