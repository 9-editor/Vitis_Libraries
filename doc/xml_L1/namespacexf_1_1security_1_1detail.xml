<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="namespacexf_1_1security_1_1detail" kind="namespace">
    <compoundname>xf::security::detail</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacexf_1_1security_1_1detail_1a0a84cf846ca5c8b6b492b96c783bd346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>W</declname>
            <defname>W</defname>
          </param>
          <param>
            <type>int</type>
            <declname>lW</declname>
            <defname>lW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>hshW</declname>
            <defname>hshW</defname>
          </param>
          <param>
            <type>template&lt; int iW, int ilW, int oW &gt; class</type>
            <declname>F</declname>
            <defname>F</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::detail::FF</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; W &gt; &gt; &amp;msgStrm, ap_uint&lt; lW &gt; len, hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;hshStrm, hls::stream&lt; bool &gt; &amp;eHshStrm)</argsstring>
        <name>FF</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; W &gt; &gt; &amp;</type>
          <declname>msgStrm</declname>
        </param>
        <param>
          <type>ap_uint&lt; lW &gt;</type>
          <declname>len</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;</type>
          <declname>hshStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eHshStrm</declname>
        </param>
        <briefdescription>
<para>compute hash value according to specific hash function and input data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of input stream msgStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of output stream hshStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function, iW is its input stream&apos;s width and oW is output stream&apos;s width.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of input stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eHshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>end flag of output stream hshStrm. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" line="56" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" bodystart="56" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1detail_1aace9d294a5d49f536e97759b7e82be34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>W</declname>
            <defname>W</defname>
          </param>
          <param>
            <type>int</type>
            <declname>lW</declname>
            <defname>lW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>hshW</declname>
            <defname>hshW</defname>
          </param>
          <param>
            <type>template&lt; int iW, int ilW, int oW &gt; class</type>
            <declname>F</declname>
            <defname>F</defname>
          </param>
        </templateparamlist>
        <type>ap_uint&lt; hshW &gt;</type>
        <definition>ap_uint&lt;hshW&gt; xf::security::detail::FF</definition>
        <argsstring>(ap_uint&lt; W &gt; msg, hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;hshStrm, hls::stream&lt; bool &gt; &amp;eHshStrm)</argsstring>
        <name>FF</name>
        <param>
          <type>ap_uint&lt; W &gt;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;</type>
          <declname>hshStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eHshStrm</declname>
        </param>
        <briefdescription>
<para>compute hash value according to specific hash function and input data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of input message. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of output stream hshStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function, iW is its input stream&apos;s width and oW is output stream&apos;s width.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>input meassge. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eHshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>end flag of output stream hshStrm. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" line="84" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" bodystart="84" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1detail_1a4ee6d1360d1e9a71a6d3ee19be39e4bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>keyW</declname>
            <defname>keyW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>msgW</declname>
            <defname>msgW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>lW</declname>
            <defname>lW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>hshW</declname>
            <defname>hshW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>blockSize</declname>
            <defname>blockSize</defname>
          </param>
          <param>
            <type>template&lt; int iW, int ilW, int oW &gt; class</type>
            <declname>F</declname>
            <defname>F</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::detail::hmacSqeunce</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; keyW &gt; &gt; &amp;keyStrm, ap_uint&lt; lW &gt; keyLen, hls::stream&lt; ap_uint&lt; msgW &gt; &gt; &amp;msgStrm, ap_uint&lt; lW &gt; msgLen, hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;hshStrm, hls::stream&lt; bool &gt; &amp;eHshStrm)</argsstring>
        <name>hmacSqeunce</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; keyW &gt; &gt; &amp;</type>
          <declname>keyStrm</declname>
        </param>
        <param>
          <type>ap_uint&lt; lW &gt;</type>
          <declname>keyLen</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; msgW &gt; &gt; &amp;</type>
          <declname>msgStrm</declname>
        </param>
        <param>
          <type>ap_uint&lt; lW &gt;</type>
          <declname>msgLen</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;</type>
          <declname>hshStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eHshStrm</declname>
        </param>
        <briefdescription>
<para>compute hmac value according to specific hash function and input data in sequence. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>keyW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of input stream keyStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of input stream msgStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of output stream hshStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the block size(bytes) of the underlying hash function (e.g. 64 bytes for md5 and SHA-1). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function, iW is its input stream&apos;s width and oW is output stream&apos;s width.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input key stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyLen</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of input key stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input meassge stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLen</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eHshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>end flag of output stream hshStrm. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" line="111" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" bodystart="111" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1detail_1a0028c6ad2fa86ce9cc86f0668c81db0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>keyW</declname>
            <defname>keyW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>lW</declname>
            <defname>lW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>hshW</declname>
            <defname>hshW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>blockSize</declname>
            <defname>blockSize</defname>
          </param>
          <param>
            <type>template&lt; int iW, int ilW, int oW &gt; class</type>
            <declname>F</declname>
            <defname>F</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::detail::kpad</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; keyW &gt; &gt; &amp;keyStrm, hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;keyLenStrm, hls::stream&lt; bool &gt; &amp;eLenStrm, hls::stream&lt; ap_uint&lt; blockSize *8 &gt; &gt; &amp;kipadStrm, hls::stream&lt; ap_uint&lt; blockSize *8 &gt; &gt; &amp;kopadStrm, hls::stream&lt; bool &gt; &amp;eLStrm)</argsstring>
        <name>kpad</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; keyW &gt; &gt; &amp;</type>
          <declname>keyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;</type>
          <declname>keyLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; blockSize *8 &gt; &gt; &amp;</type>
          <declname>kipadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; blockSize *8 &gt; &gt; &amp;</type>
          <declname>kopadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eLStrm</declname>
        </param>
        <briefdescription>
<para>compute kipad and kopad after padding 0 on right and xor operation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>keyW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of input stream keyStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of output stream hshStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the block size(bytes) of the underlying hash function (e.g. 64 bytes for md5 and SHA-1). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function, iW is its input stream&apos;s width and oW is output stream&apos;s width.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input key stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the length stream of input key stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of length stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kipadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>kipad stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kopadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>kopad stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eLStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>end flag stream, which is a duplate of eLenStrm. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" line="265" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" bodystart="265" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1detail_1ace578042046268d6e49ec16ca0842685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>msgW</declname>
            <defname>msgW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>lW</declname>
            <defname>lW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>hshW</declname>
            <defname>hshW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>blockSize</declname>
            <defname>blockSize</defname>
          </param>
          <param>
            <type>template&lt; int iW, int ilW, int oW &gt; class</type>
            <declname>F</declname>
            <defname>F</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::detail::hashKeyMsg</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; blockSize *8 &gt; &gt; &amp;kipadStrm, hls::stream&lt; ap_uint&lt; msgW &gt; &gt; &amp;msgStrm, hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;msgLenStrm, hls::stream&lt; bool &gt; &amp;eLenStrm, hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;mHshStrm, hls::stream&lt; bool &gt; &amp;eMHshStrm)</argsstring>
        <name>hashKeyMsg</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; blockSize *8 &gt; &gt; &amp;</type>
          <declname>kipadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; msgW &gt; &gt; &amp;</type>
          <declname>msgStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;</type>
          <declname>msgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;</type>
          <declname>mHshStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eMHshStrm</declname>
        </param>
        <briefdescription>
<para>compute hash(kipad and msg). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>msgW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of input stream msgStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of output stream hshStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the block size(bytes) of the underlying hash function (e.g. 64 bytes for md5 and SHA-1). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function, iW is its input stream&apos;s width and oW is output stream&apos;s width.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kipadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input kipad stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the length stream of input msg stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of length stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mHshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash value stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eMHshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of hash value stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" line="348" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" bodystart="348" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1detail_1ab2855fd53bf834839364377309dd2846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>msgW</declname>
            <defname>msgW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>lW</declname>
            <defname>lW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>hshW</declname>
            <defname>hshW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>blockSize</declname>
            <defname>blockSize</defname>
          </param>
          <param>
            <type>template&lt; int iW, int ilW, int oW &gt; class</type>
            <declname>F</declname>
            <defname>F</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::detail::hashKopadHsh</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; blockSize *8 &gt; &gt; &amp;kopadStrm, hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;mHshStrm, hls::stream&lt; bool &gt; &amp;eMHshStrm, hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;hshStrm, hls::stream&lt; bool &gt; &amp;eHshStrm)</argsstring>
        <name>hashKopadHsh</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; blockSize *8 &gt; &gt; &amp;</type>
          <declname>kopadStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;</type>
          <declname>mHshStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eMHshStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;</type>
          <declname>hshStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eHshStrm</declname>
        </param>
        <briefdescription>
<para>compute hash(kopad and lastHash). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>msgW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of input stream msgStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of output stream hshStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the block size(bytes) of the underlying hash function (e.g. 64 bytes for md5 and SHA-1). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function, iW is its input stream&apos;s width and oW is output stream&apos;s width.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kopadStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input kopad stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mHshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input last hash value stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eMHshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of mHshStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash value stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eHshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of hash value stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" line="414" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" bodystart="414" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1detail_1ac27f3608a6791739489119f199d42097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>keyW</declname>
            <defname>keyW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>msgW</declname>
            <defname>msgW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>lW</declname>
            <defname>lW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>hshW</declname>
            <defname>hshW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>blockSize</declname>
            <defname>blockSize</defname>
          </param>
          <param>
            <type>template&lt; int iW, int ilW, int oW &gt; class</type>
            <declname>F</declname>
            <defname>F</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::detail::hmacSqeunce</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; keyW &gt; &gt; &amp;keyStrm, hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;keyLenStrm, hls::stream&lt; ap_uint&lt; msgW &gt; &gt; &amp;msgStrm, hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;msgLenStrm, hls::stream&lt; bool &gt; &amp;eLenStrm, hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;hshStrm, hls::stream&lt; bool &gt; &amp;eHshStrm)</argsstring>
        <name>hmacSqeunce</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; keyW &gt; &gt; &amp;</type>
          <declname>keyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;</type>
          <declname>keyLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; msgW &gt; &gt; &amp;</type>
          <declname>msgStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;</type>
          <declname>msgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;</type>
          <declname>hshStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eHshStrm</declname>
        </param>
        <briefdescription>
<para>compute hmac value according to specific hash function and input data in sequence. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>keyW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of input stream keyStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of input stream msgStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the block size(bytes) of the underlying hash function (e.g. 64 bytes for md5 and SHA-1). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of output stream hshStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function, iW is its input stream&apos;s width and oW is output stream&apos;s width.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input key stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the length stream of input key stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input meassge stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the length stream of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of length stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eHshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>end flag of output stream hshStrm. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" line="488" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" bodystart="488" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1detail_1a2d5ac73d0173563e73bd3efeb45f1d66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>keyW</declname>
            <defname>keyW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>msgW</declname>
            <defname>msgW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>lW</declname>
            <defname>lW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>hshW</declname>
            <defname>hshW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>blockSize</declname>
            <defname>blockSize</defname>
          </param>
          <param>
            <type>template&lt; int iW, int ilW, int oW &gt; class</type>
            <declname>F</declname>
            <defname>F</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::detail::hmacDataflow</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; keyW &gt; &gt; &amp;keyStrm, hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;keyLenStrm, hls::stream&lt; ap_uint&lt; msgW &gt; &gt; &amp;msgStrm, hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;msgLenStrm, hls::stream&lt; bool &gt; &amp;eLenStrm, hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;hshStrm, hls::stream&lt; bool &gt; &amp;eHshStrm)</argsstring>
        <name>hmacDataflow</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; keyW &gt; &gt; &amp;</type>
          <declname>keyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;</type>
          <declname>keyLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; msgW &gt; &gt; &amp;</type>
          <declname>msgStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;</type>
          <declname>msgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;</type>
          <declname>hshStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eHshStrm</declname>
        </param>
        <briefdescription>
<para>compute hmac value according to specific hash function and input data in parallel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>keyW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of input stream keyStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of input stream msgStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the block size(bytes) of the underlying hash function (e.g. 64 bytes for md5 and SHA-1). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of output stream hshStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function, iW is its input stream&apos;s width and oW is output stream&apos;s width.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input key stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the length stream of input key stream, in bytes not keyW-bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input meassge stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the length stream of input message stream, in bytes not msgW-bit. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of length stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eHshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>end flag of output stream hshStrm. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" line="537" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" bodystart="537" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="namespacexf_1_1security_1_1detail_1ab61bfd844b809f505330110f49fb484c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>keyW</declname>
            <defname>keyW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>msgW</declname>
            <defname>msgW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>lW</declname>
            <defname>lW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>hshW</declname>
            <defname>hshW</defname>
          </param>
          <param>
            <type>int</type>
            <declname>blockSize</declname>
            <defname>blockSize</defname>
          </param>
          <param>
            <type>template&lt; int iW, int ilW, int oW &gt; class</type>
            <declname>F</declname>
            <defname>F</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void xf::security::detail::hmacImp</definition>
        <argsstring>(hls::stream&lt; ap_uint&lt; keyW &gt; &gt; &amp;keyStrm, hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;keyLenStrm, hls::stream&lt; ap_uint&lt; msgW &gt; &gt; &amp;msgStrm, hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;msgLenStrm, hls::stream&lt; bool &gt; &amp;eLenStrm, hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;hshStrm, hls::stream&lt; bool &gt; &amp;eHshStrm)</argsstring>
        <name>hmacImp</name>
        <param>
          <type>hls::stream&lt; ap_uint&lt; keyW &gt; &gt; &amp;</type>
          <declname>keyStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;</type>
          <declname>keyLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; msgW &gt; &gt; &amp;</type>
          <declname>msgStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; lW &gt; &gt; &amp;</type>
          <declname>msgLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eLenStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; ap_uint&lt; hshW &gt; &gt; &amp;</type>
          <declname>hshStrm</declname>
        </param>
        <param>
          <type>hls::stream&lt; bool &gt; &amp;</type>
          <declname>eHshStrm</declname>
        </param>
        <briefdescription>
<para>compute hmac value according to specific hash function and input data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>keyW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of input stream keyStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of input stream msgStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockSize</parametername>
</parameternamelist>
<parameterdescription>
<para>the block size(bytes) of the underlying hash function (e.g. 64 bytes for md5 and SHA-1). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshW</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of output stream hshStrm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>hash function, iW is its input stream&apos;s width and oW is output stream&apos;s width.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input key stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keyLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the length stream of input key stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>input meassge stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the length stream of input message stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eLenStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>the end flag of length stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eHshStrm</parametername>
</parameternamelist>
<parameterdescription>
<para>end flag of output stream hshStrm. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" line="602" column="1" bodyfile="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" bodystart="602" bodyend="614"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/wrk/xsjhdnobkup4/tuol/benchmark_data/xf_security/L1/include/xf_security/hmac.hpp" line="39" column="1"/>
  </compounddef>
</doxygen>
