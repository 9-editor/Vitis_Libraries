.. index:: pair: namespace; compression
.. _doxid-namespacexf_1_1compression:
.. _cid-xf::compression:

namespace compression
=====================

.. toctree::
	:hidden:



.. _doxid-namespacexf_1_1compression_1a499ffa6d30e499c112e1ff0d30f74217:
.. _cid-xf::compression::uintmemwidth_t:
.. _doxid-namespacexf_1_1compression_1a9d41d94c1981c79849a420c8a6a75aa4:
.. _cid-xf::compression::compressd_dt:
.. _doxid-namespacexf_1_1compression_1a8ca006fee7f286d35d08e313f7c8e4fc:
.. _cid-xf::compression::streamdt:
.. _doxid-namespacexf_1_1compression_1a5a144d8f44cabd29a372b35ca034e306:
.. _cid-xf::compression::lz4_compressd_dt:
.. _doxid-namespacexf_1_1compression_1ab4e55f033c3c15aff4ddf6733ab52059:
.. _cid-xf::compression::snappy_compressd_dt:
.. _doxid-namespacexf_1_1compression_1a06e4c8be7794b2cad357e9eda2cfca68:
.. _cid-xf::compression::kgmemdwidth:
.. _doxid-namespacexf_1_1compression_1a7891a83be06e71b8f9d20f835b36b0e0:
.. _cid-xf::compression::kgmemburstsize:
.. _doxid-namespacexf_1_1compression_1a76067a65140dee8a0b343c0c4a038328:
.. _cid-xf::compression::c_gmemburstsize:
.. _doxid-namespacexf_1_1compression_1a892004a2d8e3a8838264e1ffeefd5d48:
.. _cid-xf::compression::c_sizestreamdepth:
.. _doxid-namespacexf_1_1compression_1a4ab4a06d9431beab6b4626be715fc6fc:
.. _cid-xf::compression::bsize_std_256kb:
.. _doxid-namespacexf_1_1compression_1abbd4493ade4021944af752fbf4c91983:
.. _cid-xf::compression::bsize_std_1024kb:
.. _doxid-namespacexf_1_1compression_1a18e275d8e415feedd8daf05a8b9045dd:
.. _cid-xf::compression::bsize_std_4096kb:
.. _doxid-namespacexf_1_1compression_1a3c65435c80825f95f61e45366a5f95e3:
.. _cid-xf::compression::max_bsize_256kb:
.. _doxid-namespacexf_1_1compression_1aebedc340478e133df152f1ce310ae5d3:
.. _cid-xf::compression::max_bsize_1024kb:
.. _doxid-namespacexf_1_1compression_1aa301aad91608f486bab1c36f785e2b49:
.. _cid-xf::compression::max_bsize_4096kb:
.. _doxid-namespacexf_1_1compression_1ad22ea0f57cf4165bfb8acfe0f8e0178e:
.. _cid-xf::compression::bsize_ncomp_256:
.. _doxid-namespacexf_1_1compression_1a872d92fa2a3c0186043d101aba66dbf4:
.. _cid-xf::compression::bsize_ncomp_1024:
.. _doxid-namespacexf_1_1compression_1a728e3f1706dc7c65bf281bd7f1d325cb:
.. _cid-xf::compression::bsize_ncomp_4096:
.. _doxid-namespacexf_1_1compression_1ae3b31fa1202254120d2c391b1df0692c:
.. _cid-xf::compression::c_ltreesize:
.. _doxid-namespacexf_1_1compression_1a63e73826ad983458349297e4b1e70db8:
.. _cid-xf::compression::c_dtreesize:
.. _doxid-namespacexf_1_1compression_1abee5cdb5326bba1c4643ec20c5560bb4:
.. _cid-xf::compression::c_bltreesize:
.. _doxid-namespacexf_1_1compression_1a9a710f6021ff8fcdfb109306161d635e:
.. _cid-xf::compression::c_maxcodesize:
.. _doxid-namespacexf_1_1compression_1af7c0befaf2fbb891f6e4791c2a3a0cb2:
.. _cid-xf::compression::axis2hlsstreamfixedsize:
.. _doxid-namespacexf_1_1compression_1ae6c926186474d538c0480090b7fd8f62:
.. _cid-xf::compression::hlsstream2axis:
.. _doxid-namespacexf_1_1compression_1a12a964de486e860c0afb7e5188996c24:
.. _cid-xf::compression::hlsstream2axistreamfixedsize:
.. _doxid-namespacexf_1_1compression_1a09c15eac11254675def36b8a4e3d29c6:
.. _cid-xf::compression::axis2hlsstream:
.. _doxid-namespacexf_1_1compression_1aab78544adcc142b568ec98bbc5f34c79:
.. _cid-xf::compression::streamdatadm2k:
.. _doxid-namespacexf_1_1compression_1a2631016a991cd55c1e6a1548c625610c:
.. _cid-xf::compression::streamdatak2dm:
.. _doxid-namespacexf_1_1compression_1a01f552c896d54ba7b48cf8f899da8e2e:
.. _cid-xf::compression::streamdatak2dmfixedsize:
.. _doxid-namespacexf_1_1compression_1a7bb2edbc1993143e0c5569b7f5c67474:
.. _cid-xf::compression::reversebits:
.. _doxid-namespacexf_1_1compression_1a8cf8a4b8cce6801d08b3f4377fcae520:
.. _cid-xf::compression::reduceheap:
.. _doxid-namespacexf_1_1compression_1a6dce429f1af2d05c56c54927179bff7f:
.. _cid-xf::compression::code_generator_array:
.. _doxid-namespacexf_1_1compression_1ab786bd2b026f70c6efb9d9c4366a9159:
.. _cid-xf::compression::kstreamread:
.. _doxid-namespacexf_1_1compression_1a3bb7b44a0e13f789879e4cee7b47e257:
.. _cid-xf::compression::kstreamwrite:
.. _doxid-namespacexf_1_1compression_1acbb02d6fef687b30a25f9a6026b4251a:
.. _cid-xf::compression::kstreamwritefixedsize:
.. _doxid-namespacexf_1_1compression_1a75d9bdfeaf9160fe3824d20fce59b707:
.. _cid-xf::compression::lzdecompresszlibeos:
.. _doxid-namespacexf_1_1compression_1ad8298e06f1660a038b5961b54daa9a56:
.. _cid-xf::compression::lzdecompresszlibeos_new:
.. _doxid-namespacexf_1_1compression_1a20510d52a307b99e3b8b57086b6e29ea:
.. _cid-xf::compression::lzdecompresszlib:
.. _doxid-namespacexf_1_1compression_1aa7ee9a50a179566a67c1ad18180cc1a6:
.. _cid-xf::compression::mm2snb:
.. _doxid-namespacexf_1_1compression_1a192524dfa85b53f54525d964731d5e39:
.. _cid-xf::compression::mm2snbfreq:
.. _doxid-namespacexf_1_1compression_1a04a8396c062eb130c73c6156e8f57f83:
.. _cid-xf::compression::mm2snbroundoff:
.. _doxid-namespacexf_1_1compression_1ae3778b17a59ae8333caa3b813cb33beb:
.. _cid-xf::compression::mm2ssimple:
.. _doxid-namespacexf_1_1compression_1abf8c23016af9dd2af0991eba67b001db:
.. _cid-xf::compression::s2mmeosnb:
.. _doxid-namespacexf_1_1compression_1a60443e8a36e5e2c5c95995e9a387dbcd:
.. _cid-xf::compression::s2mmeosnbfreq:
.. _doxid-namespacexf_1_1compression_1a8f2df948c53a68705acb3f76da89525f:
.. _cid-xf::compression::s2mmnb:
.. _doxid-namespacexf_1_1compression_1a45cb9f59475436379c03556d5e4f525b:
.. _cid-xf::compression::s2mmeossimple:
.. _doxid-namespacexf_1_1compression_1a086f13150831e9a1a0af79d37483d1e7:
.. _cid-xf::compression::s2mmsimple:
.. _doxid-namespacexf_1_1compression_1af0dd6df2dd3def8fe03cf1bcb0242fea:
.. _cid-xf::compression::streamdownsizer:
.. _doxid-namespacexf_1_1compression_1a6a8abb131866b2039b8a790cdb03b3ec:
.. _cid-xf::compression::streamdownsizerp2p:
.. _doxid-namespacexf_1_1compression_1af54dd9dffdf3f3c37bde15680737b3b1:
.. _cid-xf::compression::streamupsizer:
.. _doxid-namespacexf_1_1compression_1a36b991468a0b84916b936ba15b7bb28e:
.. _cid-xf::compression::upsizereos:
.. ref-code-block:: cpp
	:class: overview-code-block

	// typedefs

	typedef ap_uint <kGMemDWidth> uintMemWidth_t
	typedef ap_uint <32> compressd_dt
	typedef ap_uint <8> streamDt
	typedef ap_uint <64> lz4_compressd_dt
	typedef ap_uint <64> snappy_compressd_dt

	// global variables

	const int kGMemDWidth
	const int kGMemBurstSize
	const int c_gmemBurstSize
	const int c_sizeStreamDepth
	const auto :ref:`BSIZE_STD_64KB<doxid-namespacexf_1_1compression_1a54fef513f3238f9e8041389c73ed24bc>`
	const auto BSIZE_STD_256KB
	const auto BSIZE_STD_1024KB
	const auto BSIZE_STD_4096KB
	const auto :ref:`MAX_BSIZE_64KB<doxid-namespacexf_1_1compression_1a1139a8f1202693d50eca2be54f2869a3>`
	const auto MAX_BSIZE_256KB
	const auto MAX_BSIZE_1024KB
	const auto MAX_BSIZE_4096KB
	const int :ref:`NO_COMPRESS_BIT<doxid-namespacexf_1_1compression_1a5a82fcc6c56b2ffdb1ed8d37eece8d34>`
	const auto :ref:`BSIZE_NCOMP_64<doxid-namespacexf_1_1compression_1a83038126f4933bc589f8672724cbffcc>`
	const auto BSIZE_NCOMP_256
	const auto BSIZE_NCOMP_1024
	const auto BSIZE_NCOMP_4096
	const int c_lTreeSize
	const int c_dTreeSize
	const int c_bLTreeSize
	const int c_maxCodeSize

Global Variables
----------------

.. _doxid-namespacexf_1_1compression_1a54fef513f3238f9e8041389c73ed24bc:
.. _cid-xf::compression::bsize_std_64kb:
.. ref-code-block:: cpp
	:class: title-code-block

	const auto BSIZE_STD_64KB

Below are the codes as per LZ4 standard for various maximum block sizes supported.

.. _doxid-namespacexf_1_1compression_1a1139a8f1202693d50eca2be54f2869a3:
.. _cid-xf::compression::max_bsize_64kb:
.. ref-code-block:: cpp
	:class: title-code-block

	const auto MAX_BSIZE_64KB

Maximum block sizes supported by LZ4

.. _doxid-namespacexf_1_1compression_1a5a82fcc6c56b2ffdb1ed8d37eece8d34:
.. _cid-xf::compression::no_compress_bit:
.. ref-code-block:: cpp
	:class: title-code-block

	const int NO_COMPRESS_BIT

This value is used to set uncompressed block size value. 4th byte is always set to below and placed as uncompressed byte

.. _doxid-namespacexf_1_1compression_1a83038126f4933bc589f8672724cbffcc:
.. _cid-xf::compression::bsize_ncomp_64:
.. ref-code-block:: cpp
	:class: title-code-block

	const auto BSIZE_NCOMP_64

In case of uncompressed block Values below are used to set 3rd byte to following values w.r.t various maximum block sizes supported by standard


.. FunctionSection




.. _doxid-namespacexf_1_1compression_1a2d12318fd43faea7660776a984d5a53f:
.. _cid-xf::compression::huffconstructtree:

huffConstructTree
-----------------


.. code-block:: cpp
	
	#include "deflate_trees.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    uint32_t ELEMS,
	    uint32_t MAX_LENGTH
	    >
	uint32_t huffConstructTree (
	    uint32_t* tree_freq,
	    uint32_t* tree_codes,
	    uint32_t* tree_blen,
	    uint32_t* tree_root
	    )

This module generates huffman codes for either literal, distance or bitlength data.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - tree_freq

        - input frequency data of literals, distances or bit lengths

    *
        - tree_codes

        - output huffman codes data

    *
        - tree_blen

        - output huffan codes bit lengths

    *
        - tree_root

        - input buffer to construct codes and bit length information

.. _doxid-namespacexf_1_1compression_1ad5266d7be1a3b87a1d0d881607263adb:
.. _cid-xf::compression::huffbitunpacker:

huffBitUnPacker
---------------


.. code-block:: cpp
	
	#include "inflate_huffman.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void huffBitUnPacker (
	    hls::stream <ap_uint <2*BIT>>& inStream,
	    hls::stream <xf::compression::compressd_dt>& outStream,
	    hls::stream <bool>& endOfStream,
	    uint32_t input_size
	    )

This module does bit unpacking and generates a LZ77 byte compressed data and trasfer to lz_decompress module for further byte unpacking.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inStream

        - input bit packed data

    *
        - outStream

        - output lz77 compressed output in the form of 32bit packets (Literals, Match Length, Distances)

    *
        - endOfStream

        - output completion of execution

    *
        - input_size

        - input data size

.. _doxid-namespacexf_1_1compression_1aec51f097d8730e92b29f49e4d2cafd63:
.. _cid-xf::compression::lz4compress:

lz4Compress
-----------


.. code-block:: cpp
	
	#include "lz4_compress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void lz4Compress (
	    hls::stream <uint8_t>& in_lit_inStream,
	    hls::stream <lz4_compressd_dt>& in_lenOffset_Stream,
	    hls::stream <ap_uint <8>>& outStream,
	    hls::stream <bool>& endOfStream,
	    hls::stream <uint32_t>& compressdSizeStream,
	    uint32_t input_size
	    )

This module does the lz4 encoding by starting from WRITE_TOKEN state and based on the input read from stream the processing state changes.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - in_lit_inStream

        - Read Literals

    *
        - in_lenOffset_Stream

        - Read Offset-length

    *
        - outStream

        - Output data stream

    *
        - endOfStream

        - Stream indicating that all data is processed or not

    *
        - compressdSizeStream

        - Gives the compressed size for each 64K block

    *
        - input_size

        - Size of input

.. _doxid-namespacexf_1_1compression_1a406a552fbd844fc137a09aa3d5f3c8fd:
.. _cid-xf::compression::lz4divide:

lz4Divide
---------


.. code-block:: cpp
	
	#include "lz4_compress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int MAX_LIT_COUNT,
	    int PARALLEL_UNITS
	    >
	static void lz4Divide (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <uint8_t>& lit_outStream,
	    hls::stream <lz4_compressd_dt>& lenOffset_Stream,
	    uint32_t input_size,
	    uint32_t max_lit_limit [PARALLEL_UNITS],
	    uint32_t index
	    )

This is an intermediate module that seperates the input stream into two output streams, one literal stream and the other matchlen and offset stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - MAX_LIT_COUNT

        - maximum literal count

    *
        - PARALLEL_UNITS

        - determined based on number of parallel engines

    *
        - inStream

        - reference of input literals stream

    *
        - lit_outStream

        - Offset-length stream for literals in input stream

    *
        - lenOffset_Stream

        - output data stream

    *
        - input_size

        - end flag for stream

    *
        - max_lit_limit

        - Size for compressed stream

    *
        - index

        - size of input

.. _doxid-namespacexf_1_1compression_1a1710109f73f8732aa47f9f32ce48ffb1:
.. _cid-xf::compression::lz4decompress:

lz4Decompress
-------------


.. code-block:: cpp
	
	#include "lz4_decompress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void lz4Decompress (
	    hls::stream <ap_uint <8>>& inStream,
	    hls::stream <compressd_dt>& outStream,
	    uint32_t input_size
	    )

This module reads the compressed data from input stream and decodes the offset, match length and literals by processing in various decompress states.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inStream

        - Input stream 8bit

    *
        - outStream

        - Output stream 32bit

    *
        - input_size

        - Input size

.. _doxid-namespacexf_1_1compression_1af5497dbaf33a90230a0ff12efaa1f921:
.. _cid-xf::compression::lzcompress:

lzCompress
----------


.. code-block:: cpp
	
	#include "lz_compress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int MATCH_LEN,
	    int MATCH_LEVEL,
	    int LZ_DICT_SIZE,
	    int BIT,
	    int MIN_OFFSET,
	    int MIN_MATCH,
	    int LZ_MAX_OFFSET_LIMIT
	    >
	void lzCompress (
	    hls::stream <ap_uint <BIT>>& inStream,
	    hls::stream <compressd_dt>& outStream,
	    uint32_t input_size,
	    uint32_t left_bytes
	    )

This module reads input literals from stream and updates match length and offset of each literal.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - MATCH_LEN

        - match length

    *
        - MATCH_LEVEL

        - match level

    *
        - LZ_DICT_SIZE

        - dictionary size

    *
        - BIT

        - bit

    *
        - MIN_OFFSET

        - minimum offset

    *
        - MIN_MATCH

        - minimum match

    *
        - LZ_MAX_OFFSET_LIMIT

        - maximum offset limit

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - input_size

        - input size

    *
        - left_bytes

        - left bytes in block

.. _doxid-namespacexf_1_1compression_1ae02088f889b35880f0ca0da17a5f4a63:
.. _cid-xf::compression::lzdecompress:

lzDecompress
------------


.. code-block:: cpp
	
	#include "lz_decompress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int HISTORY_SIZE,
	    int READ_STATE,
	    int MATCH_STATE,
	    int LOW_OFFSET_STATE,
	    int LOW_OFFSET
	    >
	void lzDecompress (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <ap_uint <8>>& outStream,
	    uint32_t original_size
	    )

This module writes the literals to the output stream as is and when match length and offset are read, the literals will be read from the local dictionary based on offset until match length.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - HISTORY_SIZE

        - history size

    *
        - READ_STATE

        - read state

    *
        - MATCH_STATE

        - match state

    *
        - LOW_OFFSET_STATE

        - low offset state

    *
        - LOW_OFFSET

        - low offset

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - original_size

        - original size

.. _doxid-namespacexf_1_1compression_1ac009ea0c6deba998a4eec5ad2fa23d2b:
.. _cid-xf::compression::lzbestmatchfilter:

lzBestMatchFilter
-----------------


.. code-block:: cpp
	
	#include "lz_optional.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int MATCH_LEN,
	    int OFFSET_WINDOW
	    >
	void lzBestMatchFilter (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <compressd_dt>& outStream,
	    uint32_t input_size,
	    uint32_t left_bytes
	    )

Objective of this module is to pick character with higher match length in the offset window range.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - MATCH_LEN

        - length of matched segment

    *
        - OFFSET_WINDOW

        - output window

    *
        - inStream

        - intput stream

    *
        - outStream

        - output stream

    *
        - input_size

        - intput stream size

    *
        - left_bytes

        - bytes left in block

.. _doxid-namespacexf_1_1compression_1a18026639223349e8757bb45c2ded2ef0:
.. _cid-xf::compression::lzbooster:

lzBooster
---------


.. code-block:: cpp
	
	#include "lz_optional.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int MAX_MATCH_LEN,
	    int BOOSTER_OFFSET_WINDOW
	    >
	void lzBooster (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <compressd_dt>& outStream,
	    uint32_t input_size,
	    uint32_t left_bytes
	    )

This module helps in improving the compression ratio. Finds a better match length by performing more character matches with supported max match, while maintaining an offset window.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - MAX_MATCH_LEN

        - maximum length allowed for character match

    *
        - BOOSTER_OFFSET_WINDOW

        - offset window to store/match the character

    *
        - inStream

        - input stream 32bit per read

    *
        - outStream

        - output stream 32bit per write

    *
        - input_size

        - intput size

    *
        - left_bytes

        - last 64 left over bytes

.. _doxid-namespacexf_1_1compression_1ae86722f675ee482734f547af7170cc8b:
.. _cid-xf::compression::lzfilter:

lzFilter
--------


.. code-block:: cpp
	
	#include "lz_optional.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void lzFilter (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <compressd_dt>& outStream,
	    uint32_t input_size,
	    uint32_t left_bytes
	    )

This module checks if match length exists, and if match length exists it filters the match length -1 characters writing to output stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - MATCH_LEN

        - length of matched segment

    *
        - OFFSET_WINDOW

        - output window

    *
        - inStream

        - intput stream

    *
        - outStream

        - output stream

    *
        - input_size

        - intput stream size

    *
        - left_bytes

        - bytes left in block

.. _doxid-namespacexf_1_1compression_1a6c557befca577c72f320e66870a4241b:
.. _cid-xf::compression::snappycompress:

snappyCompress
--------------


.. code-block:: cpp
	
	#include "snappy_compress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void snappyCompress (
	    hls::stream <uint8_t>& in_lit_inStream,
	    hls::stream <snappy_compressd_dt>& in_lenOffset_Stream,
	    hls::stream <ap_uint <8>>& outStream,
	    hls::stream <bool>& endOfStream,
	    hls::stream <uint32_t>& compressdSizeStream,
	    uint32_t input_size
	    )

This module encodes the input data based on the snappy algorithm.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - in_lit_inStream

        - reference of input literals stream

    *
        - in_lenOffset_Stream

        - Offset-length stream for literals in input stream

    *
        - outStream

        - output data stream

    *
        - endOfStream

        - end flag for stream

    *
        - compressdSizeStream

        - Size for compressed stream

    *
        - input_size

        - size of input

.. _doxid-namespacexf_1_1compression_1a8d8328c8c85e9ad5af6dca1d7bd85581:
.. _cid-xf::compression::snappydivide:

snappyDivide
------------


.. code-block:: cpp
	
	#include "snappy_compress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int MAX_LIT_COUNT,
	    int MAX_LIT_STREAM_SIZE,
	    int PARALLEL_UNITS
	    >
	void snappyDivide (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <uint8_t>& lit_outStream,
	    hls::stream <snappy_compressd_dt>& lenOffset_Stream,
	    uint32_t input_size,
	    uint32_t max_lit_limit [PARALLEL_UNITS],
	    uint32_t index
	    )

This is an intermediate module that seperates the input stream into two output streams, one literal stream and the other matchlen and offset stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - MAX_LIT_COUNT

        - maximum literal count

    *
        - MAX_LIT_STREAM_SIZE

        - max literal size

    *
        - PARALLEL_UNITS

        - determined based on number of parallel engines

    *
        - inStream

        - reference of input literals stream

    *
        - lit_outStream

        - Offset-length stream for literals in input stream

    *
        - lenOffset_Stream

        - output data stream

    *
        - input_size

        - end flag for stream

    *
        - max_lit_limit

        - Size for compressed stream

    *
        - index

        - size of input

.. _doxid-namespacexf_1_1compression_1afaff624736a65e4b128f3ebc325c1a03:
.. _cid-xf::compression::snappydecompress:

snappyDecompress
----------------


.. code-block:: cpp
	
	#include "snappy_decompress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void snappyDecompress (
	    hls::stream <uintV_t>& inStream,
	    hls::stream <encoded_dt>& outStream,
	    uint32_t input_size
	    )

This module decodes the compressed data based on the snappy decompression format.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - READ_STATE

        - current state

    *
        - MATCH_STATE

        - match the characters

    *
        - LOW_OFFSET_STATE

        - matching the lowest distance characters

    *
        - READ_TOKEN

        - read from stream

    *
        - READ_LITERAL

        - read literals

    *
        - READ_LITLEN_60

        - standard specific literal length

    *
        - READ_LITLEN_61

        - standard specific literal length

    *
        - READ_LITLEN_60_CONT

        - standard specific literal length

    *
        - READ_OFFSET

        - read offset

    *
        - READ_OFFSET_C01

        - standard specific offset support

    *
        - READ_OFFSET_C10

        - standard specific offset support

    *
        - READ_LITLEN_61_CONT

        - continue standard specific literal length

    *
        - READ_OFFSET_C10_CONT

        - continue standard specific offset

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - input_size

        - input data size

