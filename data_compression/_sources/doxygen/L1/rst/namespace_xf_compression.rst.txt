.. index:: pair: namespace; compression
.. _doxid-namespacexf_1_1compression:
.. _cid-xf::compression:

namespace compression
=====================

.. toctree::
	:hidden:



.. _doxid-namespacexf_1_1compression_1a63dcf47b0c08067039934059ab21e804:
.. _cid-xf::compression::hstream16b_t:
.. _doxid-namespacexf_1_1compression_1a59808ee7bb972242ab2bdc922d77ce7a:
.. _cid-xf::compression::hstream32b_t:
.. _doxid-namespacexf_1_1compression_1a038c2e70dba826fedd2c886c33029364:
.. _cid-xf::compression::hstream64b_t:
.. _doxid-namespacexf_1_1compression_1af5b73efc1bfcd03caea709e4a26cf7fd:
.. _cid-xf::compression::hstream128b_t:
.. _doxid-namespacexf_1_1compression_1a84f1e03d7a8f049d0112baf9bef48dad:
.. _cid-xf::compression::hstream256b_t:
.. _doxid-namespacexf_1_1compression_1a3f3ac971a14799f4228ca9684f25f488:
.. _cid-xf::compression::hstream512b_t:
.. _doxid-namespacexf_1_1compression_1a1fe2ca151b9dc82cc97df85a4fc2f457:
.. _cid-xf::compression::kstream16b_t:
.. _doxid-namespacexf_1_1compression_1a40438acf043b65ba3fd49e506e95ab5c:
.. _cid-xf::compression::kstream32b_t:
.. _doxid-namespacexf_1_1compression_1adbf8a53f65fef42f37104d8901249f2e:
.. _cid-xf::compression::kstream64b_t:
.. _doxid-namespacexf_1_1compression_1a29b1f7c0f966029cb6f85c06e67066c1:
.. _cid-xf::compression::kstream128b_t:
.. _doxid-namespacexf_1_1compression_1ab132af7a8fcfa2f2c71095933111c168:
.. _cid-xf::compression::kstream256b_t:
.. _doxid-namespacexf_1_1compression_1a88c30bba11f925d9c5eec323e563a1e0:
.. _cid-xf::compression::kstream512b_t:
.. _doxid-namespacexf_1_1compression_1a499ffa6d30e499c112e1ff0d30f74217:
.. _cid-xf::compression::uintmemwidth_t:
.. _doxid-namespacexf_1_1compression_1a9d41d94c1981c79849a420c8a6a75aa4:
.. _cid-xf::compression::compressd_dt:
.. _doxid-namespacexf_1_1compression_1a8ca006fee7f286d35d08e313f7c8e4fc:
.. _cid-xf::compression::streamdt:
.. _doxid-namespacexf_1_1compression_1a5a144d8f44cabd29a372b35ca034e306:
.. _cid-xf::compression::lz4_compressd_dt:
.. _doxid-namespacexf_1_1compression_1ab4e55f033c3c15aff4ddf6733ab52059:
.. _cid-xf::compression::snappy_compressd_dt:
.. _doxid-namespacexf_1_1compression_1a06e4c8be7794b2cad357e9eda2cfca68:
.. _cid-xf::compression::kgmemdwidth:
.. _doxid-namespacexf_1_1compression_1a7891a83be06e71b8f9d20f835b36b0e0:
.. _cid-xf::compression::kgmemburstsize:
.. _doxid-namespacexf_1_1compression_1a76067a65140dee8a0b343c0c4a038328:
.. _cid-xf::compression::c_gmemburstsize:
.. _doxid-namespacexf_1_1compression_1a892004a2d8e3a8838264e1ffeefd5d48:
.. _cid-xf::compression::c_sizestreamdepth:
.. _doxid-namespacexf_1_1compression_1ab76aac7a925d18862ee713a30d6d2cc4:
.. _cid-xf::compression::c_lz4maxliteralcount:
.. _doxid-namespacexf_1_1compression_1a06ea123d6777f6a59da38acc1a1afa43:
.. _cid-xf::compression::c_snappymaxliteralcount:
.. _doxid-namespacexf_1_1compression_1afef37bf5f3aab4e326d2ec50c5c7849c:
.. _cid-xf::compression::c_snappymaxliteralstream:
.. _doxid-namespacexf_1_1compression_1ae3b31fa1202254120d2c391b1df0692c:
.. _cid-xf::compression::c_ltreesize:
.. _doxid-namespacexf_1_1compression_1a63e73826ad983458349297e4b1e70db8:
.. _cid-xf::compression::c_dtreesize:
.. _doxid-namespacexf_1_1compression_1abee5cdb5326bba1c4643ec20c5560bb4:
.. _cid-xf::compression::c_bltreesize:
.. _doxid-namespacexf_1_1compression_1a9a710f6021ff8fcdfb109306161d635e:
.. _cid-xf::compression::c_maxcodesize:
.. _doxid-namespacexf_1_1compression_1a75d9bdfeaf9160fe3824d20fce59b707:
.. _cid-xf::compression::lzdecompresszlibeos:
.. _doxid-namespacexf_1_1compression_1a20510d52a307b99e3b8b57086b6e29ea:
.. _cid-xf::compression::lzdecompresszlib:
.. _doxid-namespacexf_1_1compression_1a47d7ad4176082bc96c2bac541eeb1ebc:
.. _cid-xf::compression::s2mmeosnbzlib:
.. _doxid-namespacexf_1_1compression_1aeeb97229200760bf2bdab6197afbe5ed:
.. _cid-xf::compression::gzmm2s:
.. _doxid-namespacexf_1_1compression_1ab3aa4c7f72a209cf2ba9b1f5f9c615a0:
.. _cid-xf::compression::mm2sfreq:
.. _doxid-namespacexf_1_1compression_1a37229cf7278a6a0a8f70632dc89ca045:
.. _cid-xf::compression::upsizersizestream:
.. _doxid-namespacexf_1_1compression_1a81d659dac4d01eab0bf4d2a5ca6a6eba:
.. _cid-xf::compression::s2mmcompressfreq:
.. _doxid-namespacexf_1_1compression_1a92c7f1dabb7a33d211052bea7f2354b7:
.. _cid-xf::compression::s2mmcompress:
.. _doxid-namespacexf_1_1compression_1a4afc3c9d6ec928d974b3fd06874ed178:
.. _cid-xf::compression::s2mmdecompress:
.. ref-code-block:: cpp
	:class: overview-code-block

	// typedefs

	typedef qdma_axis <8, 0, 0, 0> :ref:`hStream8b_t<doxid-namespacexf_1_1compression_1a5e9b06498ea31587312aebc3ebe8dbce>`
	typedef qdma_axis <16, 0, 0, 0> hStream16b_t
	typedef qdma_axis <32, 0, 0, 0> hStream32b_t
	typedef qdma_axis <64, 0, 0, 0> hStream64b_t
	typedef qdma_axis <128, 0, 0, 0> hStream128b_t
	typedef qdma_axis <256, 0, 0, 0> hStream256b_t
	typedef qdma_axis <512, 0, 0, 0> hStream512b_t
	typedef ap_axiu <8, 0, 0, 0> :ref:`kStream8b_t<doxid-namespacexf_1_1compression_1aa3f24689e5c4b59c4d3dc4b3427fbce4>`
	typedef ap_axiu <16, 0, 0, 0> kStream16b_t
	typedef ap_axiu <32, 0, 0, 0> kStream32b_t
	typedef ap_axiu <64, 0, 0, 0> kStream64b_t
	typedef ap_axiu <128, 0, 0, 0> kStream128b_t
	typedef ap_axiu <256, 0, 0, 0> kStream256b_t
	typedef ap_axiu <512, 0, 0, 0> kStream512b_t
	typedef ap_uint <kGMemDWidth> uintMemWidth_t
	typedef ap_uint <32> compressd_dt
	typedef ap_uint <8> streamDt
	typedef ap_uint <64> lz4_compressd_dt
	typedef ap_uint <64> snappy_compressd_dt

	// global variables

	const int kGMemDWidth
	const int kGMemBurstSize
	const int c_gmemBurstSize
	const int c_sizeStreamDepth
	const int c_lz4MaxLiteralCount
	const int c_snappyMaxLiteralCount
	const int c_snappyMaxLiteralStream
	const int c_lTreeSize
	const int c_dTreeSize
	const int c_bLTreeSize
	const int c_maxCodeSize

Typedefs
--------

.. _doxid-namespacexf_1_1compression_1a5e9b06498ea31587312aebc3ebe8dbce:
.. _cid-xf::compression::hstream8b_t:
.. ref-code-block:: cpp
	:class: title-code-block

	typedef qdma_axis <8, 0, 0, 0> hStream8b_t

typedef hStream<bit_width>_t User defined types for data streaming between host and kernel.

.. _doxid-namespacexf_1_1compression_1aa3f24689e5c4b59c4d3dc4b3427fbce4:
.. _cid-xf::compression::kstream8b_t:
.. ref-code-block:: cpp
	:class: title-code-block

	typedef ap_axiu <8, 0, 0, 0> kStream8b_t

typedef kStream<bit_width>_t User defined types for data streaming between kernels.


.. FunctionSection




.. _doxid-namespacexf_1_1compression_1a5a3a21594ddb4e9a8ca745545fad9008:
.. _cid-xf::compression::axis2hlsstreamfixedsize:

axis2hlsStreamFixedSize
-----------------------


.. code-block:: cpp
	
	#include "axi_stream_utils.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void axis2hlsStreamFixedSize (
	    hls::stream <hStream8b_t>& inputAxiStream,
	    hls::stream <streamDt>& inputStream,
	    uint32_t inputSize
	    )

Read data from axi stream and write to internal hls stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inputAxisStream

        - incoming axi stream

    *
        - inputStream

        - output hls stream

    *
        - inputSize

        - size of the data coming from input axi stream

.. _doxid-namespacexf_1_1compression_1ac004d236d2fa205dcdb32942e3088021:
.. _cid-xf::compression::hlsstream2axis:

hlsStream2axis
--------------


.. code-block:: cpp
	
	#include "axi_stream_utils.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void hlsStream2axis (
	    hls::stream <streamDt>& outputStream,
	    hls::stream <bool>& outStreamEos,
	    hls::stream <hStream8b_t>& outputAxiStream,
	    hls::stream <uint32_t>& outStreamSize,
	    hls::stream <hStream32b_t>& outAxiStreamSize
	    )

Read data from hls stream till the end of stream is indicated and write this data to axi stream. The total size of data is written 32-bit wide axi stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - outputStream

        - internal output hls stream

    *
        - outStreamEos

        - stream to specify the end of stream

    *
        - outputAxisStream

        - output stream going to axi

    *
        - outStreamSize

        - size of the data coming to output from stream

    *
        - outAxiStreamSize

        - size of the data to go through output axi stream

.. _doxid-namespacexf_1_1compression_1a19df6322c84b51215524c800f0a2c5a2:
.. _cid-xf::compression::hlsstream2axistreamfixedsize:

hlsStream2axiStreamFixedSize
----------------------------


.. code-block:: cpp
	
	#include "axi_stream_utils.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void hlsStream2axiStreamFixedSize (
	    hls::stream <streamDt>& hlsInStream,
	    hls::stream <hStream8b_t>& outputAxiStream,
	    uint32_t originalSize
	    )

Read data from internal hls stream and write to output axi stream for the given size.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - hlsInStream

        - internal hls stream

    *
        - outputAxisStream

        - output axi stream

    *
        - originalSize

        - output data size to be written to output stream

.. _doxid-namespacexf_1_1compression_1a09c15eac11254675def36b8a4e3d29c6:
.. _cid-xf::compression::axis2hlsstream:

axis2hlsStream
--------------


.. code-block:: cpp
	
	#include "axi_stream_utils.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <uint16_t STREAMDWIDTH>
	void axis2hlsStream (
	    hls::stream <qdma_axis <STREAMDWIDTH, 0, 0, 0>>& inAxiStream,
	    hls::stream <ap_uint <STREAMDWIDTH>>& outStream
	    )

Read N-bit wide data from internal hls streams and write to output axi stream. N is passed as template parameter.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - STREAMDWIDTH

        - stream data width

    *
        - inAxiStream

        - input kernel axi stream

    *
        - outStream

        - output hls stream

.. _doxid-namespacexf_1_1compression_1aab78544adcc142b568ec98bbc5f34c79:
.. _cid-xf::compression::streamdatadm2k:

streamDataDm2k
--------------


.. code-block:: cpp
	
	#include "axi_stream_utils.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <uint16_t STREAMDWIDTH>
	void streamDataDm2k (
	    hls::stream <ap_uint <STREAMDWIDTH>>& in,
	    hls::stream <ap_axiu <STREAMDWIDTH, 0, 0, 0>>& inStream_dm,
	    uint32_t inputSize
	    )

Write N-bit wide data of given size from hls stream to kernel axi stream. N is passed as template parameter.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - STREAMDWIDTH

        - stream data width

    *
        - in

        - input hls stream

    *
        - inStream_dm

        - output kernel stream

    *
        - inputSize

        - size of data in to be transferred

.. _doxid-namespacexf_1_1compression_1ae46cc628c0117229054d4dea39e6cc17:
.. _cid-xf::compression::streamdatak2dm:

streamDataK2dm
--------------


.. code-block:: cpp
	
	#include "axi_stream_utils.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void streamDataK2dm (
	    hls::stream <ap_uint <8>>& out,
	    hls::stream <bool>& bytEos,
	    hls::stream <uint32_t>& encodedSize,
	    hls::stream <kStream8b_t>& dmOutStream
	    )

Read data from kernel axi stream byte by byte and write to hls stream and indicate end of stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - out

        - output hls stream

    *
        - bytEos

        - internal stream which indicates end of data stream

    *
        - dataSize

        - size of data in streams

    *
        - dmOutStream

        - input kernel axi stream to be read

.. _doxid-namespacexf_1_1compression_1aec51f097d8730e92b29f49e4d2cafd63:
.. _cid-xf::compression::lz4compress:

lz4Compress
-----------


.. code-block:: cpp
	
	#include "lz4_compress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void lz4Compress (
	    hls::stream <uint8_t>& in_lit_inStream,
	    hls::stream <lz4_compressd_dt>& in_lenOffset_Stream,
	    hls::stream <ap_uint <8>>& outStream,
	    hls::stream <bool>& endOfStream,
	    hls::stream <uint32_t>& compressdSizeStream,
	    uint32_t input_size
	    )

This module does the lz4 encoding by starting from WRITE_TOKEN state and based on the input read from stream the processing state changes.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - in_lit_inStream

        - Read Literals

    *
        - in_lenOffset_Stream

        - Read Offset-length

    *
        - outStream

        - Output data stream

    *
        - endOfStream

        - Stream indicating that all data is processed or not

    *
        - compressdSizeStream

        - Gives the compressed size for each 64K block

    *
        - input_size

        - Size of input

.. _doxid-namespacexf_1_1compression_1a6d894e598a08ce551be1ea538540a767:
.. _cid-xf::compression::lz4divide:

lz4Divide
---------


.. code-block:: cpp
	
	#include "lz4_compress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void lz4Divide (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <uint8_t>& lit_outStream,
	    hls::stream <lz4_compressd_dt>& lenOffset_Stream,
	    uint32_t input_size,
	    uint32_t max_lit_limit [PARALLEL_BLOCK],
	    uint32_t index
	    )

This is an intermediate module that seperates the input stream into two output streams, one literal stream and the other matchlen and offset stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inStream

        - reference of input literals stream

    *
        - lit_outStream

        - Offset-length stream for literals in input stream

    *
        - lenOffset_Stream

        - output data stream

    *
        - input_size

        - end flag for stream

    *
        - max_lit_limit

        - Size for compressed stream

    *
        - index

        - size of input

.. _doxid-namespacexf_1_1compression_1a1710109f73f8732aa47f9f32ce48ffb1:
.. _cid-xf::compression::lz4decompress:

lz4Decompress
-------------


.. code-block:: cpp
	
	#include "lz4_decompress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void lz4Decompress (
	    hls::stream <ap_uint <8>>& inStream,
	    hls::stream <compressd_dt>& outStream,
	    uint32_t input_size
	    )

This module reads the compressed data from input stream and decodes the offset, match length and literals by processing in various decompress states.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inStream

        - Input stream 8bit

    *
        - outStream

        - Output stream 32bit

    *
        - input_size

        - Input size

.. _doxid-namespacexf_1_1compression_1af5497dbaf33a90230a0ff12efaa1f921:
.. _cid-xf::compression::lzcompress:

lzCompress
----------


.. code-block:: cpp
	
	#include "lz_compress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int MATCH_LEN,
	    int MATCH_LEVEL,
	    int LZ_DICT_SIZE,
	    int BIT,
	    int MIN_OFFSET,
	    int MIN_MATCH,
	    int LZ_MAX_OFFSET_LIMIT
	    >
	void lzCompress (
	    hls::stream <ap_uint <BIT>>& inStream,
	    hls::stream <compressd_dt>& outStream,
	    uint32_t input_size,
	    uint32_t left_bytes
	    )

This module reads input literals from stream and updates match length and offset of each literal.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - MATCH_LEN

        - match length

    *
        - MATCH_LEVEL

        - match level

    *
        - LZ_DICT_SIZE

        - dictionary size

    *
        - BIT

        - bit

    *
        - MIN_OFFSET

        - minimum offset

    *
        - MIN_MATCH

        - minimum match

    *
        - LZ_MAX_OFFSET_LIMIT

        - maximum offset limit

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - input_size

        - input size

    *
        - left_bytes

        - left bytes in block

.. _doxid-namespacexf_1_1compression_1ae02088f889b35880f0ca0da17a5f4a63:
.. _cid-xf::compression::lzdecompress:

lzDecompress
------------


.. code-block:: cpp
	
	#include "lz_decompress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int HISTORY_SIZE,
	    int READ_STATE,
	    int MATCH_STATE,
	    int LOW_OFFSET_STATE,
	    int LOW_OFFSET
	    >
	void lzDecompress (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <ap_uint <8>>& outStream,
	    uint32_t original_size
	    )

This module writes the literals to the output stream as is and when match length and offset are read, the literals will be read from the local dictionary based on offset until match length.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - HISTORY_SIZE

        - history size

    *
        - READ_STATE

        - read state

    *
        - MATCH_STATE

        - match state

    *
        - LOW_OFFSET_STATE

        - low offset state

    *
        - LOW_OFFSET

        - low offset

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - original_size

        - original size

.. _doxid-namespacexf_1_1compression_1ac009ea0c6deba998a4eec5ad2fa23d2b:
.. _cid-xf::compression::lzbestmatchfilter:

lzBestMatchFilter
-----------------


.. code-block:: cpp
	
	#include "lz_optional.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int MATCH_LEN,
	    int OFFSET_WINDOW
	    >
	void lzBestMatchFilter (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <compressd_dt>& outStream,
	    uint32_t input_size,
	    uint32_t left_bytes
	    )

Objective of this module is to pick character with higher match length in the offset window range.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - MATCH_LEN

        - length of matched segment

    *
        - OFFSET_WINDOW

        - output window

    *
        - inStream

        - intput stream

    *
        - outStream

        - output stream

    *
        - input_size

        - intput stream size

    *
        - left_bytes

        - bytes left in block

.. _doxid-namespacexf_1_1compression_1a18026639223349e8757bb45c2ded2ef0:
.. _cid-xf::compression::lzbooster:

lzBooster
---------


.. code-block:: cpp
	
	#include "lz_optional.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int MAX_MATCH_LEN,
	    int BOOSTER_OFFSET_WINDOW
	    >
	void lzBooster (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <compressd_dt>& outStream,
	    uint32_t input_size,
	    uint32_t left_bytes
	    )

This module helps in improving the compression ratio. Finds a better match length by performing more character matches with supported max match, while maintaining an offset window.

Following is simple demonstartion of booster input and output.

**Input:** even though HAPPY BIRTHDAY can be matched fully but match length is still 6 due to MATCH_LEN Input stream each data is 32bit and contains following:

* character data (8bit) - .....HAPPY BIRTHDAY .......... HAPPY BIRTHDAY

* match length (8bit) - .....000000000000001..........060000000000000

* offset (16bit) - .....xy....p......k............x0000000000000

**Output** - with booster technique match length is increased to 14

* character data (8bit) - .....HAPPY BIRTHDAY .......... HAPPY BIRTHDAY

* match length (8bit) - .....000000000000001..........0140000000000000

* offset (16bit) - .....xy....p......k............x0000000000000

* Improves Compression Ratio

* Increase in BRAM resources for BOOSTER_OFFSET_WINDOW local memory



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - MAX_MATCH_LEN

        - maximum length allowed for character match

    *
        - BOOSTER_OFFSET_WINDOW

        - offset window to store/match the character

    *
        - inStream

        - input stream 32bit per read

    *
        - outStream

        - output stream 32bit per write

    *
        - input_size

        - intput size

    *
        - left_bytes

        - last 64 left over bytes

.. _doxid-namespacexf_1_1compression_1ae86722f675ee482734f547af7170cc8b:
.. _cid-xf::compression::lzfilter:

lzFilter
--------


.. code-block:: cpp
	
	#include "lz_optional.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void lzFilter (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <compressd_dt>& outStream,
	    uint32_t input_size,
	    uint32_t left_bytes
	    )

This module checks if match length exists, and if match length exists it filters the match length -1 characters writing to output stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - MATCH_LEN

        - length of matched segment

    *
        - OFFSET_WINDOW

        - output window

    *
        - inStream

        - intput stream

    *
        - outStream

        - output stream

    *
        - input_size

        - intput stream size

    *
        - left_bytes

        - bytes left in block

.. _doxid-namespacexf_1_1compression_1aa7ee9a50a179566a67c1ad18180cc1a6:
.. _cid-xf::compression::mm2snb:

mm2sNb
------


.. code-block:: cpp
	
	#include "mm2s.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int DATAWIDTH,
	    int BURST_SIZE,
	    int NUM_BLOCKS
	    >
	void mm2sNb (
	    const ap_uint <DATAWIDTH>* in,
	    const uint32_t _input_idx [PARALLEL_BLOCK],
	    hls::stream <ap_uint <DATAWIDTH>> outStream [PARALLEL_BLOCK],
	    const uint32_t _input_size [PARALLEL_BLOCK]
	    )

This module reads 512bit data from memory interface and writes to the stream. Writing to the multiple data streams is non-blocking call which is done using is_full() API.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DATAWIDTH

        - width of data bus

    *
        - BURST_SIZE

        - burst size of the data transfers

    *
        - NUM_BLOCKS

        - number of blocks

    *
        - in

        - input memory address

    *
        - _input_idx

        - input index

    *
        - outStream

        - output stream

    *
        - _input_size

        - intput stream size

.. _doxid-namespacexf_1_1compression_1a04a8396c062eb130c73c6156e8f57f83:
.. _cid-xf::compression::mm2snbroundoff:

mm2sNbRoundOff
--------------


.. code-block:: cpp
	
	#include "mm2s.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int DATAWIDTH,
	    int BURST_SIZE,
	    int NUM_BLOCKS
	    >
	void mm2sNbRoundOff (
	    const ap_uint <DATAWIDTH>* in,
	    const uint32_t _input_idx [PARALLEL_BLOCK],
	    hls::stream <ap_uint <DATAWIDTH>> outStream [PARALLEL_BLOCK],
	    const uint32_t _input_size [PARALLEL_BLOCK]
	    )

This module is same as mm2sNb API but with an extra handling rounding off the indexing to maximum buffer size for P2P decompression.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DATAWIDTH

        - width of data bus

    *
        - BURST_SIZE

        - burst size of the data transfers

    *
        - NUM_BLOCKS

        - number of blocks

    *
        - in

        - input memory address

    *
        - _input_idx

        - input index

    *
        - outStream

        - output stream

    *
        - _input_size

        - intput stream size

    *
        - max_buffer_size_in_bytes

        - Maximum buffer size for indexing

.. _doxid-namespacexf_1_1compression_1abf8c23016af9dd2af0991eba67b001db:
.. _cid-xf::compression::s2mmeosnb:

s2mmEosNb
---------


.. code-block:: cpp
	
	#include "s2mm.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    class STREAM_SIZE_DT,
	    int BURST_SIZE,
	    int DATAWIDTH,
	    int NUM_BLOCKS
	    >
	void s2mmEosNb (
	    ap_uint <DATAWIDTH>* out,
	    const uint32_t output_idx [PARALLEL_BLOCK],
	    hls::stream <ap_uint <DATAWIDTH>> inStream [PARALLEL_BLOCK],
	    hls::stream <bool> endOfStream [PARALLEL_BLOCK],
	    hls::stream <uint32_t> compressedSize [PARALLEL_BLOCK],
	    STREAM_SIZE_DT output_size [PARALLEL_BLOCK]
	    )

This module reads DATAWIDTH data from stream until end of stream happens and writes the data to DDR. Reading data from multiple data streams is non-blocking which is done using empty() API.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - STREAM_SIZE_DT

        - Stream size class instance

    *
        - BURST_SIZE

        - burst size of the data transfers

    *
        - DATAWIDTH

        - width of data bus

    *
        - NUM_BLOCKS

        - number of blocks

    *
        - out

        - output memory address

    *
        - output_idx

        - output index

    *
        - inStream

        - input stream

    *
        - endOfStream

        - end flag for stream

    *
        - compressedSize

        - size of compressed stream

    *
        - output_size

        - output size

.. _doxid-namespacexf_1_1compression_1a8f2df948c53a68705acb3f76da89525f:
.. _cid-xf::compression::s2mmnb:

s2mmNb
------


.. code-block:: cpp
	
	#include "s2mm.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    class STREAM_SIZE_DT,
	    int BURST_SIZE,
	    int DATAWIDTH,
	    int NUM_BLOCKS
	    >
	void s2mmNb (
	    ap_uint <DATAWIDTH>* out,
	    const uint32_t output_idx [PARALLEL_BLOCK],
	    hls::stream <ap_uint <DATAWIDTH>> inStream [PARALLEL_BLOCK],
	    const STREAM_SIZE_DT input_size [PARALLEL_BLOCK]
	    )

This module reads DATAWIDTH data from stream based on size stream and writes the data to DDR. Reading data from multiple data streams is non-blocking which is done using empty() API.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - STREAM_SIZE_DT

        - Stream size class instance

    *
        - BURST_SIZE

        - burst size of the data transfers

    *
        - DATAWIDTH

        - width of data bus

    *
        - NUM_BLOCKS

        - number of blocks

    *
        - out

        - output memory address

    *
        - output_idx

        - output index

    *
        - inStream

        - input stream

    *
        - input_size

        - input size

.. _doxid-namespacexf_1_1compression_1a6c557befca577c72f320e66870a4241b:
.. _cid-xf::compression::snappycompress:

snappyCompress
--------------


.. code-block:: cpp
	
	#include "snappy_compress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void snappyCompress (
	    hls::stream <uint8_t>& in_lit_inStream,
	    hls::stream <snappy_compressd_dt>& in_lenOffset_Stream,
	    hls::stream <ap_uint <8>>& outStream,
	    hls::stream <bool>& endOfStream,
	    hls::stream <uint32_t>& compressdSizeStream,
	    uint32_t input_size
	    )

This module encodes the input data based on the snappy algorithm.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - in_lit_inStream

        - reference of input literals stream

    *
        - in_lenOffset_Stream

        - Offset-length stream for literals in input stream

    *
        - outStream

        - output data stream

    *
        - endOfStream

        - end flag for stream

    *
        - compressdSizeStream

        - Size for compressed stream

    *
        - input_size

        - size of input

.. _doxid-namespacexf_1_1compression_1a7e0ce1861ebf042566bf6186274129c1:
.. _cid-xf::compression::snappydivide:

snappyDivide
------------


.. code-block:: cpp
	
	#include "snappy_compress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void snappyDivide (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <uint8_t>& lit_outStream,
	    hls::stream <snappy_compressd_dt>& lenOffset_Stream,
	    uint32_t input_size,
	    uint32_t max_lit_limit [PARALLEL_BLOCK],
	    uint32_t index
	    )

This is an intermediate module that seperates the input stream into two output streams, one literal stream and the other matchlen and offset stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inStream

        - reference of input literals stream

    *
        - lit_outStream

        - Offset-length stream for literals in input stream

    *
        - lenOffset_Stream

        - output data stream

    *
        - input_size

        - end flag for stream

    *
        - max_lit_limit

        - Size for compressed stream

    *
        - index

        - size of input

.. _doxid-namespacexf_1_1compression_1afaff624736a65e4b128f3ebc325c1a03:
.. _cid-xf::compression::snappydecompress:

snappyDecompress
----------------


.. code-block:: cpp
	
	#include "snappy_decompress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void snappyDecompress (
	    hls::stream <uintV_t>& inStream,
	    hls::stream <encoded_dt>& outStream,
	    uint32_t input_size
	    )

This module decodes the compressed data based on the snappy decompression format.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - input_size

        - input size

.. _doxid-namespacexf_1_1compression_1af0dd6df2dd3def8fe03cf1bcb0242fea:
.. _cid-xf::compression::streamdownsizer:

streamDownsizer
---------------


.. code-block:: cpp
	
	#include "stream_downsizer.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    class SIZE_DT,
	    int IN_WIDTH,
	    int OUT_WIDTH
	    >
	void streamDownsizer (
	    hls::stream <ap_uint <IN_WIDTH>>& inStream,
	    hls::stream <ap_uint <OUT_WIDTH>>& outStream,
	    SIZE_DT input_size
	    )

This module reads the IN_WIDTH size from the data stream and downsizes the data to OUT_WIDTH size and writes to output stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - SIZE_DT

        - data size

    *
        - IN_WIDTH

        - input width

    *
        - OUT_WIDTH

        - output width

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - input_size

        - input size

.. _doxid-namespacexf_1_1compression_1a6a8abb131866b2039b8a790cdb03b3ec:
.. _cid-xf::compression::streamdownsizerp2p:

streamDownsizerP2P
------------------


.. code-block:: cpp
	
	#include "stream_downsizer.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    class SIZE_DT,
	    int IN_WIDTH,
	    int OUT_WIDTH
	    >
	void streamDownsizerP2P (
	    hls::stream <ap_uint <IN_WIDTH>>& inStream,
	    hls::stream <ap_uint <OUT_WIDTH>>& outStream,
	    SIZE_DT input_size,
	    SIZE_DT input_start_idx
	    )

This module reads the IN_WIDTH size from the data stream and downsizes the data to OUT_WIDTH size and writes to output stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - SIZE_DT

        - data size

    *
        - IN_WIDTH

        - input width

    *
        - OUT_WIDTH

        - output width

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - input_size

        - input size

    *
        - input_start_idx

        - input starting index

.. _doxid-namespacexf_1_1compression_1af54dd9dffdf3f3c37bde15680737b3b1:
.. _cid-xf::compression::streamupsizer:

streamUpsizer
-------------


.. code-block:: cpp
	
	#include "stream_upsizer.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    class SIZE_DT,
	    int IN_WIDTH,
	    int OUT_WIDTH
	    >
	void streamUpsizer (
	    hls::stream <ap_uint <IN_WIDTH>>& inStream,
	    hls::stream <ap_uint <OUT_WIDTH>>& outStream,
	    SIZE_DT original_size
	    )

This module reads IN_WIDTH from the input stream and accumulate the consecutive reads until OUT_WIDTH and writes the OUT_WIDTH data to output stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - SIZE_DT

        - stream size class instance

    *
        - IN_WIDTH

        - input data width

    *
        - OUT_WIDTH

        - output data width

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - original_size

        - original stream size

.. _doxid-namespacexf_1_1compression_1a36b991468a0b84916b936ba15b7bb28e:
.. _cid-xf::compression::upsizereos:

upsizerEos
----------


.. code-block:: cpp
	
	#include "stream_upsizer.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    class SIZE_DT,
	    int IN_WIDTH,
	    int OUT_WIDTH
	    >
	void upsizerEos (
	    hls::stream <ap_uint <IN_WIDTH>>& inStream,
	    hls::stream <bool>& inStream_eos,
	    hls::stream <ap_uint <OUT_WIDTH>>& outStream,
	    hls::stream <bool>& outStream_eos
	    )

This module reads IN_WIDTH data from input stream based on end of stream and accumulate the consecutive reads until OUT_WIDTH and then writes OUT_WIDTH data to output stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - SIZE_DT

        - stream size class instance

    *
        - IN_WIDTH

        - input data width

    *
        - OUT_WIDTH

        - output data width

    *
        - inStream

        - input stream

    *
        - inStream_eos

        - input end of stream flag

    *
        - outStream

        - output stream

    *
        - outStream_eos

        - output end of stream flag

