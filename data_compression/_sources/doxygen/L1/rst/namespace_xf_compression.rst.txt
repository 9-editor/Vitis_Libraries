.. index:: pair: namespace; compression
.. _doxid-namespacexf_1_1compression:
.. _cid-xf::compression:

namespace compression
=====================

.. toctree::
	:hidden:



.. _doxid-namespacexf_1_1compression_1aedefc370e7c5decaae14c3fccf7ad241:
.. _cid-xf::compression::uintv_t:
.. _doxid-namespacexf_1_1compression_1a5a82c6f02f2d5d38132348972797bded:
.. _cid-xf::compression::uint512_t:
.. _doxid-namespacexf_1_1compression_1a7df84dfa6d1eb1c98444d977ec6ee91d:
.. _cid-xf::compression::encoded_dt:
.. ref-code-block:: cpp
	:class: overview-code-block

	// typedefs

	typedef ap_uint <BIT> uintV_t
	typedef ap_uint <GMEM_DWIDTH> uint512_t
	typedef ap_uint <32> encoded_dt


.. FunctionSection




.. _doxid-namespacexf_1_1compression_1aec51f097d8730e92b29f49e4d2cafd63:
.. _cid-xf::compression::lz4compress:

lz4Compress
-----------


.. code-block:: cpp
	
	#include "lz4_compress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void lz4Compress (
	    hls::stream <uint8_t>& in_lit_inStream,
	    hls::stream <lz4_compressd_dt>& in_lenOffset_Stream,
	    hls::stream <ap_uint <8>>& outStream,
	    hls::stream <bool>& endOfStream,
	    hls::stream <uint32_t>& compressdSizeStream,
	    uint32_t input_size
	    )

This module does the lz4 encoding by starting from WRITE_TOKEN state and based on the input read from stream the processing state changes.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - in_lit_inStream

        - Read Literals

    *
        - in_lenOffset_Stream

        - Read Offset-length

    *
        - outStream

        - Output data stream

    *
        - endOfStream

        - Stream indicating that all data is processed or not

    *
        - compressdSizeStream

        - Gives the compressed size for each 64K block

    *
        - input_size

        - Size of input

.. _doxid-namespacexf_1_1compression_1a6d894e598a08ce551be1ea538540a767:
.. _cid-xf::compression::lz4divide:

lz4Divide
---------


.. code-block:: cpp
	
	#include "lz4_compress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void lz4Divide (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <uint8_t>& lit_outStream,
	    hls::stream <lz4_compressd_dt>& lenOffset_Stream,
	    uint32_t input_size,
	    uint32_t max_lit_limit [PARALLEL_BLOCK],
	    uint32_t index
	    )

This is an intermediate module that seperates the input stream into two output streams, one literal stream and the other matchlen and offset stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inStream

        - reference of input literals stream

    *
        - lit_outStream

        - Offset-length stream for literals in input stream

    *
        - lenOffset_Stream

        - output data stream

    *
        - input_size

        - end flag for stream

    *
        - max_lit_limit

        - Size for compressed stream

    *
        - index

        - size of input

.. _doxid-namespacexf_1_1compression_1a1710109f73f8732aa47f9f32ce48ffb1:
.. _cid-xf::compression::lz4decompress:

lz4Decompress
-------------


.. code-block:: cpp
	
	#include "lz4_decompress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void lz4Decompress (
	    hls::stream <ap_uint <8>>& inStream,
	    hls::stream <compressd_dt>& outStream,
	    uint32_t input_size
	    )

This module reads the compressed data from input stream and decodes the offset, match length and literals by processing in various decompress states.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inStream

        - Input stream 8bit

    *
        - outStream

        - Output stream 32bit

    *
        - input_size

        - Input size

.. _doxid-namespacexf_1_1compression_1af5497dbaf33a90230a0ff12efaa1f921:
.. _cid-xf::compression::lzcompress:

lzCompress
----------


.. code-block:: cpp
	
	#include "lz_compress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int MATCH_LEN,
	    int MATCH_LEVEL,
	    int LZ_DICT_SIZE,
	    int BIT,
	    int MIN_OFFSET,
	    int MIN_MATCH,
	    int LZ_MAX_OFFSET_LIMIT
	    >
	void lzCompress (
	    hls::stream <ap_uint <BIT>>& inStream,
	    hls::stream <compressd_dt>& outStream,
	    uint32_t input_size,
	    uint32_t left_bytes
	    )

This module reads input literals from stream and updates match length and offset of each literal.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - MATCH_LEN

        - match length

    *
        - MATCH_LEVEL

        - match level

    *
        - LZ_DICT_SIZE

        - dictionary size

    *
        - BIT

        - bit

    *
        - MIN_OFFSET

        - minimum offset

    *
        - MIN_MATCH

        - minimum match

    *
        - LZ_MAX_OFFSET_LIMIT

        - maximum offset limit

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - input_size

        - input size

    *
        - left_bytes

        - left bytes in block

.. _doxid-namespacexf_1_1compression_1ae02088f889b35880f0ca0da17a5f4a63:
.. _cid-xf::compression::lzdecompress:

lzDecompress
------------


.. code-block:: cpp
	
	#include "lz_decompress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int HISTORY_SIZE,
	    int READ_STATE,
	    int MATCH_STATE,
	    int LOW_OFFSET_STATE,
	    int LOW_OFFSET
	    >
	void lzDecompress (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <ap_uint <8>>& outStream,
	    uint32_t original_size
	    )

This module writes the literals to the output stream as is and when match length and offset are read, the literals will be read from the local dictionary based on offset until match length.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - HISTORY_SIZE

        - history size

    *
        - READ_STATE

        - read state

    *
        - MATCH_STATE

        - match state

    *
        - LOW_OFFSET_STATE

        - low offset state

    *
        - LOW_OFFSET

        - low offset

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - original_size

        - original size

.. _doxid-namespacexf_1_1compression_1ac009ea0c6deba998a4eec5ad2fa23d2b:
.. _cid-xf::compression::lzbestmatchfilter:

lzBestMatchFilter
-----------------


.. code-block:: cpp
	
	#include "lz_optional.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int MATCH_LEN,
	    int OFFSET_WINDOW
	    >
	void lzBestMatchFilter (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <compressd_dt>& outStream,
	    uint32_t input_size,
	    uint32_t left_bytes
	    )

Objective of this module is to pick character with higher match length in the offset window range.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - MATCH_LEN

        - length of matched segment

    *
        - OFFSET_WINDOW

        - output window

    *
        - inStream

        - intput stream

    *
        - outStream

        - output stream

    *
        - input_size

        - intput stream size

    *
        - left_bytes

        - bytes left in block

.. _doxid-namespacexf_1_1compression_1a18026639223349e8757bb45c2ded2ef0:
.. _cid-xf::compression::lzbooster:

lzBooster
---------


.. code-block:: cpp
	
	#include "lz_optional.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int MAX_MATCH_LEN,
	    int BOOSTER_OFFSET_WINDOW
	    >
	void lzBooster (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <compressd_dt>& outStream,
	    uint32_t input_size,
	    uint32_t left_bytes
	    )

This module helps in finding better match length by doing more character match with supported max match length while maintaining an offset window. This helps in improving Compression Ratio.

Following is simple demonstartion of booster input and output.

**Input** - even though HAPPY BIRTHDAY can be matched fully but match length is still 6 due to MATCH_LEN

* character stream - .....HAPPY BIRTHDAY .......... HAPPY BIRTHDAY

* match length - .....000000000000001..........060000000000000

* offset - .....xy....p......k............x0000000000000

**Output** - with booster technique match length is increased to 14

* character stream - .....HAPPY BIRTHDAY .......... HAPPY BIRTHDAY

* match length - .....000000000000001..........0140000000000000

* offset - .....xy....p......k............x0000000000000

**Points to be noted:**

* Improves Compression Ratio

* Increase in BRAM resources for BOOSTER_OFFSET_WINDOW local memory



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - MAX_MATCH_LEN

        - maximum length allowed for character match

    *
        - BOOSTER_OFFSET_WINDOW

        - offset window to store/match the character

    *
        - inStream

        - input stream 32bit per read

    *
        - outStream

        - output stream 32bit per write

    *
        - input_size

        - intput size

    *
        - left_bytes

        - last 64 left over bytes

.. _doxid-namespacexf_1_1compression_1ae86722f675ee482734f547af7170cc8b:
.. _cid-xf::compression::lzfilter:

lzFilter
--------


.. code-block:: cpp
	
	#include "lz_optional.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void lzFilter (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <compressd_dt>& outStream,
	    uint32_t input_size,
	    uint32_t left_bytes
	    )

This module checks if match length exists, and if match length exists it filters the match length -1 characters writing to output stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - MATCH_LEN

        - length of matched segment

    *
        - OFFSET_WINDOW

        - output window

    *
        - inStream

        - intput stream

    *
        - outStream

        - output stream

    *
        - input_size

        - intput stream size

    *
        - left_bytes

        - bytes left in block

.. _doxid-namespacexf_1_1compression_1aa7ee9a50a179566a67c1ad18180cc1a6:
.. _cid-xf::compression::mm2snb:

mm2sNb
------


.. code-block:: cpp
	
	#include "mm2s.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int DATAWIDTH,
	    int BURST_SIZE,
	    int NUM_BLOCKS
	    >
	void mm2sNb (
	    const ap_uint <DATAWIDTH>* in,
	    const uint32_t _input_idx [PARALLEL_BLOCK],
	    hls::stream <ap_uint <DATAWIDTH>> outStream [PARALLEL_BLOCK],
	    const uint32_t _input_size [PARALLEL_BLOCK]
	    )

This module reads 512bit data from memory interface and writes to the stream. Writing to the multiple data streams is non-blocking call which is done using is_full() API.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DATAWIDTH

        - width of data bus

    *
        - BURST_SIZE

        - burst size of the data transfers

    *
        - NUM_BLOCKS

        - number of blocks

    *
        - in

        - input memory address

    *
        - _input_idx

        - input index

    *
        - outStream

        - output stream

    *
        - _input_size

        - intput stream size

.. _doxid-namespacexf_1_1compression_1a3aeeaeadf73601bea34758640649843a:
.. _cid-xf::compression::mm2snbroundoff:

mm2sNbRoundOff
--------------


.. code-block:: cpp
	
	#include "mm2s.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int DATAWIDTH,
	    int BURST_SIZE,
	    int NUM_BLOCKS
	    >
	void mm2sNbRoundOff (
	    const ap_uint <DATAWIDTH>* in,
	    const uint32_t _input_idx [PARALLEL_BLOCK],
	    hls::stream <ap_uint <DATAWIDTH>> outStream [PARALLEL_BLOCK],
	    const uint32_t _input_size [PARALLEL_BLOCK],
	    const uint32_t max_buffer_size_in_bytes
	    )

This module is same as mm2sNb API but with an extra handling rounding off the indexing to maximum buffer size for P2P decompression.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DATAWIDTH

        - width of data bus

    *
        - BURST_SIZE

        - burst size of the data transfers

    *
        - NUM_BLOCKS

        - number of blocks

    *
        - in

        - input memory address

    *
        - _input_idx

        - input index

    *
        - outStream

        - output stream

    *
        - _input_size

        - intput stream size

    *
        - max_buffer_size_in_bytes

        - Maximum buffer size for indexing

.. _doxid-namespacexf_1_1compression_1a6416136132d3f57ce7f279ddbd9ed8ec:
.. _cid-xf::compression::packers2mm:

packerS2mm
----------


.. code-block:: cpp
	
	#include "packer_modules.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void packerS2mm (
	    hls::stream <uintMemWidth_t>& inStream,
	    uintMemWidth_t* out,
	    hls::stream <uint32_t>& inStreamSize
	    )

Streaming to memory mapped interface conversion.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inStream

        - output memory address

    *
        - out

        - output index

    *
        - inStreamSize

        - input stream size

.. _doxid-namespacexf_1_1compression_1aec0fd4b593c3ca527fd4ec78f5664728:
.. _cid-xf::compression::packermm2s:

packerMm2s
----------


.. code-block:: cpp
	
	#include "packer_modules.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int DATAWIDTH,
	    int BURST_SIZE
	    >
	void packerMm2s (
	    const uintMemWidth_t* in,
	    uintMemWidth_t* head_prev_blk,
	    uintMemWidth_t* orig_input_data,
	    hls::stream <ap_uint <DATAWIDTH>>& outStream,
	    hls::stream <uint32_t>& outStreamSize,
	    uint32_t* compressd_size,
	    uint32_t* in_block_size,
	    uint32_t no_blocks,
	    uint32_t block_size_in_kb,
	    uint32_t head_res_size,
	    uint32_t offset
	    )

Memory mapped to streaming interface conversion used with packer kernel.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - DATAWIDTH

        - width of data bus

    *
        - BURST_SIZE

        - burst size of the data transfers

    *
        - in

        - intput memory address

    *
        - head_prev_blk

        - intput index

    *
        - orig_input_data

        - intput index

    *
        - outStream

        - output stream

    *
        - outStreamSize

        - intput stream size

    *
        - compressd_size

        - intput stream size

    *
        - in_block_size

        - intput stream size

    *
        - no_blocks

        - intput stream size

    *
        - block_size_in_kb

        - intput stream size

    *
        - head_res_size

        - intput stream size

    *
        - offset

        - intput stream size

.. _doxid-namespacexf_1_1compression_1a7e5a89d8aff7adabae79d84c151ee47f:
.. _cid-xf::compression::packerstreamupsizer:

packerStreamUpSizer
-------------------


.. code-block:: cpp
	
	#include "packer_modules.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void packerStreamUpSizer (
	    hls::stream <ap_uint <64>>& inStream,
	    hls::stream <ap_uint <512>>& outStream,
	    hls::stream <uint32_t>& inStreamSize,
	    hls::stream <uint32_t>& outStreamSize
	    )

Upsize the data stream from packer kernel.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - inStreamSize

        - input stream size

    *
        - outStreamSize

        - output stream size

.. _doxid-namespacexf_1_1compression_1ace8f93fd30652bf4b2f86a8cc5ed6f96:
.. _cid-xf::compression::packerstreamdownsizer:

packerStreamDownSizer
---------------------


.. code-block:: cpp
	
	#include "packer_modules.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    int IN_WIDTH,
	    int OUT_WIDTH
	    >
	void packerStreamDownSizer (
	    hls::stream <ap_uint <IN_WIDTH>>& inStream,
	    hls::stream <ap_uint <OUT_WIDTH>>& outStream,
	    hls::stream <uint32_t>& inStreamSize,
	    hls::stream <uint32_t>& outStreamSize,
	    uint32_t no_blocks
	    )

Downsize the data stream for use by packer kernel.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - IN_WIDTH

        - input width

    *
        - OUT_WIDTH

        - output width

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - inStreamSize

        - input stream size

    *
        - outStreamSize

        - output stream size

    *
        - no_blocks

        - number of blocks

.. _doxid-namespacexf_1_1compression_1abf8c23016af9dd2af0991eba67b001db:
.. _cid-xf::compression::s2mmeosnb:

s2mmEosNb
---------


.. code-block:: cpp
	
	#include "s2mm.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    class STREAM_SIZE_DT,
	    int BURST_SIZE,
	    int DATAWIDTH,
	    int NUM_BLOCKS
	    >
	void s2mmEosNb (
	    ap_uint <DATAWIDTH>* out,
	    const uint32_t output_idx [PARALLEL_BLOCK],
	    hls::stream <ap_uint <DATAWIDTH>> inStream [PARALLEL_BLOCK],
	    hls::stream <bool> endOfStream [PARALLEL_BLOCK],
	    hls::stream <uint32_t> compressedSize [PARALLEL_BLOCK],
	    STREAM_SIZE_DT output_size [PARALLEL_BLOCK]
	    )

This module reads DATAWIDTH data from stream until end of stream happens and writes the data to DDR. Reading data from multiple data streams is non-blocking which is done using empty() API.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - STREAM_SIZE_DT

        - Stream size class instance

    *
        - BURST_SIZE

        - burst size of the data transfers

    *
        - DATAWIDTH

        - width of data bus

    *
        - NUM_BLOCKS

        - number of blocks

    *
        - out

        - output memory address

    *
        - output_idx

        - output index

    *
        - inStream

        - input stream

    *
        - endOfStream

        - end flag for stream

    *
        - compressedSize

        - size of compressed stream

    *
        - output_size

        - output size

.. _doxid-namespacexf_1_1compression_1a8f2df948c53a68705acb3f76da89525f:
.. _cid-xf::compression::s2mmnb:

s2mmNb
------


.. code-block:: cpp
	
	#include "s2mm.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    class STREAM_SIZE_DT,
	    int BURST_SIZE,
	    int DATAWIDTH,
	    int NUM_BLOCKS
	    >
	void s2mmNb (
	    ap_uint <DATAWIDTH>* out,
	    const uint32_t output_idx [PARALLEL_BLOCK],
	    hls::stream <ap_uint <DATAWIDTH>> inStream [PARALLEL_BLOCK],
	    const STREAM_SIZE_DT input_size [PARALLEL_BLOCK]
	    )

This module reads DATAWIDTH data from stream based on size stream and writes the data to DDR. Reading data from multiple data streams is non-blocking which is done using empty() API.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - STREAM_SIZE_DT

        - Stream size class instance

    *
        - BURST_SIZE

        - burst size of the data transfers

    *
        - DATAWIDTH

        - width of data bus

    *
        - NUM_BLOCKS

        - number of blocks

    *
        - out

        - output memory address

    *
        - output_idx

        - output index

    *
        - inStream

        - input stream

    *
        - input_size

        - input size

.. _doxid-namespacexf_1_1compression_1a6c557befca577c72f320e66870a4241b:
.. _cid-xf::compression::snappycompress:

snappyCompress
--------------


.. code-block:: cpp
	
	#include "snappy_compress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void snappyCompress (
	    hls::stream <uint8_t>& in_lit_inStream,
	    hls::stream <snappy_compressd_dt>& in_lenOffset_Stream,
	    hls::stream <ap_uint <8>>& outStream,
	    hls::stream <bool>& endOfStream,
	    hls::stream <uint32_t>& compressdSizeStream,
	    uint32_t input_size
	    )

This module encodes the input data based on the snappy algorithm.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - in_lit_inStream

        - reference of input literals stream

    *
        - in_lenOffset_Stream

        - Offset-length stream for literals in input stream

    *
        - outStream

        - output data stream

    *
        - endOfStream

        - end flag for stream

    *
        - compressdSizeStream

        - Size for compressed stream

    *
        - input_size

        - size of input

.. _doxid-namespacexf_1_1compression_1a7e0ce1861ebf042566bf6186274129c1:
.. _cid-xf::compression::snappydivide:

snappyDivide
------------


.. code-block:: cpp
	
	#include "snappy_compress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	void snappyDivide (
	    hls::stream <compressd_dt>& inStream,
	    hls::stream <uint8_t>& lit_outStream,
	    hls::stream <snappy_compressd_dt>& lenOffset_Stream,
	    uint32_t input_size,
	    uint32_t max_lit_limit [PARALLEL_BLOCK],
	    uint32_t index
	    )

This is an intermediate module that seperates the input stream into two output streams, one literal stream and the other matchlen and offset stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inStream

        - reference of input literals stream

    *
        - lit_outStream

        - Offset-length stream for literals in input stream

    *
        - lenOffset_Stream

        - output data stream

    *
        - input_size

        - end flag for stream

    *
        - max_lit_limit

        - Size for compressed stream

    *
        - index

        - size of input

.. _doxid-namespacexf_1_1compression_1afaff624736a65e4b128f3ebc325c1a03:
.. _cid-xf::compression::snappydecompress:

snappyDecompress
----------------


.. code-block:: cpp
	
	#include "snappy_decompress.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	static void snappyDecompress (
	    hls::stream <uintV_t>& inStream,
	    hls::stream <encoded_dt>& outStream,
	    uint32_t input_size
	    )

This module decodes the compressed data based on the snappy decompression format.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - input_size

        - input size

.. _doxid-namespacexf_1_1compression_1af0dd6df2dd3def8fe03cf1bcb0242fea:
.. _cid-xf::compression::streamdownsizer:

streamDownsizer
---------------


.. code-block:: cpp
	
	#include "stream_downsizer.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    class SIZE_DT,
	    int IN_WIDTH,
	    int OUT_WIDTH
	    >
	void streamDownsizer (
	    hls::stream <ap_uint <IN_WIDTH>>& inStream,
	    hls::stream <ap_uint <OUT_WIDTH>>& outStream,
	    SIZE_DT input_size
	    )

This module reads the IN_WIDTH size from the data stream and downsizes the data to OUT_WIDTH size and writes to output stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - SIZE_DT

        - data size

    *
        - IN_WIDTH

        - input width

    *
        - OUT_WIDTH

        - output width

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - input_size

        - input size

.. _doxid-namespacexf_1_1compression_1a6a8abb131866b2039b8a790cdb03b3ec:
.. _cid-xf::compression::streamdownsizerp2p:

streamDownsizerP2P
------------------


.. code-block:: cpp
	
	#include "stream_downsizer.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    class SIZE_DT,
	    int IN_WIDTH,
	    int OUT_WIDTH
	    >
	void streamDownsizerP2P (
	    hls::stream <ap_uint <IN_WIDTH>>& inStream,
	    hls::stream <ap_uint <OUT_WIDTH>>& outStream,
	    SIZE_DT input_size,
	    SIZE_DT input_start_idx
	    )

This module reads the IN_WIDTH size from the data stream and downsizes the data to OUT_WIDTH size and writes to output stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - SIZE_DT

        - data size

    *
        - IN_WIDTH

        - input width

    *
        - OUT_WIDTH

        - output width

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - input_size

        - input size

    *
        - input_start_idx

        - input starting index

.. _doxid-namespacexf_1_1compression_1af54dd9dffdf3f3c37bde15680737b3b1:
.. _cid-xf::compression::streamupsizer:

streamUpsizer
-------------


.. code-block:: cpp
	
	#include "stream_upsizer.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    class SIZE_DT,
	    int IN_WIDTH,
	    int OUT_WIDTH
	    >
	void streamUpsizer (
	    hls::stream <ap_uint <IN_WIDTH>>& inStream,
	    hls::stream <ap_uint <OUT_WIDTH>>& outStream,
	    SIZE_DT original_size
	    )

This module reads IN_WIDTH from the input stream and accumulate the consecutive reads until OUT_WIDTH and writes the OUT_WIDTH data to output stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - SIZE_DT

        - stream size class instance

    *
        - IN_WIDTH

        - input data width

    *
        - OUT_WIDTH

        - output data width

    *
        - inStream

        - input stream

    *
        - outStream

        - output stream

    *
        - original_size

        - original stream size

.. _doxid-namespacexf_1_1compression_1a36b991468a0b84916b936ba15b7bb28e:
.. _cid-xf::compression::upsizereos:

upsizerEos
----------


.. code-block:: cpp
	
	#include "stream_upsizer.hpp"



.. ref-code-block:: cpp
	:class: title-code-block

	template <
	    class SIZE_DT,
	    int IN_WIDTH,
	    int OUT_WIDTH
	    >
	void upsizerEos (
	    hls::stream <ap_uint <IN_WIDTH>>& inStream,
	    hls::stream <bool>& inStream_eos,
	    hls::stream <ap_uint <OUT_WIDTH>>& outStream,
	    hls::stream <bool>& outStream_eos
	    )

This module reads IN_WIDTH data from input stream based on end of stream and accumulate the consecutive reads until OUT_WIDTH and then writes OUT_WIDTH data to output stream.



.. rubric:: Parameters:

.. list-table::
    :widths: 20 80

    *
        - SIZE_DT

        - stream size class instance

    *
        - IN_WIDTH

        - input data width

    *
        - OUT_WIDTH

        - output data width

    *
        - inStream

        - input stream

    *
        - inStream_eos

        - input end of stream flag

    *
        - outStream

        - output stream

    *
        - outStream_eos

        - output end of stream flag

